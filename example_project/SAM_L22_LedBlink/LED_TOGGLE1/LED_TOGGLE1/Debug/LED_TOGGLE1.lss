
LED_TOGGLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004448  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000006c  20000000  00004448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003944  2000006c  000044b4  0002006c  2**2
                  ALLOC
  3 .stack        00002000  200039b0  00007df8  0002006c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
  6 .debug_info   00027613  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003ec4  00000000  00000000  00047700  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002bf9  00000000  00000000  0004b5c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008f0  00000000  00000000  0004e1bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000770  00000000  00000000  0004eaad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021731  00000000  00000000  0004f21d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010a34  00000000  00000000  0007094e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a4917  00000000  00000000  00081382  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000223c  00000000  00000000  00125c9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b0 59 00 20 e9 32 00 00 6d 33 00 00 6d 33 00 00     .Y. .2..m3..m3..
	...
      2c:	65 04 00 00 00 00 00 00 00 00 00 00 81 05 00 00     e...............
      3c:	c9 05 00 00 6d 33 00 00 6d 33 00 00 6d 33 00 00     ....m3..m3..m3..
      4c:	6d 33 00 00 6d 33 00 00 6d 33 00 00 6d 33 00 00     m3..m3..m3..m3..
      5c:	6d 33 00 00 6d 33 00 00 91 19 00 00 a9 19 00 00     m3..m3..........
      6c:	c1 19 00 00 d9 19 00 00 f1 19 00 00 09 1a 00 00     ................
      7c:	6d 33 00 00 35 26 00 00 49 26 00 00 5d 26 00 00     m3..5&..I&..]&..
      8c:	71 26 00 00 6d 33 00 00 6d 33 00 00 6d 33 00 00     q&..m3..m3..m3..
      9c:	6d 33 00 00 6d 33 00 00 6d 33 00 00                 m3..m3..m3..

000000a8 <__do_global_dtors_aux>:
      a8:	b510      	push	{r4, lr}
      aa:	4c06      	ldr	r4, [pc, #24]	; (c4 <__do_global_dtors_aux+0x1c>)
      ac:	7823      	ldrb	r3, [r4, #0]
      ae:	2b00      	cmp	r3, #0
      b0:	d107      	bne.n	c2 <__do_global_dtors_aux+0x1a>
      b2:	4b05      	ldr	r3, [pc, #20]	; (c8 <__do_global_dtors_aux+0x20>)
      b4:	2b00      	cmp	r3, #0
      b6:	d002      	beq.n	be <__do_global_dtors_aux+0x16>
      b8:	4804      	ldr	r0, [pc, #16]	; (cc <__do_global_dtors_aux+0x24>)
      ba:	e000      	b.n	be <__do_global_dtors_aux+0x16>
      bc:	bf00      	nop
      be:	2301      	movs	r3, #1
      c0:	7023      	strb	r3, [r4, #0]
      c2:	bd10      	pop	{r4, pc}
      c4:	2000006c 	.word	0x2000006c
      c8:	00000000 	.word	0x00000000
      cc:	00004448 	.word	0x00004448

000000d0 <frame_dummy>:
      d0:	4b08      	ldr	r3, [pc, #32]	; (f4 <frame_dummy+0x24>)
      d2:	b510      	push	{r4, lr}
      d4:	2b00      	cmp	r3, #0
      d6:	d003      	beq.n	e0 <frame_dummy+0x10>
      d8:	4907      	ldr	r1, [pc, #28]	; (f8 <frame_dummy+0x28>)
      da:	4808      	ldr	r0, [pc, #32]	; (fc <frame_dummy+0x2c>)
      dc:	e000      	b.n	e0 <frame_dummy+0x10>
      de:	bf00      	nop
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x30>)
      e2:	6803      	ldr	r3, [r0, #0]
      e4:	2b00      	cmp	r3, #0
      e6:	d100      	bne.n	ea <frame_dummy+0x1a>
      e8:	bd10      	pop	{r4, pc}
      ea:	4b06      	ldr	r3, [pc, #24]	; (104 <frame_dummy+0x34>)
      ec:	2b00      	cmp	r3, #0
      ee:	d0fb      	beq.n	e8 <frame_dummy+0x18>
      f0:	4798      	blx	r3
      f2:	e7f9      	b.n	e8 <frame_dummy+0x18>
      f4:	00000000 	.word	0x00000000
      f8:	20000070 	.word	0x20000070
      fc:	00004448 	.word	0x00004448
     100:	00004448 	.word	0x00004448
     104:	00000000 	.word	0x00000000

00000108 <vApplicationIdleHook>:
TaskHandle_t sLedOnTask;
TaskHandle_t sLedffTask;


void vApplicationIdleHook( void )
{
     108:	b580      	push	{r7, lr}
     10a:	af00      	add	r7, sp, #0
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
     10c:	bf30      	wfi
	/* enter sleep mode*/
	__WFI();	
}
     10e:	46c0      	nop			; (mov r8, r8)
     110:	46bd      	mov	sp, r7
     112:	bd80      	pop	{r7, pc}

00000114 <FreeRtosTasks>:


BaseType_t FreeRtosTasks(void)
{
     114:	b590      	push	{r4, r7, lr}
     116:	b085      	sub	sp, #20
     118:	af02      	add	r7, sp, #8
BaseType_t u32RetType; 	
	
	u32RetType =  xTaskCreate( led_on,"LED_ON", 40, 0u, 1u,&sLedOnTask );
     11a:	4910      	ldr	r1, [pc, #64]	; (15c <FreeRtosTasks+0x48>)
     11c:	4810      	ldr	r0, [pc, #64]	; (160 <FreeRtosTasks+0x4c>)
     11e:	4b11      	ldr	r3, [pc, #68]	; (164 <FreeRtosTasks+0x50>)
     120:	9301      	str	r3, [sp, #4]
     122:	2301      	movs	r3, #1
     124:	9300      	str	r3, [sp, #0]
     126:	2300      	movs	r3, #0
     128:	2228      	movs	r2, #40	; 0x28
     12a:	4c0f      	ldr	r4, [pc, #60]	; (168 <FreeRtosTasks+0x54>)
     12c:	47a0      	blx	r4
     12e:	0003      	movs	r3, r0
     130:	607b      	str	r3, [r7, #4]

    if(u32RetType == 1u)
     132:	687b      	ldr	r3, [r7, #4]
     134:	2b01      	cmp	r3, #1
     136:	d10b      	bne.n	150 <FreeRtosTasks+0x3c>
	{
		u32RetType =  xTaskCreate( led_off,"LED_FF", 40, 0u, 1u,&sLedffTask );
     138:	490c      	ldr	r1, [pc, #48]	; (16c <FreeRtosTasks+0x58>)
     13a:	480d      	ldr	r0, [pc, #52]	; (170 <FreeRtosTasks+0x5c>)
     13c:	4b0d      	ldr	r3, [pc, #52]	; (174 <FreeRtosTasks+0x60>)
     13e:	9301      	str	r3, [sp, #4]
     140:	2301      	movs	r3, #1
     142:	9300      	str	r3, [sp, #0]
     144:	2300      	movs	r3, #0
     146:	2228      	movs	r2, #40	; 0x28
     148:	4c07      	ldr	r4, [pc, #28]	; (168 <FreeRtosTasks+0x54>)
     14a:	47a0      	blx	r4
     14c:	0003      	movs	r3, r0
     14e:	607b      	str	r3, [r7, #4]
	}
	

return u32RetType;
     150:	687b      	ldr	r3, [r7, #4]
     152:	0018      	movs	r0, r3
     154:	46bd      	mov	sp, r7
     156:	b003      	add	sp, #12
     158:	bd90      	pop	{r4, r7, pc}
     15a:	46c0      	nop			; (mov r8, r8)
     15c:	00004354 	.word	0x00004354
     160:	00000251 	.word	0x00000251
     164:	20003970 	.word	0x20003970
     168:	000006e1 	.word	0x000006e1
     16c:	0000435c 	.word	0x0000435c
     170:	00000271 	.word	0x00000271
     174:	20003974 	.word	0x20003974

00000178 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     178:	b580      	push	{r7, lr}
     17a:	b084      	sub	sp, #16
     17c:	af00      	add	r7, sp, #0
     17e:	0002      	movs	r2, r0
     180:	1dfb      	adds	r3, r7, #7
     182:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     184:	230f      	movs	r3, #15
     186:	18fb      	adds	r3, r7, r3
     188:	1dfa      	adds	r2, r7, #7
     18a:	7812      	ldrb	r2, [r2, #0]
     18c:	09d2      	lsrs	r2, r2, #7
     18e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     190:	230e      	movs	r3, #14
     192:	18fb      	adds	r3, r7, r3
     194:	1dfa      	adds	r2, r7, #7
     196:	7812      	ldrb	r2, [r2, #0]
     198:	0952      	lsrs	r2, r2, #5
     19a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     19c:	4b0d      	ldr	r3, [pc, #52]	; (1d4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     19e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     1a0:	230f      	movs	r3, #15
     1a2:	18fb      	adds	r3, r7, r3
     1a4:	781b      	ldrb	r3, [r3, #0]
     1a6:	2b00      	cmp	r3, #0
     1a8:	d10f      	bne.n	1ca <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     1aa:	230f      	movs	r3, #15
     1ac:	18fb      	adds	r3, r7, r3
     1ae:	781b      	ldrb	r3, [r3, #0]
     1b0:	009b      	lsls	r3, r3, #2
     1b2:	2210      	movs	r2, #16
     1b4:	4694      	mov	ip, r2
     1b6:	44bc      	add	ip, r7
     1b8:	4463      	add	r3, ip
     1ba:	3b08      	subs	r3, #8
     1bc:	681a      	ldr	r2, [r3, #0]
     1be:	230e      	movs	r3, #14
     1c0:	18fb      	adds	r3, r7, r3
     1c2:	781b      	ldrb	r3, [r3, #0]
     1c4:	01db      	lsls	r3, r3, #7
     1c6:	18d3      	adds	r3, r2, r3
     1c8:	e000      	b.n	1cc <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     1ca:	2300      	movs	r3, #0
	}
}
     1cc:	0018      	movs	r0, r3
     1ce:	46bd      	mov	sp, r7
     1d0:	b004      	add	sp, #16
     1d2:	bd80      	pop	{r7, pc}
     1d4:	41006000 	.word	0x41006000

000001d8 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     1d8:	b580      	push	{r7, lr}
     1da:	b082      	sub	sp, #8
     1dc:	af00      	add	r7, sp, #0
     1de:	0002      	movs	r2, r0
     1e0:	1dfb      	adds	r3, r7, #7
     1e2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     1e4:	1dfb      	adds	r3, r7, #7
     1e6:	781b      	ldrb	r3, [r3, #0]
     1e8:	0018      	movs	r0, r3
     1ea:	4b03      	ldr	r3, [pc, #12]	; (1f8 <port_get_group_from_gpio_pin+0x20>)
     1ec:	4798      	blx	r3
     1ee:	0003      	movs	r3, r0
}
     1f0:	0018      	movs	r0, r3
     1f2:	46bd      	mov	sp, r7
     1f4:	b002      	add	sp, #8
     1f6:	bd80      	pop	{r7, pc}
     1f8:	00000179 	.word	0x00000179

000001fc <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     1fc:	b580      	push	{r7, lr}
     1fe:	b084      	sub	sp, #16
     200:	af00      	add	r7, sp, #0
     202:	0002      	movs	r2, r0
     204:	1dfb      	adds	r3, r7, #7
     206:	701a      	strb	r2, [r3, #0]
     208:	1dbb      	adds	r3, r7, #6
     20a:	1c0a      	adds	r2, r1, #0
     20c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     20e:	1dfb      	adds	r3, r7, #7
     210:	781b      	ldrb	r3, [r3, #0]
     212:	0018      	movs	r0, r3
     214:	4b0d      	ldr	r3, [pc, #52]	; (24c <port_pin_set_output_level+0x50>)
     216:	4798      	blx	r3
     218:	0003      	movs	r3, r0
     21a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     21c:	1dfb      	adds	r3, r7, #7
     21e:	781b      	ldrb	r3, [r3, #0]
     220:	221f      	movs	r2, #31
     222:	4013      	ands	r3, r2
     224:	2201      	movs	r2, #1
     226:	409a      	lsls	r2, r3
     228:	0013      	movs	r3, r2
     22a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     22c:	1dbb      	adds	r3, r7, #6
     22e:	781b      	ldrb	r3, [r3, #0]
     230:	2b00      	cmp	r3, #0
     232:	d003      	beq.n	23c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     234:	68fb      	ldr	r3, [r7, #12]
     236:	68ba      	ldr	r2, [r7, #8]
     238:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     23a:	e002      	b.n	242 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     23c:	68fb      	ldr	r3, [r7, #12]
     23e:	68ba      	ldr	r2, [r7, #8]
     240:	615a      	str	r2, [r3, #20]
}
     242:	46c0      	nop			; (mov r8, r8)
     244:	46bd      	mov	sp, r7
     246:	b004      	add	sp, #16
     248:	bd80      	pop	{r7, pc}
     24a:	46c0      	nop			; (mov r8, r8)
     24c:	000001d9 	.word	0x000001d9

00000250 <led_on>:




void led_on(void)
{
     250:	b580      	push	{r7, lr}
     252:	af00      	add	r7, sp, #0
	while(1)
	{
		
		 port_pin_set_output_level(LED_0_PIN, true);
     254:	2101      	movs	r1, #1
     256:	205b      	movs	r0, #91	; 0x5b
     258:	4b03      	ldr	r3, [pc, #12]	; (268 <led_on+0x18>)
     25a:	4798      	blx	r3
		 vTaskDelay( 500);
     25c:	23fa      	movs	r3, #250	; 0xfa
     25e:	005b      	lsls	r3, r3, #1
     260:	0018      	movs	r0, r3
     262:	4b02      	ldr	r3, [pc, #8]	; (26c <led_on+0x1c>)
     264:	4798      	blx	r3
		 port_pin_set_output_level(LED_0_PIN, true);
     266:	e7f5      	b.n	254 <led_on+0x4>
     268:	000001fd 	.word	0x000001fd
     26c:	00000951 	.word	0x00000951

00000270 <led_off>:
}

/*periodic function*/
/* periodicity is 250 milli seconds*/
void led_off(void)
{
     270:	b580      	push	{r7, lr}
     272:	b082      	sub	sp, #8
     274:	af00      	add	r7, sp, #0
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
     276:	4b07      	ldr	r3, [pc, #28]	; (294 <led_off+0x24>)
     278:	4798      	blx	r3
     27a:	0003      	movs	r3, r0
     27c:	607b      	str	r3, [r7, #4]
	while(1)
	{
		port_pin_set_output_level(LED_0_PIN, false);
     27e:	2100      	movs	r1, #0
     280:	205b      	movs	r0, #91	; 0x5b
     282:	4b05      	ldr	r3, [pc, #20]	; (298 <led_off+0x28>)
     284:	4798      	blx	r3
		//vTaskDelayUntil(xLastWakeTime, pdMS_TO_TICKS( 1000 ));
	   	vTaskDelay( 500);
     286:	23fa      	movs	r3, #250	; 0xfa
     288:	005b      	lsls	r3, r3, #1
     28a:	0018      	movs	r0, r3
     28c:	4b03      	ldr	r3, [pc, #12]	; (29c <led_off+0x2c>)
     28e:	4798      	blx	r3
		port_pin_set_output_level(LED_0_PIN, false);
     290:	e7f5      	b.n	27e <led_off+0xe>
     292:	46c0      	nop			; (mov r8, r8)
     294:	00000b45 	.word	0x00000b45
     298:	000001fd 	.word	0x000001fd
     29c:	00000951 	.word	0x00000951

000002a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     2a0:	b580      	push	{r7, lr}
     2a2:	b082      	sub	sp, #8
     2a4:	af00      	add	r7, sp, #0
     2a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     2a8:	687b      	ldr	r3, [r7, #4]
     2aa:	3308      	adds	r3, #8
     2ac:	001a      	movs	r2, r3
     2ae:	687b      	ldr	r3, [r7, #4]
     2b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     2b2:	687b      	ldr	r3, [r7, #4]
     2b4:	2201      	movs	r2, #1
     2b6:	4252      	negs	r2, r2
     2b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     2ba:	687b      	ldr	r3, [r7, #4]
     2bc:	3308      	adds	r3, #8
     2be:	001a      	movs	r2, r3
     2c0:	687b      	ldr	r3, [r7, #4]
     2c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     2c4:	687b      	ldr	r3, [r7, #4]
     2c6:	3308      	adds	r3, #8
     2c8:	001a      	movs	r2, r3
     2ca:	687b      	ldr	r3, [r7, #4]
     2cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     2ce:	687b      	ldr	r3, [r7, #4]
     2d0:	2200      	movs	r2, #0
     2d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     2d4:	46c0      	nop			; (mov r8, r8)
     2d6:	46bd      	mov	sp, r7
     2d8:	b002      	add	sp, #8
     2da:	bd80      	pop	{r7, pc}

000002dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     2dc:	b580      	push	{r7, lr}
     2de:	b082      	sub	sp, #8
     2e0:	af00      	add	r7, sp, #0
     2e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
     2e4:	687b      	ldr	r3, [r7, #4]
     2e6:	2200      	movs	r2, #0
     2e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	46bd      	mov	sp, r7
     2ee:	b002      	add	sp, #8
     2f0:	bd80      	pop	{r7, pc}

000002f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     2f2:	b580      	push	{r7, lr}
     2f4:	b084      	sub	sp, #16
     2f6:	af00      	add	r7, sp, #0
     2f8:	6078      	str	r0, [r7, #4]
     2fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	685b      	ldr	r3, [r3, #4]
     300:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     302:	683b      	ldr	r3, [r7, #0]
     304:	68fa      	ldr	r2, [r7, #12]
     306:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     308:	68fb      	ldr	r3, [r7, #12]
     30a:	689a      	ldr	r2, [r3, #8]
     30c:	683b      	ldr	r3, [r7, #0]
     30e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     310:	68fb      	ldr	r3, [r7, #12]
     312:	689b      	ldr	r3, [r3, #8]
     314:	683a      	ldr	r2, [r7, #0]
     316:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
     318:	68fb      	ldr	r3, [r7, #12]
     31a:	683a      	ldr	r2, [r7, #0]
     31c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
     31e:	683b      	ldr	r3, [r7, #0]
     320:	687a      	ldr	r2, [r7, #4]
     322:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
     324:	687b      	ldr	r3, [r7, #4]
     326:	681b      	ldr	r3, [r3, #0]
     328:	1c5a      	adds	r2, r3, #1
     32a:	687b      	ldr	r3, [r7, #4]
     32c:	601a      	str	r2, [r3, #0]
}
     32e:	46c0      	nop			; (mov r8, r8)
     330:	46bd      	mov	sp, r7
     332:	b004      	add	sp, #16
     334:	bd80      	pop	{r7, pc}

00000336 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     336:	b580      	push	{r7, lr}
     338:	b084      	sub	sp, #16
     33a:	af00      	add	r7, sp, #0
     33c:	6078      	str	r0, [r7, #4]
     33e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     340:	683b      	ldr	r3, [r7, #0]
     342:	681b      	ldr	r3, [r3, #0]
     344:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     346:	68bb      	ldr	r3, [r7, #8]
     348:	3301      	adds	r3, #1
     34a:	d103      	bne.n	354 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     34c:	687b      	ldr	r3, [r7, #4]
     34e:	691b      	ldr	r3, [r3, #16]
     350:	60fb      	str	r3, [r7, #12]
     352:	e00c      	b.n	36e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     354:	687b      	ldr	r3, [r7, #4]
     356:	3308      	adds	r3, #8
     358:	60fb      	str	r3, [r7, #12]
     35a:	e002      	b.n	362 <vListInsert+0x2c>
     35c:	68fb      	ldr	r3, [r7, #12]
     35e:	685b      	ldr	r3, [r3, #4]
     360:	60fb      	str	r3, [r7, #12]
     362:	68fb      	ldr	r3, [r7, #12]
     364:	685b      	ldr	r3, [r3, #4]
     366:	681a      	ldr	r2, [r3, #0]
     368:	68bb      	ldr	r3, [r7, #8]
     36a:	429a      	cmp	r2, r3
     36c:	d9f6      	bls.n	35c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     36e:	68fb      	ldr	r3, [r7, #12]
     370:	685a      	ldr	r2, [r3, #4]
     372:	683b      	ldr	r3, [r7, #0]
     374:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     376:	683b      	ldr	r3, [r7, #0]
     378:	685b      	ldr	r3, [r3, #4]
     37a:	683a      	ldr	r2, [r7, #0]
     37c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
     37e:	683b      	ldr	r3, [r7, #0]
     380:	68fa      	ldr	r2, [r7, #12]
     382:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
     384:	68fb      	ldr	r3, [r7, #12]
     386:	683a      	ldr	r2, [r7, #0]
     388:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
     38a:	683b      	ldr	r3, [r7, #0]
     38c:	687a      	ldr	r2, [r7, #4]
     38e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
     390:	687b      	ldr	r3, [r7, #4]
     392:	681b      	ldr	r3, [r3, #0]
     394:	1c5a      	adds	r2, r3, #1
     396:	687b      	ldr	r3, [r7, #4]
     398:	601a      	str	r2, [r3, #0]
}
     39a:	46c0      	nop			; (mov r8, r8)
     39c:	46bd      	mov	sp, r7
     39e:	b004      	add	sp, #16
     3a0:	bd80      	pop	{r7, pc}

000003a2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     3a2:	b580      	push	{r7, lr}
     3a4:	b084      	sub	sp, #16
     3a6:	af00      	add	r7, sp, #0
     3a8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     3aa:	687b      	ldr	r3, [r7, #4]
     3ac:	691b      	ldr	r3, [r3, #16]
     3ae:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     3b0:	687b      	ldr	r3, [r7, #4]
     3b2:	685b      	ldr	r3, [r3, #4]
     3b4:	687a      	ldr	r2, [r7, #4]
     3b6:	6892      	ldr	r2, [r2, #8]
     3b8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     3ba:	687b      	ldr	r3, [r7, #4]
     3bc:	689b      	ldr	r3, [r3, #8]
     3be:	687a      	ldr	r2, [r7, #4]
     3c0:	6852      	ldr	r2, [r2, #4]
     3c2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     3c4:	68fb      	ldr	r3, [r7, #12]
     3c6:	685a      	ldr	r2, [r3, #4]
     3c8:	687b      	ldr	r3, [r7, #4]
     3ca:	429a      	cmp	r2, r3
     3cc:	d103      	bne.n	3d6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     3ce:	687b      	ldr	r3, [r7, #4]
     3d0:	689a      	ldr	r2, [r3, #8]
     3d2:	68fb      	ldr	r3, [r7, #12]
     3d4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
     3d6:	687b      	ldr	r3, [r7, #4]
     3d8:	2200      	movs	r2, #0
     3da:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
     3dc:	68fb      	ldr	r3, [r7, #12]
     3de:	681b      	ldr	r3, [r3, #0]
     3e0:	1e5a      	subs	r2, r3, #1
     3e2:	68fb      	ldr	r3, [r7, #12]
     3e4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
     3e6:	68fb      	ldr	r3, [r7, #12]
     3e8:	681b      	ldr	r3, [r3, #0]
}
     3ea:	0018      	movs	r0, r3
     3ec:	46bd      	mov	sp, r7
     3ee:	b004      	add	sp, #16
     3f0:	bd80      	pop	{r7, pc}
	...

000003f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
     3f4:	b580      	push	{r7, lr}
     3f6:	b084      	sub	sp, #16
     3f8:	af00      	add	r7, sp, #0
     3fa:	60f8      	str	r0, [r7, #12]
     3fc:	60b9      	str	r1, [r7, #8]
     3fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
     400:	68fb      	ldr	r3, [r7, #12]
     402:	3b04      	subs	r3, #4
     404:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2280      	movs	r2, #128	; 0x80
     40a:	0452      	lsls	r2, r2, #17
     40c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
     40e:	68fb      	ldr	r3, [r7, #12]
     410:	3b04      	subs	r3, #4
     412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
     414:	68ba      	ldr	r2, [r7, #8]
     416:	68fb      	ldr	r3, [r7, #12]
     418:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
     41a:	68fb      	ldr	r3, [r7, #12]
     41c:	3b04      	subs	r3, #4
     41e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
     420:	4a08      	ldr	r2, [pc, #32]	; (444 <pxPortInitialiseStack+0x50>)
     422:	68fb      	ldr	r3, [r7, #12]
     424:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
     426:	68fb      	ldr	r3, [r7, #12]
     428:	3b14      	subs	r3, #20
     42a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
     42c:	687a      	ldr	r2, [r7, #4]
     42e:	68fb      	ldr	r3, [r7, #12]
     430:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
     432:	68fb      	ldr	r3, [r7, #12]
     434:	3b20      	subs	r3, #32
     436:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
     438:	68fb      	ldr	r3, [r7, #12]
}
     43a:	0018      	movs	r0, r3
     43c:	46bd      	mov	sp, r7
     43e:	b004      	add	sp, #16
     440:	bd80      	pop	{r7, pc}
     442:	46c0      	nop			; (mov r8, r8)
     444:	00000449 	.word	0x00000449

00000448 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
     448:	b580      	push	{r7, lr}
     44a:	b082      	sub	sp, #8
     44c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
     44e:	2300      	movs	r3, #0
     450:	607b      	str	r3, [r7, #4]
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
     452:	b672      	cpsid	i
	while( ulDummy == 0 )
     454:	46c0      	nop			; (mov r8, r8)
     456:	687b      	ldr	r3, [r7, #4]
     458:	2b00      	cmp	r3, #0
     45a:	d0fc      	beq.n	456 <prvTaskExitError+0xe>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
     45c:	46c0      	nop			; (mov r8, r8)
     45e:	46bd      	mov	sp, r7
     460:	b002      	add	sp, #8
     462:	bd80      	pop	{r7, pc}

00000464 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
     464:	b580      	push	{r7, lr}
     466:	af00      	add	r7, sp, #0

	/* This function is no longer used, but retained for backward
	compatibility. */
}
     468:	46c0      	nop			; (mov r8, r8)
     46a:	46bd      	mov	sp, r7
     46c:	bd80      	pop	{r7, pc}
	...

00000470 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
     470:	4a0b      	ldr	r2, [pc, #44]	; (4a0 <pxCurrentTCBConst2>)
     472:	6813      	ldr	r3, [r2, #0]
     474:	6818      	ldr	r0, [r3, #0]
     476:	3020      	adds	r0, #32
     478:	f380 8809 	msr	PSP, r0
     47c:	2002      	movs	r0, #2
     47e:	f380 8814 	msr	CONTROL, r0
     482:	f3bf 8f6f 	isb	sy
     486:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
     488:	46ae      	mov	lr, r5
     48a:	bc08      	pop	{r3}
     48c:	bc04      	pop	{r2}
     48e:	b662      	cpsie	i
     490:	4718      	bx	r3
     492:	46c0      	nop			; (mov r8, r8)
     494:	46c0      	nop			; (mov r8, r8)
     496:	46c0      	nop			; (mov r8, r8)
     498:	46c0      	nop			; (mov r8, r8)
     49a:	46c0      	nop			; (mov r8, r8)
     49c:	46c0      	nop			; (mov r8, r8)
     49e:	46c0      	nop			; (mov r8, r8)

000004a0 <pxCurrentTCBConst2>:
     4a0:	20003808 	.word	0x20003808
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
     4a4:	46c0      	nop			; (mov r8, r8)
     4a6:	46c0      	nop			; (mov r8, r8)

000004a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
     4a8:	b580      	push	{r7, lr}
     4aa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
     4ac:	4b0e      	ldr	r3, [pc, #56]	; (4e8 <xPortStartScheduler+0x40>)
     4ae:	4a0e      	ldr	r2, [pc, #56]	; (4e8 <xPortStartScheduler+0x40>)
     4b0:	6812      	ldr	r2, [r2, #0]
     4b2:	21ff      	movs	r1, #255	; 0xff
     4b4:	0409      	lsls	r1, r1, #16
     4b6:	430a      	orrs	r2, r1
     4b8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
     4ba:	4b0b      	ldr	r3, [pc, #44]	; (4e8 <xPortStartScheduler+0x40>)
     4bc:	4a0a      	ldr	r2, [pc, #40]	; (4e8 <xPortStartScheduler+0x40>)
     4be:	6812      	ldr	r2, [r2, #0]
     4c0:	21ff      	movs	r1, #255	; 0xff
     4c2:	0609      	lsls	r1, r1, #24
     4c4:	430a      	orrs	r2, r1
     4c6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
     4c8:	4b08      	ldr	r3, [pc, #32]	; (4ec <xPortStartScheduler+0x44>)
     4ca:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
     4cc:	4b08      	ldr	r3, [pc, #32]	; (4f0 <xPortStartScheduler+0x48>)
     4ce:	2200      	movs	r2, #0
     4d0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
     4d2:	4b08      	ldr	r3, [pc, #32]	; (4f4 <xPortStartScheduler+0x4c>)
     4d4:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
     4d6:	4b08      	ldr	r3, [pc, #32]	; (4f8 <xPortStartScheduler+0x50>)
     4d8:	4798      	blx	r3
	prvTaskExitError();
     4da:	4b08      	ldr	r3, [pc, #32]	; (4fc <xPortStartScheduler+0x54>)
     4dc:	4798      	blx	r3

	/* Should not get here! */
	return 0;
     4de:	2300      	movs	r3, #0
}
     4e0:	0018      	movs	r0, r3
     4e2:	46bd      	mov	sp, r7
     4e4:	bd80      	pop	{r7, pc}
     4e6:	46c0      	nop			; (mov r8, r8)
     4e8:	e000ed20 	.word	0xe000ed20
     4ec:	00000609 	.word	0x00000609
     4f0:	20000000 	.word	0x20000000
     4f4:	00000471 	.word	0x00000471
     4f8:	00000cbd 	.word	0x00000cbd
     4fc:	00000449 	.word	0x00000449

00000500 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
     500:	b580      	push	{r7, lr}
     502:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
     504:	4b05      	ldr	r3, [pc, #20]	; (51c <vPortYield+0x1c>)
     506:	2280      	movs	r2, #128	; 0x80
     508:	0552      	lsls	r2, r2, #21
     50a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
     50c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     510:	f3bf 8f6f 	isb	sy
}
     514:	46c0      	nop			; (mov r8, r8)
     516:	46bd      	mov	sp, r7
     518:	bd80      	pop	{r7, pc}
     51a:	46c0      	nop			; (mov r8, r8)
     51c:	e000ed04 	.word	0xe000ed04

00000520 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
     524:	b672      	cpsid	i
    uxCriticalNesting++;
     526:	4b06      	ldr	r3, [pc, #24]	; (540 <vPortEnterCritical+0x20>)
     528:	681b      	ldr	r3, [r3, #0]
     52a:	1c5a      	adds	r2, r3, #1
     52c:	4b04      	ldr	r3, [pc, #16]	; (540 <vPortEnterCritical+0x20>)
     52e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
     530:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     534:	f3bf 8f6f 	isb	sy
}
     538:	46c0      	nop			; (mov r8, r8)
     53a:	46bd      	mov	sp, r7
     53c:	bd80      	pop	{r7, pc}
     53e:	46c0      	nop			; (mov r8, r8)
     540:	20000000 	.word	0x20000000

00000544 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
     544:	b580      	push	{r7, lr}
     546:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
     548:	4b06      	ldr	r3, [pc, #24]	; (564 <vPortExitCritical+0x20>)
     54a:	681b      	ldr	r3, [r3, #0]
     54c:	1e5a      	subs	r2, r3, #1
     54e:	4b05      	ldr	r3, [pc, #20]	; (564 <vPortExitCritical+0x20>)
     550:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
     552:	4b04      	ldr	r3, [pc, #16]	; (564 <vPortExitCritical+0x20>)
     554:	681b      	ldr	r3, [r3, #0]
     556:	2b00      	cmp	r3, #0
     558:	d100      	bne.n	55c <vPortExitCritical+0x18>
    {
        portENABLE_INTERRUPTS();
     55a:	b662      	cpsie	i
    }
}
     55c:	46c0      	nop			; (mov r8, r8)
     55e:	46bd      	mov	sp, r7
     560:	bd80      	pop	{r7, pc}
     562:	46c0      	nop			; (mov r8, r8)
     564:	20000000 	.word	0x20000000

00000568 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
     568:	f3ef 8010 	mrs	r0, PRIMASK
     56c:	b672      	cpsid	i
     56e:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
     570:	46c0      	nop			; (mov r8, r8)
     572:	0018      	movs	r0, r3

00000574 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
     574:	f380 8810 	msr	PRIMASK, r0
     578:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
     57a:	46c0      	nop			; (mov r8, r8)
     57c:	0000      	movs	r0, r0
	...

00000580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
     580:	f3ef 8009 	mrs	r0, PSP
     584:	4b0e      	ldr	r3, [pc, #56]	; (5c0 <pxCurrentTCBConst>)
     586:	681a      	ldr	r2, [r3, #0]
     588:	3820      	subs	r0, #32
     58a:	6010      	str	r0, [r2, #0]
     58c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     58e:	4644      	mov	r4, r8
     590:	464d      	mov	r5, r9
     592:	4656      	mov	r6, sl
     594:	465f      	mov	r7, fp
     596:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     598:	b508      	push	{r3, lr}
     59a:	b672      	cpsid	i
     59c:	f000 fb8e 	bl	cbc <vTaskSwitchContext>
     5a0:	b662      	cpsie	i
     5a2:	bc0c      	pop	{r2, r3}
     5a4:	6811      	ldr	r1, [r2, #0]
     5a6:	6808      	ldr	r0, [r1, #0]
     5a8:	3010      	adds	r0, #16
     5aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     5ac:	46a0      	mov	r8, r4
     5ae:	46a9      	mov	r9, r5
     5b0:	46b2      	mov	sl, r6
     5b2:	46bb      	mov	fp, r7
     5b4:	f380 8809 	msr	PSP, r0
     5b8:	3820      	subs	r0, #32
     5ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     5bc:	4718      	bx	r3
     5be:	46c0      	nop			; (mov r8, r8)

000005c0 <pxCurrentTCBConst>:
     5c0:	20003808 	.word	0x20003808
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
     5c4:	46c0      	nop			; (mov r8, r8)
     5c6:	46c0      	nop			; (mov r8, r8)

000005c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
     5c8:	b580      	push	{r7, lr}
     5ca:	b082      	sub	sp, #8
     5cc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
     5ce:	4b0a      	ldr	r3, [pc, #40]	; (5f8 <SysTick_Handler+0x30>)
     5d0:	4798      	blx	r3
     5d2:	0003      	movs	r3, r0
     5d4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
     5d6:	4b09      	ldr	r3, [pc, #36]	; (5fc <SysTick_Handler+0x34>)
     5d8:	4798      	blx	r3
     5da:	1e03      	subs	r3, r0, #0
     5dc:	d003      	beq.n	5e6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
     5de:	4b08      	ldr	r3, [pc, #32]	; (600 <SysTick_Handler+0x38>)
     5e0:	2280      	movs	r2, #128	; 0x80
     5e2:	0552      	lsls	r2, r2, #21
     5e4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
     5e6:	687b      	ldr	r3, [r7, #4]
     5e8:	0018      	movs	r0, r3
     5ea:	4b06      	ldr	r3, [pc, #24]	; (604 <SysTick_Handler+0x3c>)
     5ec:	4798      	blx	r3
}
     5ee:	46c0      	nop			; (mov r8, r8)
     5f0:	46bd      	mov	sp, r7
     5f2:	b002      	add	sp, #8
     5f4:	bd80      	pop	{r7, pc}
     5f6:	46c0      	nop			; (mov r8, r8)
     5f8:	00000569 	.word	0x00000569
     5fc:	00000b61 	.word	0x00000b61
     600:	e000ed04 	.word	0xe000ed04
     604:	00000575 	.word	0x00000575

00000608 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
     608:	b580      	push	{r7, lr}
     60a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
     60c:	4b07      	ldr	r3, [pc, #28]	; (62c <prvSetupTimerInterrupt+0x24>)
     60e:	2200      	movs	r2, #0
     610:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
     612:	4b07      	ldr	r3, [pc, #28]	; (630 <prvSetupTimerInterrupt+0x28>)
     614:	2200      	movs	r2, #0
     616:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
     618:	4b06      	ldr	r3, [pc, #24]	; (634 <prvSetupTimerInterrupt+0x2c>)
     61a:	4a07      	ldr	r2, [pc, #28]	; (638 <prvSetupTimerInterrupt+0x30>)
     61c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
     61e:	4b03      	ldr	r3, [pc, #12]	; (62c <prvSetupTimerInterrupt+0x24>)
     620:	2207      	movs	r2, #7
     622:	601a      	str	r2, [r3, #0]
}
     624:	46c0      	nop			; (mov r8, r8)
     626:	46bd      	mov	sp, r7
     628:	bd80      	pop	{r7, pc}
     62a:	46c0      	nop			; (mov r8, r8)
     62c:	e000e010 	.word	0xe000e010
     630:	e000e018 	.word	0xe000e018
     634:	e000e014 	.word	0xe000e014
     638:	0000bb32 	.word	0x0000bb32

0000063c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     63c:	b580      	push	{r7, lr}
     63e:	b084      	sub	sp, #16
     640:	af00      	add	r7, sp, #0
     642:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
     644:	2300      	movs	r3, #0
     646:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
     648:	687b      	ldr	r3, [r7, #4]
     64a:	2207      	movs	r2, #7
     64c:	4013      	ands	r3, r2
     64e:	d004      	beq.n	65a <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
     650:	687b      	ldr	r3, [r7, #4]
     652:	2207      	movs	r2, #7
     654:	4393      	bics	r3, r2
     656:	3308      	adds	r3, #8
     658:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
     65a:	4b17      	ldr	r3, [pc, #92]	; (6b8 <pvPortMalloc+0x7c>)
     65c:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
     65e:	4b17      	ldr	r3, [pc, #92]	; (6bc <pvPortMalloc+0x80>)
     660:	681b      	ldr	r3, [r3, #0]
     662:	2b00      	cmp	r3, #0
     664:	d105      	bne.n	672 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     666:	4b16      	ldr	r3, [pc, #88]	; (6c0 <pvPortMalloc+0x84>)
     668:	2207      	movs	r2, #7
     66a:	4393      	bics	r3, r2
     66c:	001a      	movs	r2, r3
     66e:	4b13      	ldr	r3, [pc, #76]	; (6bc <pvPortMalloc+0x80>)
     670:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     672:	4b14      	ldr	r3, [pc, #80]	; (6c4 <pvPortMalloc+0x88>)
     674:	681a      	ldr	r2, [r3, #0]
     676:	687b      	ldr	r3, [r7, #4]
     678:	18d3      	adds	r3, r2, r3
     67a:	4a13      	ldr	r2, [pc, #76]	; (6c8 <pvPortMalloc+0x8c>)
     67c:	4293      	cmp	r3, r2
     67e:	d813      	bhi.n	6a8 <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
     680:	4b10      	ldr	r3, [pc, #64]	; (6c4 <pvPortMalloc+0x88>)
     682:	681a      	ldr	r2, [r3, #0]
     684:	687b      	ldr	r3, [r7, #4]
     686:	18d2      	adds	r2, r2, r3
     688:	4b0e      	ldr	r3, [pc, #56]	; (6c4 <pvPortMalloc+0x88>)
     68a:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     68c:	429a      	cmp	r2, r3
     68e:	d90b      	bls.n	6a8 <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     690:	4b0a      	ldr	r3, [pc, #40]	; (6bc <pvPortMalloc+0x80>)
     692:	681a      	ldr	r2, [r3, #0]
     694:	4b0b      	ldr	r3, [pc, #44]	; (6c4 <pvPortMalloc+0x88>)
     696:	681b      	ldr	r3, [r3, #0]
     698:	18d3      	adds	r3, r2, r3
     69a:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
     69c:	4b09      	ldr	r3, [pc, #36]	; (6c4 <pvPortMalloc+0x88>)
     69e:	681a      	ldr	r2, [r3, #0]
     6a0:	687b      	ldr	r3, [r7, #4]
     6a2:	18d2      	adds	r2, r2, r3
     6a4:	4b07      	ldr	r3, [pc, #28]	; (6c4 <pvPortMalloc+0x88>)
     6a6:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     6a8:	4b08      	ldr	r3, [pc, #32]	; (6cc <pvPortMalloc+0x90>)
     6aa:	4798      	blx	r3
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
     6ac:	68fb      	ldr	r3, [r7, #12]
}
     6ae:	0018      	movs	r0, r3
     6b0:	46bd      	mov	sp, r7
     6b2:	b004      	add	sp, #16
     6b4:	bd80      	pop	{r7, pc}
     6b6:	46c0      	nop			; (mov r8, r8)
     6b8:	00000a05 	.word	0x00000a05
     6bc:	20003804 	.word	0x20003804
     6c0:	20000090 	.word	0x20000090
     6c4:	20003800 	.word	0x20003800
     6c8:	0000376f 	.word	0x0000376f
     6cc:	00000a1d 	.word	0x00000a1d

000006d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     6d0:	b580      	push	{r7, lr}
     6d2:	b082      	sub	sp, #8
     6d4:	af00      	add	r7, sp, #0
     6d6:	6078      	str	r0, [r7, #4]
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
     6d8:	46c0      	nop			; (mov r8, r8)
     6da:	46bd      	mov	sp, r7
     6dc:	b002      	add	sp, #8
     6de:	bd80      	pop	{r7, pc}

000006e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
     6e0:	b590      	push	{r4, r7, lr}
     6e2:	b08d      	sub	sp, #52	; 0x34
     6e4:	af04      	add	r7, sp, #16
     6e6:	60f8      	str	r0, [r7, #12]
     6e8:	60b9      	str	r1, [r7, #8]
     6ea:	603b      	str	r3, [r7, #0]
     6ec:	1dbb      	adds	r3, r7, #6
     6ee:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
     6f0:	1dbb      	adds	r3, r7, #6
     6f2:	881b      	ldrh	r3, [r3, #0]
     6f4:	009b      	lsls	r3, r3, #2
     6f6:	0018      	movs	r0, r3
     6f8:	4b1d      	ldr	r3, [pc, #116]	; (770 <xTaskCreate+0x90>)
     6fa:	4798      	blx	r3
     6fc:	0003      	movs	r3, r0
     6fe:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
     700:	697b      	ldr	r3, [r7, #20]
     702:	2b00      	cmp	r3, #0
     704:	d010      	beq.n	728 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
     706:	204c      	movs	r0, #76	; 0x4c
     708:	4b19      	ldr	r3, [pc, #100]	; (770 <xTaskCreate+0x90>)
     70a:	4798      	blx	r3
     70c:	0003      	movs	r3, r0
     70e:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
     710:	69fb      	ldr	r3, [r7, #28]
     712:	2b00      	cmp	r3, #0
     714:	d003      	beq.n	71e <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
     716:	69fb      	ldr	r3, [r7, #28]
     718:	697a      	ldr	r2, [r7, #20]
     71a:	631a      	str	r2, [r3, #48]	; 0x30
     71c:	e006      	b.n	72c <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
     71e:	697b      	ldr	r3, [r7, #20]
     720:	0018      	movs	r0, r3
     722:	4b14      	ldr	r3, [pc, #80]	; (774 <xTaskCreate+0x94>)
     724:	4798      	blx	r3
     726:	e001      	b.n	72c <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
     728:	2300      	movs	r3, #0
     72a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
     72c:	69fb      	ldr	r3, [r7, #28]
     72e:	2b00      	cmp	r3, #0
     730:	d016      	beq.n	760 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
     732:	1dbb      	adds	r3, r7, #6
     734:	881a      	ldrh	r2, [r3, #0]
     736:	683c      	ldr	r4, [r7, #0]
     738:	68b9      	ldr	r1, [r7, #8]
     73a:	68f8      	ldr	r0, [r7, #12]
     73c:	2300      	movs	r3, #0
     73e:	9303      	str	r3, [sp, #12]
     740:	69fb      	ldr	r3, [r7, #28]
     742:	9302      	str	r3, [sp, #8]
     744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     746:	9301      	str	r3, [sp, #4]
     748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     74a:	9300      	str	r3, [sp, #0]
     74c:	0023      	movs	r3, r4
     74e:	4c0a      	ldr	r4, [pc, #40]	; (778 <xTaskCreate+0x98>)
     750:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
     752:	69fb      	ldr	r3, [r7, #28]
     754:	0018      	movs	r0, r3
     756:	4b09      	ldr	r3, [pc, #36]	; (77c <xTaskCreate+0x9c>)
     758:	4798      	blx	r3
			xReturn = pdPASS;
     75a:	2301      	movs	r3, #1
     75c:	61bb      	str	r3, [r7, #24]
     75e:	e002      	b.n	766 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     760:	2301      	movs	r3, #1
     762:	425b      	negs	r3, r3
     764:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
     766:	69bb      	ldr	r3, [r7, #24]
	}
     768:	0018      	movs	r0, r3
     76a:	46bd      	mov	sp, r7
     76c:	b009      	add	sp, #36	; 0x24
     76e:	bd90      	pop	{r4, r7, pc}
     770:	0000063d 	.word	0x0000063d
     774:	000006d1 	.word	0x000006d1
     778:	00000781 	.word	0x00000781
     77c:	00000875 	.word	0x00000875

00000780 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
     780:	b580      	push	{r7, lr}
     782:	b086      	sub	sp, #24
     784:	af00      	add	r7, sp, #0
     786:	60f8      	str	r0, [r7, #12]
     788:	60b9      	str	r1, [r7, #8]
     78a:	607a      	str	r2, [r7, #4]
     78c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
     78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
     790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
     792:	687b      	ldr	r3, [r7, #4]
     794:	4934      	ldr	r1, [pc, #208]	; (868 <prvInitialiseNewTask+0xe8>)
     796:	468c      	mov	ip, r1
     798:	4463      	add	r3, ip
     79a:	009b      	lsls	r3, r3, #2
     79c:	18d3      	adds	r3, r2, r3
     79e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
     7a0:	693b      	ldr	r3, [r7, #16]
     7a2:	2207      	movs	r2, #7
     7a4:	4393      	bics	r3, r2
     7a6:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
     7a8:	68bb      	ldr	r3, [r7, #8]
     7aa:	2b00      	cmp	r3, #0
     7ac:	d020      	beq.n	7f0 <prvInitialiseNewTask+0x70>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
     7ae:	2300      	movs	r3, #0
     7b0:	617b      	str	r3, [r7, #20]
     7b2:	e013      	b.n	7dc <prvInitialiseNewTask+0x5c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
     7b4:	68ba      	ldr	r2, [r7, #8]
     7b6:	697b      	ldr	r3, [r7, #20]
     7b8:	18d3      	adds	r3, r2, r3
     7ba:	7818      	ldrb	r0, [r3, #0]
     7bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
     7be:	2134      	movs	r1, #52	; 0x34
     7c0:	697b      	ldr	r3, [r7, #20]
     7c2:	18d3      	adds	r3, r2, r3
     7c4:	185b      	adds	r3, r3, r1
     7c6:	1c02      	adds	r2, r0, #0
     7c8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
     7ca:	68ba      	ldr	r2, [r7, #8]
     7cc:	697b      	ldr	r3, [r7, #20]
     7ce:	18d3      	adds	r3, r2, r3
     7d0:	781b      	ldrb	r3, [r3, #0]
     7d2:	2b00      	cmp	r3, #0
     7d4:	d006      	beq.n	7e4 <prvInitialiseNewTask+0x64>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
     7d6:	697b      	ldr	r3, [r7, #20]
     7d8:	3301      	adds	r3, #1
     7da:	617b      	str	r3, [r7, #20]
     7dc:	697b      	ldr	r3, [r7, #20]
     7de:	2b0f      	cmp	r3, #15
     7e0:	d9e8      	bls.n	7b4 <prvInitialiseNewTask+0x34>
     7e2:	e000      	b.n	7e6 <prvInitialiseNewTask+0x66>
			{
				break;
     7e4:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
     7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
     7e8:	2243      	movs	r2, #67	; 0x43
     7ea:	2100      	movs	r1, #0
     7ec:	5499      	strb	r1, [r3, r2]
     7ee:	e003      	b.n	7f8 <prvInitialiseNewTask+0x78>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
     7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
     7f2:	2234      	movs	r2, #52	; 0x34
     7f4:	2100      	movs	r1, #0
     7f6:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
     7f8:	6a3b      	ldr	r3, [r7, #32]
     7fa:	2b04      	cmp	r3, #4
     7fc:	d901      	bls.n	802 <prvInitialiseNewTask+0x82>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
     7fe:	2304      	movs	r3, #4
     800:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
     802:	6abb      	ldr	r3, [r7, #40]	; 0x28
     804:	6a3a      	ldr	r2, [r7, #32]
     806:	62da      	str	r2, [r3, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
     808:	6abb      	ldr	r3, [r7, #40]	; 0x28
     80a:	3304      	adds	r3, #4
     80c:	0018      	movs	r0, r3
     80e:	4b17      	ldr	r3, [pc, #92]	; (86c <prvInitialiseNewTask+0xec>)
     810:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
     812:	6abb      	ldr	r3, [r7, #40]	; 0x28
     814:	3318      	adds	r3, #24
     816:	0018      	movs	r0, r3
     818:	4b14      	ldr	r3, [pc, #80]	; (86c <prvInitialiseNewTask+0xec>)
     81a:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
     81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
     81e:	6aba      	ldr	r2, [r7, #40]	; 0x28
     820:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     822:	6a3b      	ldr	r3, [r7, #32]
     824:	2205      	movs	r2, #5
     826:	1ad2      	subs	r2, r2, r3
     828:	6abb      	ldr	r3, [r7, #40]	; 0x28
     82a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
     82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
     82e:	6aba      	ldr	r2, [r7, #40]	; 0x28
     830:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
     832:	6abb      	ldr	r3, [r7, #40]	; 0x28
     834:	2200      	movs	r2, #0
     836:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
     838:	6abb      	ldr	r3, [r7, #40]	; 0x28
     83a:	2248      	movs	r2, #72	; 0x48
     83c:	2100      	movs	r1, #0
     83e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
     840:	683a      	ldr	r2, [r7, #0]
     842:	68f9      	ldr	r1, [r7, #12]
     844:	693b      	ldr	r3, [r7, #16]
     846:	0018      	movs	r0, r3
     848:	4b09      	ldr	r3, [pc, #36]	; (870 <prvInitialiseNewTask+0xf0>)
     84a:	4798      	blx	r3
     84c:	0002      	movs	r2, r0
     84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
     850:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
     852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     854:	2b00      	cmp	r3, #0
     856:	d002      	beq.n	85e <prvInitialiseNewTask+0xde>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
     858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     85a:	6aba      	ldr	r2, [r7, #40]	; 0x28
     85c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
     85e:	46c0      	nop			; (mov r8, r8)
     860:	46bd      	mov	sp, r7
     862:	b006      	add	sp, #24
     864:	bd80      	pop	{r7, pc}
     866:	46c0      	nop			; (mov r8, r8)
     868:	3fffffff 	.word	0x3fffffff
     86c:	000002dd 	.word	0x000002dd
     870:	000003f5 	.word	0x000003f5

00000874 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
     874:	b580      	push	{r7, lr}
     876:	b082      	sub	sp, #8
     878:	af00      	add	r7, sp, #0
     87a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
     87c:	4b29      	ldr	r3, [pc, #164]	; (924 <prvAddNewTaskToReadyList+0xb0>)
     87e:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
     880:	4b29      	ldr	r3, [pc, #164]	; (928 <prvAddNewTaskToReadyList+0xb4>)
     882:	681b      	ldr	r3, [r3, #0]
     884:	1c5a      	adds	r2, r3, #1
     886:	4b28      	ldr	r3, [pc, #160]	; (928 <prvAddNewTaskToReadyList+0xb4>)
     888:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
     88a:	4b28      	ldr	r3, [pc, #160]	; (92c <prvAddNewTaskToReadyList+0xb8>)
     88c:	681b      	ldr	r3, [r3, #0]
     88e:	2b00      	cmp	r3, #0
     890:	d109      	bne.n	8a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
     892:	4b26      	ldr	r3, [pc, #152]	; (92c <prvAddNewTaskToReadyList+0xb8>)
     894:	687a      	ldr	r2, [r7, #4]
     896:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
     898:	4b23      	ldr	r3, [pc, #140]	; (928 <prvAddNewTaskToReadyList+0xb4>)
     89a:	681b      	ldr	r3, [r3, #0]
     89c:	2b01      	cmp	r3, #1
     89e:	d110      	bne.n	8c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
     8a0:	4b23      	ldr	r3, [pc, #140]	; (930 <prvAddNewTaskToReadyList+0xbc>)
     8a2:	4798      	blx	r3
     8a4:	e00d      	b.n	8c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
     8a6:	4b23      	ldr	r3, [pc, #140]	; (934 <prvAddNewTaskToReadyList+0xc0>)
     8a8:	681b      	ldr	r3, [r3, #0]
     8aa:	2b00      	cmp	r3, #0
     8ac:	d109      	bne.n	8c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
     8ae:	4b1f      	ldr	r3, [pc, #124]	; (92c <prvAddNewTaskToReadyList+0xb8>)
     8b0:	681b      	ldr	r3, [r3, #0]
     8b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     8b4:	687b      	ldr	r3, [r7, #4]
     8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     8b8:	429a      	cmp	r2, r3
     8ba:	d802      	bhi.n	8c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
     8bc:	4b1b      	ldr	r3, [pc, #108]	; (92c <prvAddNewTaskToReadyList+0xb8>)
     8be:	687a      	ldr	r2, [r7, #4]
     8c0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
     8c2:	4b1d      	ldr	r3, [pc, #116]	; (938 <prvAddNewTaskToReadyList+0xc4>)
     8c4:	681b      	ldr	r3, [r3, #0]
     8c6:	1c5a      	adds	r2, r3, #1
     8c8:	4b1b      	ldr	r3, [pc, #108]	; (938 <prvAddNewTaskToReadyList+0xc4>)
     8ca:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
     8cc:	687b      	ldr	r3, [r7, #4]
     8ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     8d0:	4b1a      	ldr	r3, [pc, #104]	; (93c <prvAddNewTaskToReadyList+0xc8>)
     8d2:	681b      	ldr	r3, [r3, #0]
     8d4:	429a      	cmp	r2, r3
     8d6:	d903      	bls.n	8e0 <prvAddNewTaskToReadyList+0x6c>
     8d8:	687b      	ldr	r3, [r7, #4]
     8da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     8dc:	4b17      	ldr	r3, [pc, #92]	; (93c <prvAddNewTaskToReadyList+0xc8>)
     8de:	601a      	str	r2, [r3, #0]
     8e0:	687b      	ldr	r3, [r7, #4]
     8e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     8e4:	0013      	movs	r3, r2
     8e6:	009b      	lsls	r3, r3, #2
     8e8:	189b      	adds	r3, r3, r2
     8ea:	009b      	lsls	r3, r3, #2
     8ec:	4a14      	ldr	r2, [pc, #80]	; (940 <prvAddNewTaskToReadyList+0xcc>)
     8ee:	189a      	adds	r2, r3, r2
     8f0:	687b      	ldr	r3, [r7, #4]
     8f2:	3304      	adds	r3, #4
     8f4:	0019      	movs	r1, r3
     8f6:	0010      	movs	r0, r2
     8f8:	4b12      	ldr	r3, [pc, #72]	; (944 <prvAddNewTaskToReadyList+0xd0>)
     8fa:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
     8fc:	4b12      	ldr	r3, [pc, #72]	; (948 <prvAddNewTaskToReadyList+0xd4>)
     8fe:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
     900:	4b0c      	ldr	r3, [pc, #48]	; (934 <prvAddNewTaskToReadyList+0xc0>)
     902:	681b      	ldr	r3, [r3, #0]
     904:	2b00      	cmp	r3, #0
     906:	d008      	beq.n	91a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
     908:	4b08      	ldr	r3, [pc, #32]	; (92c <prvAddNewTaskToReadyList+0xb8>)
     90a:	681b      	ldr	r3, [r3, #0]
     90c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     90e:	687b      	ldr	r3, [r7, #4]
     910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     912:	429a      	cmp	r2, r3
     914:	d201      	bcs.n	91a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
     916:	4b0d      	ldr	r3, [pc, #52]	; (94c <prvAddNewTaskToReadyList+0xd8>)
     918:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
     91a:	46c0      	nop			; (mov r8, r8)
     91c:	46bd      	mov	sp, r7
     91e:	b002      	add	sp, #8
     920:	bd80      	pop	{r7, pc}
     922:	46c0      	nop			; (mov r8, r8)
     924:	00000521 	.word	0x00000521
     928:	200038c8 	.word	0x200038c8
     92c:	20003808 	.word	0x20003808
     930:	00000d85 	.word	0x00000d85
     934:	200038d4 	.word	0x200038d4
     938:	200038e4 	.word	0x200038e4
     93c:	200038d0 	.word	0x200038d0
     940:	2000380c 	.word	0x2000380c
     944:	000002f3 	.word	0x000002f3
     948:	00000545 	.word	0x00000545
     94c:	00000501 	.word	0x00000501

00000950 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
     950:	b580      	push	{r7, lr}
     952:	b084      	sub	sp, #16
     954:	af00      	add	r7, sp, #0
     956:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
     958:	2300      	movs	r3, #0
     95a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
     95c:	687b      	ldr	r3, [r7, #4]
     95e:	2b00      	cmp	r3, #0
     960:	d00a      	beq.n	978 <vTaskDelay+0x28>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
     962:	4b0a      	ldr	r3, [pc, #40]	; (98c <vTaskDelay+0x3c>)
     964:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
     966:	687b      	ldr	r3, [r7, #4]
     968:	2100      	movs	r1, #0
     96a:	0018      	movs	r0, r3
     96c:	4b08      	ldr	r3, [pc, #32]	; (990 <vTaskDelay+0x40>)
     96e:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
     970:	4b08      	ldr	r3, [pc, #32]	; (994 <vTaskDelay+0x44>)
     972:	4798      	blx	r3
     974:	0003      	movs	r3, r0
     976:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
     978:	68fb      	ldr	r3, [r7, #12]
     97a:	2b00      	cmp	r3, #0
     97c:	d101      	bne.n	982 <vTaskDelay+0x32>
		{
			portYIELD_WITHIN_API();
     97e:	4b06      	ldr	r3, [pc, #24]	; (998 <vTaskDelay+0x48>)
     980:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
     982:	46c0      	nop			; (mov r8, r8)
     984:	46bd      	mov	sp, r7
     986:	b004      	add	sp, #16
     988:	bd80      	pop	{r7, pc}
     98a:	46c0      	nop			; (mov r8, r8)
     98c:	00000a05 	.word	0x00000a05
     990:	00000e4d 	.word	0x00000e4d
     994:	00000a1d 	.word	0x00000a1d
     998:	00000501 	.word	0x00000501

0000099c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
     99c:	b590      	push	{r4, r7, lr}
     99e:	b085      	sub	sp, #20
     9a0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
     9a2:	4910      	ldr	r1, [pc, #64]	; (9e4 <vTaskStartScheduler+0x48>)
     9a4:	4810      	ldr	r0, [pc, #64]	; (9e8 <vTaskStartScheduler+0x4c>)
     9a6:	4b11      	ldr	r3, [pc, #68]	; (9ec <vTaskStartScheduler+0x50>)
     9a8:	9301      	str	r3, [sp, #4]
     9aa:	2300      	movs	r3, #0
     9ac:	9300      	str	r3, [sp, #0]
     9ae:	2300      	movs	r3, #0
     9b0:	2264      	movs	r2, #100	; 0x64
     9b2:	4c0f      	ldr	r4, [pc, #60]	; (9f0 <vTaskStartScheduler+0x54>)
     9b4:	47a0      	blx	r4
     9b6:	0003      	movs	r3, r0
     9b8:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
     9ba:	687b      	ldr	r3, [r7, #4]
     9bc:	2b01      	cmp	r3, #1
     9be:	d10c      	bne.n	9da <vTaskStartScheduler+0x3e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
     9c0:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
     9c2:	4b0c      	ldr	r3, [pc, #48]	; (9f4 <vTaskStartScheduler+0x58>)
     9c4:	2201      	movs	r2, #1
     9c6:	4252      	negs	r2, r2
     9c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
     9ca:	4b0b      	ldr	r3, [pc, #44]	; (9f8 <vTaskStartScheduler+0x5c>)
     9cc:	2201      	movs	r2, #1
     9ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
     9d0:	4b0a      	ldr	r3, [pc, #40]	; (9fc <vTaskStartScheduler+0x60>)
     9d2:	2200      	movs	r2, #0
     9d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
     9d6:	4b0a      	ldr	r3, [pc, #40]	; (a00 <vTaskStartScheduler+0x64>)
     9d8:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
     9da:	46c0      	nop			; (mov r8, r8)
     9dc:	46bd      	mov	sp, r7
     9de:	b003      	add	sp, #12
     9e0:	bd90      	pop	{r4, r7, pc}
     9e2:	46c0      	nop			; (mov r8, r8)
     9e4:	00004364 	.word	0x00004364
     9e8:	00000d55 	.word	0x00000d55
     9ec:	200038ec 	.word	0x200038ec
     9f0:	000006e1 	.word	0x000006e1
     9f4:	200038e8 	.word	0x200038e8
     9f8:	200038d4 	.word	0x200038d4
     9fc:	200038cc 	.word	0x200038cc
     a00:	000004a9 	.word	0x000004a9

00000a04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
     a04:	b580      	push	{r7, lr}
     a06:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
     a08:	4b03      	ldr	r3, [pc, #12]	; (a18 <vTaskSuspendAll+0x14>)
     a0a:	681b      	ldr	r3, [r3, #0]
     a0c:	1c5a      	adds	r2, r3, #1
     a0e:	4b02      	ldr	r3, [pc, #8]	; (a18 <vTaskSuspendAll+0x14>)
     a10:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
     a12:	46c0      	nop			; (mov r8, r8)
     a14:	46bd      	mov	sp, r7
     a16:	bd80      	pop	{r7, pc}
     a18:	200038f0 	.word	0x200038f0

00000a1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
     a1c:	b580      	push	{r7, lr}
     a1e:	b084      	sub	sp, #16
     a20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
     a22:	2300      	movs	r3, #0
     a24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
     a26:	2300      	movs	r3, #0
     a28:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
     a2a:	4b37      	ldr	r3, [pc, #220]	; (b08 <xTaskResumeAll+0xec>)
     a2c:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
     a2e:	4b37      	ldr	r3, [pc, #220]	; (b0c <xTaskResumeAll+0xf0>)
     a30:	681b      	ldr	r3, [r3, #0]
     a32:	1e5a      	subs	r2, r3, #1
     a34:	4b35      	ldr	r3, [pc, #212]	; (b0c <xTaskResumeAll+0xf0>)
     a36:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     a38:	4b34      	ldr	r3, [pc, #208]	; (b0c <xTaskResumeAll+0xf0>)
     a3a:	681b      	ldr	r3, [r3, #0]
     a3c:	2b00      	cmp	r3, #0
     a3e:	d15b      	bne.n	af8 <xTaskResumeAll+0xdc>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
     a40:	4b33      	ldr	r3, [pc, #204]	; (b10 <xTaskResumeAll+0xf4>)
     a42:	681b      	ldr	r3, [r3, #0]
     a44:	2b00      	cmp	r3, #0
     a46:	d057      	beq.n	af8 <xTaskResumeAll+0xdc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
     a48:	e02f      	b.n	aaa <xTaskResumeAll+0x8e>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     a4a:	4b32      	ldr	r3, [pc, #200]	; (b14 <xTaskResumeAll+0xf8>)
     a4c:	68db      	ldr	r3, [r3, #12]
     a4e:	68db      	ldr	r3, [r3, #12]
     a50:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
     a52:	68fb      	ldr	r3, [r7, #12]
     a54:	3318      	adds	r3, #24
     a56:	0018      	movs	r0, r3
     a58:	4b2f      	ldr	r3, [pc, #188]	; (b18 <xTaskResumeAll+0xfc>)
     a5a:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     a5c:	68fb      	ldr	r3, [r7, #12]
     a5e:	3304      	adds	r3, #4
     a60:	0018      	movs	r0, r3
     a62:	4b2d      	ldr	r3, [pc, #180]	; (b18 <xTaskResumeAll+0xfc>)
     a64:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
     a66:	68fb      	ldr	r3, [r7, #12]
     a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     a6a:	4b2c      	ldr	r3, [pc, #176]	; (b1c <xTaskResumeAll+0x100>)
     a6c:	681b      	ldr	r3, [r3, #0]
     a6e:	429a      	cmp	r2, r3
     a70:	d903      	bls.n	a7a <xTaskResumeAll+0x5e>
     a72:	68fb      	ldr	r3, [r7, #12]
     a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     a76:	4b29      	ldr	r3, [pc, #164]	; (b1c <xTaskResumeAll+0x100>)
     a78:	601a      	str	r2, [r3, #0]
     a7a:	68fb      	ldr	r3, [r7, #12]
     a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     a7e:	0013      	movs	r3, r2
     a80:	009b      	lsls	r3, r3, #2
     a82:	189b      	adds	r3, r3, r2
     a84:	009b      	lsls	r3, r3, #2
     a86:	4a26      	ldr	r2, [pc, #152]	; (b20 <xTaskResumeAll+0x104>)
     a88:	189a      	adds	r2, r3, r2
     a8a:	68fb      	ldr	r3, [r7, #12]
     a8c:	3304      	adds	r3, #4
     a8e:	0019      	movs	r1, r3
     a90:	0010      	movs	r0, r2
     a92:	4b24      	ldr	r3, [pc, #144]	; (b24 <xTaskResumeAll+0x108>)
     a94:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     a96:	68fb      	ldr	r3, [r7, #12]
     a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     a9a:	4b23      	ldr	r3, [pc, #140]	; (b28 <xTaskResumeAll+0x10c>)
     a9c:	681b      	ldr	r3, [r3, #0]
     a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     aa0:	429a      	cmp	r2, r3
     aa2:	d302      	bcc.n	aaa <xTaskResumeAll+0x8e>
					{
						xYieldPending = pdTRUE;
     aa4:	4b21      	ldr	r3, [pc, #132]	; (b2c <xTaskResumeAll+0x110>)
     aa6:	2201      	movs	r2, #1
     aa8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
     aaa:	4b1a      	ldr	r3, [pc, #104]	; (b14 <xTaskResumeAll+0xf8>)
     aac:	681b      	ldr	r3, [r3, #0]
     aae:	2b00      	cmp	r3, #0
     ab0:	d1cb      	bne.n	a4a <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
     ab2:	68fb      	ldr	r3, [r7, #12]
     ab4:	2b00      	cmp	r3, #0
     ab6:	d001      	beq.n	abc <xTaskResumeAll+0xa0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
     ab8:	4b1d      	ldr	r3, [pc, #116]	; (b30 <xTaskResumeAll+0x114>)
     aba:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
     abc:	4b1d      	ldr	r3, [pc, #116]	; (b34 <xTaskResumeAll+0x118>)
     abe:	681b      	ldr	r3, [r3, #0]
     ac0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
     ac2:	687b      	ldr	r3, [r7, #4]
     ac4:	2b00      	cmp	r3, #0
     ac6:	d00f      	beq.n	ae8 <xTaskResumeAll+0xcc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
     ac8:	4b1b      	ldr	r3, [pc, #108]	; (b38 <xTaskResumeAll+0x11c>)
     aca:	4798      	blx	r3
     acc:	1e03      	subs	r3, r0, #0
     ace:	d002      	beq.n	ad6 <xTaskResumeAll+0xba>
							{
								xYieldPending = pdTRUE;
     ad0:	4b16      	ldr	r3, [pc, #88]	; (b2c <xTaskResumeAll+0x110>)
     ad2:	2201      	movs	r2, #1
     ad4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	3b01      	subs	r3, #1
     ada:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
     adc:	687b      	ldr	r3, [r7, #4]
     ade:	2b00      	cmp	r3, #0
     ae0:	d1f2      	bne.n	ac8 <xTaskResumeAll+0xac>

						uxPendedTicks = 0;
     ae2:	4b14      	ldr	r3, [pc, #80]	; (b34 <xTaskResumeAll+0x118>)
     ae4:	2200      	movs	r2, #0
     ae6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
     ae8:	4b10      	ldr	r3, [pc, #64]	; (b2c <xTaskResumeAll+0x110>)
     aea:	681b      	ldr	r3, [r3, #0]
     aec:	2b00      	cmp	r3, #0
     aee:	d003      	beq.n	af8 <xTaskResumeAll+0xdc>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
     af0:	2301      	movs	r3, #1
     af2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
     af4:	4b11      	ldr	r3, [pc, #68]	; (b3c <xTaskResumeAll+0x120>)
     af6:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
     af8:	4b11      	ldr	r3, [pc, #68]	; (b40 <xTaskResumeAll+0x124>)
     afa:	4798      	blx	r3

	return xAlreadyYielded;
     afc:	68bb      	ldr	r3, [r7, #8]
}
     afe:	0018      	movs	r0, r3
     b00:	46bd      	mov	sp, r7
     b02:	b004      	add	sp, #16
     b04:	bd80      	pop	{r7, pc}
     b06:	46c0      	nop			; (mov r8, r8)
     b08:	00000521 	.word	0x00000521
     b0c:	200038f0 	.word	0x200038f0
     b10:	200038c8 	.word	0x200038c8
     b14:	200038a0 	.word	0x200038a0
     b18:	000003a3 	.word	0x000003a3
     b1c:	200038d0 	.word	0x200038d0
     b20:	2000380c 	.word	0x2000380c
     b24:	000002f3 	.word	0x000002f3
     b28:	20003808 	.word	0x20003808
     b2c:	200038dc 	.word	0x200038dc
     b30:	00000e11 	.word	0x00000e11
     b34:	200038d8 	.word	0x200038d8
     b38:	00000b61 	.word	0x00000b61
     b3c:	00000501 	.word	0x00000501
     b40:	00000545 	.word	0x00000545

00000b44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
     b44:	b580      	push	{r7, lr}
     b46:	b082      	sub	sp, #8
     b48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
     b4a:	4b04      	ldr	r3, [pc, #16]	; (b5c <xTaskGetTickCount+0x18>)
     b4c:	681b      	ldr	r3, [r3, #0]
     b4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
     b50:	687b      	ldr	r3, [r7, #4]
}
     b52:	0018      	movs	r0, r3
     b54:	46bd      	mov	sp, r7
     b56:	b002      	add	sp, #8
     b58:	bd80      	pop	{r7, pc}
     b5a:	46c0      	nop			; (mov r8, r8)
     b5c:	200038cc 	.word	0x200038cc

00000b60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
     b60:	b580      	push	{r7, lr}
     b62:	b086      	sub	sp, #24
     b64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
     b66:	2300      	movs	r3, #0
     b68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     b6a:	4b46      	ldr	r3, [pc, #280]	; (c84 <xTaskIncrementTick+0x124>)
     b6c:	681b      	ldr	r3, [r3, #0]
     b6e:	2b00      	cmp	r3, #0
     b70:	d000      	beq.n	b74 <xTaskIncrementTick+0x14>
     b72:	e077      	b.n	c64 <xTaskIncrementTick+0x104>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
     b74:	4b44      	ldr	r3, [pc, #272]	; (c88 <xTaskIncrementTick+0x128>)
     b76:	681b      	ldr	r3, [r3, #0]
     b78:	3301      	adds	r3, #1
     b7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
     b7c:	4b42      	ldr	r3, [pc, #264]	; (c88 <xTaskIncrementTick+0x128>)
     b7e:	693a      	ldr	r2, [r7, #16]
     b80:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
     b82:	693b      	ldr	r3, [r7, #16]
     b84:	2b00      	cmp	r3, #0
     b86:	d110      	bne.n	baa <xTaskIncrementTick+0x4a>
		{
			taskSWITCH_DELAYED_LISTS();
     b88:	4b40      	ldr	r3, [pc, #256]	; (c8c <xTaskIncrementTick+0x12c>)
     b8a:	681b      	ldr	r3, [r3, #0]
     b8c:	60fb      	str	r3, [r7, #12]
     b8e:	4b40      	ldr	r3, [pc, #256]	; (c90 <xTaskIncrementTick+0x130>)
     b90:	681a      	ldr	r2, [r3, #0]
     b92:	4b3e      	ldr	r3, [pc, #248]	; (c8c <xTaskIncrementTick+0x12c>)
     b94:	601a      	str	r2, [r3, #0]
     b96:	4b3e      	ldr	r3, [pc, #248]	; (c90 <xTaskIncrementTick+0x130>)
     b98:	68fa      	ldr	r2, [r7, #12]
     b9a:	601a      	str	r2, [r3, #0]
     b9c:	4b3d      	ldr	r3, [pc, #244]	; (c94 <xTaskIncrementTick+0x134>)
     b9e:	681b      	ldr	r3, [r3, #0]
     ba0:	1c5a      	adds	r2, r3, #1
     ba2:	4b3c      	ldr	r3, [pc, #240]	; (c94 <xTaskIncrementTick+0x134>)
     ba4:	601a      	str	r2, [r3, #0]
     ba6:	4b3c      	ldr	r3, [pc, #240]	; (c98 <xTaskIncrementTick+0x138>)
     ba8:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
     baa:	4b3c      	ldr	r3, [pc, #240]	; (c9c <xTaskIncrementTick+0x13c>)
     bac:	681b      	ldr	r3, [r3, #0]
     bae:	693a      	ldr	r2, [r7, #16]
     bb0:	429a      	cmp	r2, r3
     bb2:	d349      	bcc.n	c48 <xTaskIncrementTick+0xe8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     bb4:	4b35      	ldr	r3, [pc, #212]	; (c8c <xTaskIncrementTick+0x12c>)
     bb6:	681b      	ldr	r3, [r3, #0]
     bb8:	681b      	ldr	r3, [r3, #0]
     bba:	2b00      	cmp	r3, #0
     bbc:	d104      	bne.n	bc8 <xTaskIncrementTick+0x68>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     bbe:	4b37      	ldr	r3, [pc, #220]	; (c9c <xTaskIncrementTick+0x13c>)
     bc0:	2201      	movs	r2, #1
     bc2:	4252      	negs	r2, r2
     bc4:	601a      	str	r2, [r3, #0]
					break;
     bc6:	e03f      	b.n	c48 <xTaskIncrementTick+0xe8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     bc8:	4b30      	ldr	r3, [pc, #192]	; (c8c <xTaskIncrementTick+0x12c>)
     bca:	681b      	ldr	r3, [r3, #0]
     bcc:	68db      	ldr	r3, [r3, #12]
     bce:	68db      	ldr	r3, [r3, #12]
     bd0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
     bd2:	68bb      	ldr	r3, [r7, #8]
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
     bd8:	693a      	ldr	r2, [r7, #16]
     bda:	687b      	ldr	r3, [r7, #4]
     bdc:	429a      	cmp	r2, r3
     bde:	d203      	bcs.n	be8 <xTaskIncrementTick+0x88>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
     be0:	4b2e      	ldr	r3, [pc, #184]	; (c9c <xTaskIncrementTick+0x13c>)
     be2:	687a      	ldr	r2, [r7, #4]
     be4:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
     be6:	e02f      	b.n	c48 <xTaskIncrementTick+0xe8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     be8:	68bb      	ldr	r3, [r7, #8]
     bea:	3304      	adds	r3, #4
     bec:	0018      	movs	r0, r3
     bee:	4b2c      	ldr	r3, [pc, #176]	; (ca0 <xTaskIncrementTick+0x140>)
     bf0:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
     bf2:	68bb      	ldr	r3, [r7, #8]
     bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     bf6:	2b00      	cmp	r3, #0
     bf8:	d004      	beq.n	c04 <xTaskIncrementTick+0xa4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
     bfa:	68bb      	ldr	r3, [r7, #8]
     bfc:	3318      	adds	r3, #24
     bfe:	0018      	movs	r0, r3
     c00:	4b27      	ldr	r3, [pc, #156]	; (ca0 <xTaskIncrementTick+0x140>)
     c02:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
     c04:	68bb      	ldr	r3, [r7, #8]
     c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     c08:	4b26      	ldr	r3, [pc, #152]	; (ca4 <xTaskIncrementTick+0x144>)
     c0a:	681b      	ldr	r3, [r3, #0]
     c0c:	429a      	cmp	r2, r3
     c0e:	d903      	bls.n	c18 <xTaskIncrementTick+0xb8>
     c10:	68bb      	ldr	r3, [r7, #8]
     c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     c14:	4b23      	ldr	r3, [pc, #140]	; (ca4 <xTaskIncrementTick+0x144>)
     c16:	601a      	str	r2, [r3, #0]
     c18:	68bb      	ldr	r3, [r7, #8]
     c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     c1c:	0013      	movs	r3, r2
     c1e:	009b      	lsls	r3, r3, #2
     c20:	189b      	adds	r3, r3, r2
     c22:	009b      	lsls	r3, r3, #2
     c24:	4a20      	ldr	r2, [pc, #128]	; (ca8 <xTaskIncrementTick+0x148>)
     c26:	189a      	adds	r2, r3, r2
     c28:	68bb      	ldr	r3, [r7, #8]
     c2a:	3304      	adds	r3, #4
     c2c:	0019      	movs	r1, r3
     c2e:	0010      	movs	r0, r2
     c30:	4b1e      	ldr	r3, [pc, #120]	; (cac <xTaskIncrementTick+0x14c>)
     c32:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     c34:	68bb      	ldr	r3, [r7, #8]
     c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     c38:	4b1d      	ldr	r3, [pc, #116]	; (cb0 <xTaskIncrementTick+0x150>)
     c3a:	681b      	ldr	r3, [r3, #0]
     c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     c3e:	429a      	cmp	r2, r3
     c40:	d3b8      	bcc.n	bb4 <xTaskIncrementTick+0x54>
						{
							xSwitchRequired = pdTRUE;
     c42:	2301      	movs	r3, #1
     c44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     c46:	e7b5      	b.n	bb4 <xTaskIncrementTick+0x54>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
     c48:	4b19      	ldr	r3, [pc, #100]	; (cb0 <xTaskIncrementTick+0x150>)
     c4a:	681b      	ldr	r3, [r3, #0]
     c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     c4e:	4916      	ldr	r1, [pc, #88]	; (ca8 <xTaskIncrementTick+0x148>)
     c50:	0013      	movs	r3, r2
     c52:	009b      	lsls	r3, r3, #2
     c54:	189b      	adds	r3, r3, r2
     c56:	009b      	lsls	r3, r3, #2
     c58:	585b      	ldr	r3, [r3, r1]
     c5a:	2b01      	cmp	r3, #1
     c5c:	d907      	bls.n	c6e <xTaskIncrementTick+0x10e>
			{
				xSwitchRequired = pdTRUE;
     c5e:	2301      	movs	r3, #1
     c60:	617b      	str	r3, [r7, #20]
     c62:	e004      	b.n	c6e <xTaskIncrementTick+0x10e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
     c64:	4b13      	ldr	r3, [pc, #76]	; (cb4 <xTaskIncrementTick+0x154>)
     c66:	681b      	ldr	r3, [r3, #0]
     c68:	1c5a      	adds	r2, r3, #1
     c6a:	4b12      	ldr	r3, [pc, #72]	; (cb4 <xTaskIncrementTick+0x154>)
     c6c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
     c6e:	4b12      	ldr	r3, [pc, #72]	; (cb8 <xTaskIncrementTick+0x158>)
     c70:	681b      	ldr	r3, [r3, #0]
     c72:	2b00      	cmp	r3, #0
     c74:	d001      	beq.n	c7a <xTaskIncrementTick+0x11a>
		{
			xSwitchRequired = pdTRUE;
     c76:	2301      	movs	r3, #1
     c78:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
     c7a:	697b      	ldr	r3, [r7, #20]
}
     c7c:	0018      	movs	r0, r3
     c7e:	46bd      	mov	sp, r7
     c80:	b006      	add	sp, #24
     c82:	bd80      	pop	{r7, pc}
     c84:	200038f0 	.word	0x200038f0
     c88:	200038cc 	.word	0x200038cc
     c8c:	20003898 	.word	0x20003898
     c90:	2000389c 	.word	0x2000389c
     c94:	200038e0 	.word	0x200038e0
     c98:	00000e11 	.word	0x00000e11
     c9c:	200038e8 	.word	0x200038e8
     ca0:	000003a3 	.word	0x000003a3
     ca4:	200038d0 	.word	0x200038d0
     ca8:	2000380c 	.word	0x2000380c
     cac:	000002f3 	.word	0x000002f3
     cb0:	20003808 	.word	0x20003808
     cb4:	200038d8 	.word	0x200038d8
     cb8:	200038dc 	.word	0x200038dc

00000cbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
     cbc:	b580      	push	{r7, lr}
     cbe:	b082      	sub	sp, #8
     cc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     cc2:	4b1f      	ldr	r3, [pc, #124]	; (d40 <vTaskSwitchContext+0x84>)
     cc4:	681b      	ldr	r3, [r3, #0]
     cc6:	2b00      	cmp	r3, #0
     cc8:	d003      	beq.n	cd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
     cca:	4b1e      	ldr	r3, [pc, #120]	; (d44 <vTaskSwitchContext+0x88>)
     ccc:	2201      	movs	r2, #1
     cce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
     cd0:	e032      	b.n	d38 <vTaskSwitchContext+0x7c>
		xYieldPending = pdFALSE;
     cd2:	4b1c      	ldr	r3, [pc, #112]	; (d44 <vTaskSwitchContext+0x88>)
     cd4:	2200      	movs	r2, #0
     cd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     cd8:	4b1b      	ldr	r3, [pc, #108]	; (d48 <vTaskSwitchContext+0x8c>)
     cda:	681b      	ldr	r3, [r3, #0]
     cdc:	607b      	str	r3, [r7, #4]
     cde:	e002      	b.n	ce6 <vTaskSwitchContext+0x2a>
     ce0:	687b      	ldr	r3, [r7, #4]
     ce2:	3b01      	subs	r3, #1
     ce4:	607b      	str	r3, [r7, #4]
     ce6:	4919      	ldr	r1, [pc, #100]	; (d4c <vTaskSwitchContext+0x90>)
     ce8:	687a      	ldr	r2, [r7, #4]
     cea:	0013      	movs	r3, r2
     cec:	009b      	lsls	r3, r3, #2
     cee:	189b      	adds	r3, r3, r2
     cf0:	009b      	lsls	r3, r3, #2
     cf2:	585b      	ldr	r3, [r3, r1]
     cf4:	2b00      	cmp	r3, #0
     cf6:	d0f3      	beq.n	ce0 <vTaskSwitchContext+0x24>
     cf8:	687a      	ldr	r2, [r7, #4]
     cfa:	0013      	movs	r3, r2
     cfc:	009b      	lsls	r3, r3, #2
     cfe:	189b      	adds	r3, r3, r2
     d00:	009b      	lsls	r3, r3, #2
     d02:	4a12      	ldr	r2, [pc, #72]	; (d4c <vTaskSwitchContext+0x90>)
     d04:	189b      	adds	r3, r3, r2
     d06:	603b      	str	r3, [r7, #0]
     d08:	683b      	ldr	r3, [r7, #0]
     d0a:	685b      	ldr	r3, [r3, #4]
     d0c:	685a      	ldr	r2, [r3, #4]
     d0e:	683b      	ldr	r3, [r7, #0]
     d10:	605a      	str	r2, [r3, #4]
     d12:	683b      	ldr	r3, [r7, #0]
     d14:	685a      	ldr	r2, [r3, #4]
     d16:	683b      	ldr	r3, [r7, #0]
     d18:	3308      	adds	r3, #8
     d1a:	429a      	cmp	r2, r3
     d1c:	d104      	bne.n	d28 <vTaskSwitchContext+0x6c>
     d1e:	683b      	ldr	r3, [r7, #0]
     d20:	685b      	ldr	r3, [r3, #4]
     d22:	685a      	ldr	r2, [r3, #4]
     d24:	683b      	ldr	r3, [r7, #0]
     d26:	605a      	str	r2, [r3, #4]
     d28:	683b      	ldr	r3, [r7, #0]
     d2a:	685b      	ldr	r3, [r3, #4]
     d2c:	68da      	ldr	r2, [r3, #12]
     d2e:	4b08      	ldr	r3, [pc, #32]	; (d50 <vTaskSwitchContext+0x94>)
     d30:	601a      	str	r2, [r3, #0]
     d32:	4b05      	ldr	r3, [pc, #20]	; (d48 <vTaskSwitchContext+0x8c>)
     d34:	687a      	ldr	r2, [r7, #4]
     d36:	601a      	str	r2, [r3, #0]
}
     d38:	46c0      	nop			; (mov r8, r8)
     d3a:	46bd      	mov	sp, r7
     d3c:	b002      	add	sp, #8
     d3e:	bd80      	pop	{r7, pc}
     d40:	200038f0 	.word	0x200038f0
     d44:	200038dc 	.word	0x200038dc
     d48:	200038d0 	.word	0x200038d0
     d4c:	2000380c 	.word	0x2000380c
     d50:	20003808 	.word	0x20003808

00000d54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
     d54:	b580      	push	{r7, lr}
     d56:	b082      	sub	sp, #8
     d58:	af00      	add	r7, sp, #0
     d5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
     d5c:	4b05      	ldr	r3, [pc, #20]	; (d74 <prvIdleTask+0x20>)
     d5e:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
     d60:	4b05      	ldr	r3, [pc, #20]	; (d78 <prvIdleTask+0x24>)
     d62:	681b      	ldr	r3, [r3, #0]
     d64:	2b01      	cmp	r3, #1
     d66:	d901      	bls.n	d6c <prvIdleTask+0x18>
			{
				taskYIELD();
     d68:	4b04      	ldr	r3, [pc, #16]	; (d7c <prvIdleTask+0x28>)
     d6a:	4798      	blx	r3
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
     d6c:	4b04      	ldr	r3, [pc, #16]	; (d80 <prvIdleTask+0x2c>)
     d6e:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
     d70:	e7f4      	b.n	d5c <prvIdleTask+0x8>
     d72:	46c0      	nop			; (mov r8, r8)
     d74:	00000e05 	.word	0x00000e05
     d78:	2000380c 	.word	0x2000380c
     d7c:	00000501 	.word	0x00000501
     d80:	00000109 	.word	0x00000109

00000d84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
     d84:	b580      	push	{r7, lr}
     d86:	b082      	sub	sp, #8
     d88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
     d8a:	2300      	movs	r3, #0
     d8c:	607b      	str	r3, [r7, #4]
     d8e:	e00c      	b.n	daa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
     d90:	687a      	ldr	r2, [r7, #4]
     d92:	0013      	movs	r3, r2
     d94:	009b      	lsls	r3, r3, #2
     d96:	189b      	adds	r3, r3, r2
     d98:	009b      	lsls	r3, r3, #2
     d9a:	4a12      	ldr	r2, [pc, #72]	; (de4 <prvInitialiseTaskLists+0x60>)
     d9c:	189b      	adds	r3, r3, r2
     d9e:	0018      	movs	r0, r3
     da0:	4b11      	ldr	r3, [pc, #68]	; (de8 <prvInitialiseTaskLists+0x64>)
     da2:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
     da4:	687b      	ldr	r3, [r7, #4]
     da6:	3301      	adds	r3, #1
     da8:	607b      	str	r3, [r7, #4]
     daa:	687b      	ldr	r3, [r7, #4]
     dac:	2b04      	cmp	r3, #4
     dae:	d9ef      	bls.n	d90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
     db0:	4b0e      	ldr	r3, [pc, #56]	; (dec <prvInitialiseTaskLists+0x68>)
     db2:	0018      	movs	r0, r3
     db4:	4b0c      	ldr	r3, [pc, #48]	; (de8 <prvInitialiseTaskLists+0x64>)
     db6:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
     db8:	4b0d      	ldr	r3, [pc, #52]	; (df0 <prvInitialiseTaskLists+0x6c>)
     dba:	0018      	movs	r0, r3
     dbc:	4b0a      	ldr	r3, [pc, #40]	; (de8 <prvInitialiseTaskLists+0x64>)
     dbe:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
     dc0:	4b0c      	ldr	r3, [pc, #48]	; (df4 <prvInitialiseTaskLists+0x70>)
     dc2:	0018      	movs	r0, r3
     dc4:	4b08      	ldr	r3, [pc, #32]	; (de8 <prvInitialiseTaskLists+0x64>)
     dc6:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
     dc8:	4b0b      	ldr	r3, [pc, #44]	; (df8 <prvInitialiseTaskLists+0x74>)
     dca:	0018      	movs	r0, r3
     dcc:	4b06      	ldr	r3, [pc, #24]	; (de8 <prvInitialiseTaskLists+0x64>)
     dce:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
     dd0:	4b0a      	ldr	r3, [pc, #40]	; (dfc <prvInitialiseTaskLists+0x78>)
     dd2:	4a06      	ldr	r2, [pc, #24]	; (dec <prvInitialiseTaskLists+0x68>)
     dd4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
     dd6:	4b0a      	ldr	r3, [pc, #40]	; (e00 <prvInitialiseTaskLists+0x7c>)
     dd8:	4a05      	ldr	r2, [pc, #20]	; (df0 <prvInitialiseTaskLists+0x6c>)
     dda:	601a      	str	r2, [r3, #0]
}
     ddc:	46c0      	nop			; (mov r8, r8)
     dde:	46bd      	mov	sp, r7
     de0:	b002      	add	sp, #8
     de2:	bd80      	pop	{r7, pc}
     de4:	2000380c 	.word	0x2000380c
     de8:	000002a1 	.word	0x000002a1
     dec:	20003870 	.word	0x20003870
     df0:	20003884 	.word	0x20003884
     df4:	200038a0 	.word	0x200038a0
     df8:	200038b4 	.word	0x200038b4
     dfc:	20003898 	.word	0x20003898
     e00:	2000389c 	.word	0x2000389c

00000e04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
     e04:	b580      	push	{r7, lr}
     e06:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
     e08:	46c0      	nop			; (mov r8, r8)
     e0a:	46bd      	mov	sp, r7
     e0c:	bd80      	pop	{r7, pc}
	...

00000e10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
     e10:	b580      	push	{r7, lr}
     e12:	b082      	sub	sp, #8
     e14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     e16:	4b0b      	ldr	r3, [pc, #44]	; (e44 <prvResetNextTaskUnblockTime+0x34>)
     e18:	681b      	ldr	r3, [r3, #0]
     e1a:	681b      	ldr	r3, [r3, #0]
     e1c:	2b00      	cmp	r3, #0
     e1e:	d104      	bne.n	e2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
     e20:	4b09      	ldr	r3, [pc, #36]	; (e48 <prvResetNextTaskUnblockTime+0x38>)
     e22:	2201      	movs	r2, #1
     e24:	4252      	negs	r2, r2
     e26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
     e28:	e008      	b.n	e3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     e2a:	4b06      	ldr	r3, [pc, #24]	; (e44 <prvResetNextTaskUnblockTime+0x34>)
     e2c:	681b      	ldr	r3, [r3, #0]
     e2e:	68db      	ldr	r3, [r3, #12]
     e30:	68db      	ldr	r3, [r3, #12]
     e32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
     e34:	687b      	ldr	r3, [r7, #4]
     e36:	685a      	ldr	r2, [r3, #4]
     e38:	4b03      	ldr	r3, [pc, #12]	; (e48 <prvResetNextTaskUnblockTime+0x38>)
     e3a:	601a      	str	r2, [r3, #0]
}
     e3c:	46c0      	nop			; (mov r8, r8)
     e3e:	46bd      	mov	sp, r7
     e40:	b002      	add	sp, #8
     e42:	bd80      	pop	{r7, pc}
     e44:	20003898 	.word	0x20003898
     e48:	200038e8 	.word	0x200038e8

00000e4c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
     e4c:	b580      	push	{r7, lr}
     e4e:	b084      	sub	sp, #16
     e50:	af00      	add	r7, sp, #0
     e52:	6078      	str	r0, [r7, #4]
     e54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
     e56:	4b21      	ldr	r3, [pc, #132]	; (edc <prvAddCurrentTaskToDelayedList+0x90>)
     e58:	681b      	ldr	r3, [r3, #0]
     e5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
     e5c:	4b20      	ldr	r3, [pc, #128]	; (ee0 <prvAddCurrentTaskToDelayedList+0x94>)
     e5e:	681b      	ldr	r3, [r3, #0]
     e60:	3304      	adds	r3, #4
     e62:	0018      	movs	r0, r3
     e64:	4b1f      	ldr	r3, [pc, #124]	; (ee4 <prvAddCurrentTaskToDelayedList+0x98>)
     e66:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
     e68:	687b      	ldr	r3, [r7, #4]
     e6a:	3301      	adds	r3, #1
     e6c:	d10b      	bne.n	e86 <prvAddCurrentTaskToDelayedList+0x3a>
     e6e:	683b      	ldr	r3, [r7, #0]
     e70:	2b00      	cmp	r3, #0
     e72:	d008      	beq.n	e86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
     e74:	4b1a      	ldr	r3, [pc, #104]	; (ee0 <prvAddCurrentTaskToDelayedList+0x94>)
     e76:	681b      	ldr	r3, [r3, #0]
     e78:	1d1a      	adds	r2, r3, #4
     e7a:	4b1b      	ldr	r3, [pc, #108]	; (ee8 <prvAddCurrentTaskToDelayedList+0x9c>)
     e7c:	0011      	movs	r1, r2
     e7e:	0018      	movs	r0, r3
     e80:	4b1a      	ldr	r3, [pc, #104]	; (eec <prvAddCurrentTaskToDelayedList+0xa0>)
     e82:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
     e84:	e026      	b.n	ed4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
     e86:	68fa      	ldr	r2, [r7, #12]
     e88:	687b      	ldr	r3, [r7, #4]
     e8a:	18d3      	adds	r3, r2, r3
     e8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
     e8e:	4b14      	ldr	r3, [pc, #80]	; (ee0 <prvAddCurrentTaskToDelayedList+0x94>)
     e90:	681b      	ldr	r3, [r3, #0]
     e92:	68ba      	ldr	r2, [r7, #8]
     e94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
     e96:	68ba      	ldr	r2, [r7, #8]
     e98:	68fb      	ldr	r3, [r7, #12]
     e9a:	429a      	cmp	r2, r3
     e9c:	d209      	bcs.n	eb2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
     e9e:	4b14      	ldr	r3, [pc, #80]	; (ef0 <prvAddCurrentTaskToDelayedList+0xa4>)
     ea0:	681a      	ldr	r2, [r3, #0]
     ea2:	4b0f      	ldr	r3, [pc, #60]	; (ee0 <prvAddCurrentTaskToDelayedList+0x94>)
     ea4:	681b      	ldr	r3, [r3, #0]
     ea6:	3304      	adds	r3, #4
     ea8:	0019      	movs	r1, r3
     eaa:	0010      	movs	r0, r2
     eac:	4b11      	ldr	r3, [pc, #68]	; (ef4 <prvAddCurrentTaskToDelayedList+0xa8>)
     eae:	4798      	blx	r3
}
     eb0:	e010      	b.n	ed4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
     eb2:	4b11      	ldr	r3, [pc, #68]	; (ef8 <prvAddCurrentTaskToDelayedList+0xac>)
     eb4:	681a      	ldr	r2, [r3, #0]
     eb6:	4b0a      	ldr	r3, [pc, #40]	; (ee0 <prvAddCurrentTaskToDelayedList+0x94>)
     eb8:	681b      	ldr	r3, [r3, #0]
     eba:	3304      	adds	r3, #4
     ebc:	0019      	movs	r1, r3
     ebe:	0010      	movs	r0, r2
     ec0:	4b0c      	ldr	r3, [pc, #48]	; (ef4 <prvAddCurrentTaskToDelayedList+0xa8>)
     ec2:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
     ec4:	4b0d      	ldr	r3, [pc, #52]	; (efc <prvAddCurrentTaskToDelayedList+0xb0>)
     ec6:	681b      	ldr	r3, [r3, #0]
     ec8:	68ba      	ldr	r2, [r7, #8]
     eca:	429a      	cmp	r2, r3
     ecc:	d202      	bcs.n	ed4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
     ece:	4b0b      	ldr	r3, [pc, #44]	; (efc <prvAddCurrentTaskToDelayedList+0xb0>)
     ed0:	68ba      	ldr	r2, [r7, #8]
     ed2:	601a      	str	r2, [r3, #0]
}
     ed4:	46c0      	nop			; (mov r8, r8)
     ed6:	46bd      	mov	sp, r7
     ed8:	b004      	add	sp, #16
     eda:	bd80      	pop	{r7, pc}
     edc:	200038cc 	.word	0x200038cc
     ee0:	20003808 	.word	0x20003808
     ee4:	000003a3 	.word	0x000003a3
     ee8:	200038b4 	.word	0x200038b4
     eec:	000002f3 	.word	0x000002f3
     ef0:	2000389c 	.word	0x2000389c
     ef4:	00000337 	.word	0x00000337
     ef8:	20003898 	.word	0x20003898
     efc:	200038e8 	.word	0x200038e8

00000f00 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     f00:	b580      	push	{r7, lr}
     f02:	b086      	sub	sp, #24
     f04:	af00      	add	r7, sp, #0
     f06:	60f8      	str	r0, [r7, #12]
     f08:	60b9      	str	r1, [r7, #8]
     f0a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
     f0c:	2300      	movs	r3, #0
     f0e:	617b      	str	r3, [r7, #20]

	if (file != 0) {
     f10:	68fb      	ldr	r3, [r7, #12]
     f12:	2b00      	cmp	r3, #0
     f14:	d012      	beq.n	f3c <_read+0x3c>
		return -1;
     f16:	2301      	movs	r3, #1
     f18:	425b      	negs	r3, r3
     f1a:	e013      	b.n	f44 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
     f1c:	4b0b      	ldr	r3, [pc, #44]	; (f4c <_read+0x4c>)
     f1e:	681a      	ldr	r2, [r3, #0]
     f20:	4b0b      	ldr	r3, [pc, #44]	; (f50 <_read+0x50>)
     f22:	681b      	ldr	r3, [r3, #0]
     f24:	68b9      	ldr	r1, [r7, #8]
     f26:	0018      	movs	r0, r3
     f28:	4790      	blx	r2
		ptr++;
     f2a:	68bb      	ldr	r3, [r7, #8]
     f2c:	3301      	adds	r3, #1
     f2e:	60bb      	str	r3, [r7, #8]
		nChars++;
     f30:	697b      	ldr	r3, [r7, #20]
     f32:	3301      	adds	r3, #1
     f34:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
     f36:	687b      	ldr	r3, [r7, #4]
     f38:	3b01      	subs	r3, #1
     f3a:	607b      	str	r3, [r7, #4]
     f3c:	687b      	ldr	r3, [r7, #4]
     f3e:	2b00      	cmp	r3, #0
     f40:	dcec      	bgt.n	f1c <_read+0x1c>
	}
	return nChars;
     f42:	697b      	ldr	r3, [r7, #20]
}
     f44:	0018      	movs	r0, r3
     f46:	46bd      	mov	sp, r7
     f48:	b006      	add	sp, #24
     f4a:	bd80      	pop	{r7, pc}
     f4c:	20003978 	.word	0x20003978
     f50:	20003980 	.word	0x20003980

00000f54 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     f54:	b580      	push	{r7, lr}
     f56:	b086      	sub	sp, #24
     f58:	af00      	add	r7, sp, #0
     f5a:	60f8      	str	r0, [r7, #12]
     f5c:	60b9      	str	r1, [r7, #8]
     f5e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
     f60:	2300      	movs	r3, #0
     f62:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
     f64:	68fb      	ldr	r3, [r7, #12]
     f66:	2b01      	cmp	r3, #1
     f68:	d01d      	beq.n	fa6 <_write+0x52>
     f6a:	68fb      	ldr	r3, [r7, #12]
     f6c:	2b02      	cmp	r3, #2
     f6e:	d01a      	beq.n	fa6 <_write+0x52>
     f70:	68fb      	ldr	r3, [r7, #12]
     f72:	2b03      	cmp	r3, #3
     f74:	d017      	beq.n	fa6 <_write+0x52>
		return -1;
     f76:	2301      	movs	r3, #1
     f78:	425b      	negs	r3, r3
     f7a:	e018      	b.n	fae <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
     f7c:	4b0e      	ldr	r3, [pc, #56]	; (fb8 <_write+0x64>)
     f7e:	681a      	ldr	r2, [r3, #0]
     f80:	4b0e      	ldr	r3, [pc, #56]	; (fbc <_write+0x68>)
     f82:	6818      	ldr	r0, [r3, #0]
     f84:	68bb      	ldr	r3, [r7, #8]
     f86:	1c59      	adds	r1, r3, #1
     f88:	60b9      	str	r1, [r7, #8]
     f8a:	781b      	ldrb	r3, [r3, #0]
     f8c:	0019      	movs	r1, r3
     f8e:	4790      	blx	r2
     f90:	1e03      	subs	r3, r0, #0
     f92:	da02      	bge.n	f9a <_write+0x46>
			return -1;
     f94:	2301      	movs	r3, #1
     f96:	425b      	negs	r3, r3
     f98:	e009      	b.n	fae <_write+0x5a>
		}
		++nChars;
     f9a:	697b      	ldr	r3, [r7, #20]
     f9c:	3301      	adds	r3, #1
     f9e:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
     fa0:	687b      	ldr	r3, [r7, #4]
     fa2:	3b01      	subs	r3, #1
     fa4:	607b      	str	r3, [r7, #4]
     fa6:	687b      	ldr	r3, [r7, #4]
     fa8:	2b00      	cmp	r3, #0
     faa:	d1e7      	bne.n	f7c <_write+0x28>
	}
	return nChars;
     fac:	697b      	ldr	r3, [r7, #20]
}
     fae:	0018      	movs	r0, r3
     fb0:	46bd      	mov	sp, r7
     fb2:	b006      	add	sp, #24
     fb4:	bd80      	pop	{r7, pc}
     fb6:	46c0      	nop			; (mov r8, r8)
     fb8:	2000397c 	.word	0x2000397c
     fbc:	20003980 	.word	0x20003980

00000fc0 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     fc0:	b580      	push	{r7, lr}
     fc2:	b082      	sub	sp, #8
     fc4:	af00      	add	r7, sp, #0
     fc6:	0002      	movs	r2, r0
     fc8:	1dfb      	adds	r3, r7, #7
     fca:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     fcc:	4b06      	ldr	r3, [pc, #24]	; (fe8 <system_interrupt_enable+0x28>)
     fce:	1dfa      	adds	r2, r7, #7
     fd0:	7812      	ldrb	r2, [r2, #0]
     fd2:	0011      	movs	r1, r2
     fd4:	221f      	movs	r2, #31
     fd6:	400a      	ands	r2, r1
     fd8:	2101      	movs	r1, #1
     fda:	4091      	lsls	r1, r2
     fdc:	000a      	movs	r2, r1
     fde:	601a      	str	r2, [r3, #0]
}
     fe0:	46c0      	nop			; (mov r8, r8)
     fe2:	46bd      	mov	sp, r7
     fe4:	b002      	add	sp, #8
     fe6:	bd80      	pop	{r7, pc}
     fe8:	e000e100 	.word	0xe000e100

00000fec <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     fec:	b580      	push	{r7, lr}
     fee:	b084      	sub	sp, #16
     ff0:	af00      	add	r7, sp, #0
     ff2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     ff4:	687b      	ldr	r3, [r7, #4]
     ff6:	681b      	ldr	r3, [r3, #0]
     ff8:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     ffa:	68fb      	ldr	r3, [r7, #12]
     ffc:	69db      	ldr	r3, [r3, #28]
     ffe:	1e5a      	subs	r2, r3, #1
    1000:	4193      	sbcs	r3, r2
    1002:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    1004:	0018      	movs	r0, r3
    1006:	46bd      	mov	sp, r7
    1008:	b004      	add	sp, #16
    100a:	bd80      	pop	{r7, pc}

0000100c <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    100c:	b580      	push	{r7, lr}
    100e:	b082      	sub	sp, #8
    1010:	af00      	add	r7, sp, #0
    1012:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1014:	46c0      	nop			; (mov r8, r8)
    1016:	687b      	ldr	r3, [r7, #4]
    1018:	0018      	movs	r0, r3
    101a:	4b04      	ldr	r3, [pc, #16]	; (102c <_usart_wait_for_sync+0x20>)
    101c:	4798      	blx	r3
    101e:	1e03      	subs	r3, r0, #0
    1020:	d1f9      	bne.n	1016 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    1022:	46c0      	nop			; (mov r8, r8)
    1024:	46bd      	mov	sp, r7
    1026:	b002      	add	sp, #8
    1028:	bd80      	pop	{r7, pc}
    102a:	46c0      	nop			; (mov r8, r8)
    102c:	00000fed 	.word	0x00000fed

00001030 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    1030:	b580      	push	{r7, lr}
    1032:	b082      	sub	sp, #8
    1034:	af00      	add	r7, sp, #0
    1036:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1038:	687b      	ldr	r3, [r7, #4]
    103a:	2280      	movs	r2, #128	; 0x80
    103c:	05d2      	lsls	r2, r2, #23
    103e:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1040:	687b      	ldr	r3, [r7, #4]
    1042:	2200      	movs	r2, #0
    1044:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    1046:	687b      	ldr	r3, [r7, #4]
    1048:	22ff      	movs	r2, #255	; 0xff
    104a:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    104c:	687b      	ldr	r3, [r7, #4]
    104e:	2200      	movs	r2, #0
    1050:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1052:	687b      	ldr	r3, [r7, #4]
    1054:	2200      	movs	r2, #0
    1056:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    1058:	687b      	ldr	r3, [r7, #4]
    105a:	2296      	movs	r2, #150	; 0x96
    105c:	0192      	lsls	r2, r2, #6
    105e:	63da      	str	r2, [r3, #60]	; 0x3c
	config->receiver_enable  = true;
    1060:	687b      	ldr	r3, [r7, #4]
    1062:	2240      	movs	r2, #64	; 0x40
    1064:	2101      	movs	r1, #1
    1066:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    1068:	687b      	ldr	r3, [r7, #4]
    106a:	2241      	movs	r2, #65	; 0x41
    106c:	2101      	movs	r1, #1
    106e:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    1070:	687b      	ldr	r3, [r7, #4]
    1072:	2242      	movs	r2, #66	; 0x42
    1074:	2100      	movs	r1, #0
    1076:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    1078:	687b      	ldr	r3, [r7, #4]
    107a:	2243      	movs	r2, #67	; 0x43
    107c:	2100      	movs	r1, #0
    107e:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    1080:	687b      	ldr	r3, [r7, #4]
    1082:	2200      	movs	r2, #0
    1084:	645a      	str	r2, [r3, #68]	; 0x44
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    1086:	687b      	ldr	r3, [r7, #4]
    1088:	2288      	movs	r2, #136	; 0x88
    108a:	0352      	lsls	r2, r2, #13
    108c:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    108e:	687b      	ldr	r3, [r7, #4]
    1090:	2248      	movs	r2, #72	; 0x48
    1092:	2100      	movs	r1, #0
    1094:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    1096:	687b      	ldr	r3, [r7, #4]
    1098:	2249      	movs	r2, #73	; 0x49
    109a:	2100      	movs	r1, #0
    109c:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    109e:	687b      	ldr	r3, [r7, #4]
    10a0:	2200      	movs	r2, #0
    10a2:	64da      	str	r2, [r3, #76]	; 0x4c
	config->pinmux_pad1      = PINMUX_DEFAULT;
    10a4:	687b      	ldr	r3, [r7, #4]
    10a6:	2200      	movs	r2, #0
    10a8:	651a      	str	r2, [r3, #80]	; 0x50
	config->pinmux_pad2      = PINMUX_DEFAULT;
    10aa:	687b      	ldr	r3, [r7, #4]
    10ac:	2200      	movs	r2, #0
    10ae:	655a      	str	r2, [r3, #84]	; 0x54
	config->pinmux_pad3      = PINMUX_DEFAULT;
    10b0:	687b      	ldr	r3, [r7, #4]
    10b2:	2200      	movs	r2, #0
    10b4:	659a      	str	r2, [r3, #88]	; 0x58
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    10b6:	687b      	ldr	r3, [r7, #4]
    10b8:	2200      	movs	r2, #0
    10ba:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    10bc:	687b      	ldr	r3, [r7, #4]
    10be:	2200      	movs	r2, #0
    10c0:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    10c2:	687b      	ldr	r3, [r7, #4]
    10c4:	2200      	movs	r2, #0
    10c6:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    10c8:	687b      	ldr	r3, [r7, #4]
    10ca:	2200      	movs	r2, #0
    10cc:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    10ce:	687b      	ldr	r3, [r7, #4]
    10d0:	2200      	movs	r2, #0
    10d2:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    10d4:	687b      	ldr	r3, [r7, #4]
    10d6:	2200      	movs	r2, #0
    10d8:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    10da:	687b      	ldr	r3, [r7, #4]
    10dc:	2213      	movs	r2, #19
    10de:	769a      	strb	r2, [r3, #26]
#endif
#ifdef FEATURE_USART_ISO7816
	config->iso7816_config.enabled                  = false;
    10e0:	687b      	ldr	r3, [r7, #4]
    10e2:	2220      	movs	r2, #32
    10e4:	2100      	movs	r1, #0
    10e6:	5499      	strb	r1, [r3, r2]
	config->iso7816_config.guard_time               = ISO7816_GUARD_TIME_2_BIT;
    10e8:	687b      	ldr	r3, [r7, #4]
    10ea:	2229      	movs	r2, #41	; 0x29
    10ec:	2102      	movs	r1, #2
    10ee:	5499      	strb	r1, [r3, r2]
	config->iso7816_config.protocol_t               = ISO7816_PROTOCOL_T_0;
    10f0:	687b      	ldr	r3, [r7, #4]
    10f2:	2280      	movs	r2, #128	; 0x80
    10f4:	0552      	lsls	r2, r2, #21
    10f6:	625a      	str	r2, [r3, #36]	; 0x24
	config->iso7816_config.enable_inverse           = false;
    10f8:	687b      	ldr	r3, [r7, #4]
    10fa:	2228      	movs	r2, #40	; 0x28
    10fc:	2100      	movs	r1, #0
    10fe:	5499      	strb	r1, [r3, r2]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
    1100:	687b      	ldr	r3, [r7, #4]
    1102:	2200      	movs	r2, #0
    1104:	62da      	str	r2, [r3, #44]	; 0x2c
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
    1106:	687b      	ldr	r3, [r7, #4]
    1108:	2200      	movs	r2, #0
    110a:	631a      	str	r2, [r3, #48]	; 0x30
	config->iso7816_config.max_iterations           = 7;
    110c:	687b      	ldr	r3, [r7, #4]
    110e:	2207      	movs	r2, #7
    1110:	635a      	str	r2, [r3, #52]	; 0x34
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1112:	687b      	ldr	r3, [r7, #4]
    1114:	2239      	movs	r2, #57	; 0x39
    1116:	2100      	movs	r1, #0
    1118:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
    111a:	687b      	ldr	r3, [r7, #4]
    111c:	2238      	movs	r2, #56	; 0x38
    111e:	2100      	movs	r1, #0
    1120:	5499      	strb	r1, [r3, r2]
#endif
}
    1122:	46c0      	nop			; (mov r8, r8)
    1124:	46bd      	mov	sp, r7
    1126:	b002      	add	sp, #8
    1128:	bd80      	pop	{r7, pc}
	...

0000112c <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    112c:	b580      	push	{r7, lr}
    112e:	b084      	sub	sp, #16
    1130:	af00      	add	r7, sp, #0
    1132:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1134:	687b      	ldr	r3, [r7, #4]
    1136:	681b      	ldr	r3, [r3, #0]
    1138:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    113a:	687b      	ldr	r3, [r7, #4]
    113c:	681b      	ldr	r3, [r3, #0]
    113e:	0018      	movs	r0, r3
    1140:	4b09      	ldr	r3, [pc, #36]	; (1168 <usart_enable+0x3c>)
    1142:	4798      	blx	r3
    1144:	0003      	movs	r3, r0
    1146:	0018      	movs	r0, r3
    1148:	4b08      	ldr	r3, [pc, #32]	; (116c <usart_enable+0x40>)
    114a:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    114c:	687b      	ldr	r3, [r7, #4]
    114e:	0018      	movs	r0, r3
    1150:	4b07      	ldr	r3, [pc, #28]	; (1170 <usart_enable+0x44>)
    1152:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1154:	68fb      	ldr	r3, [r7, #12]
    1156:	681b      	ldr	r3, [r3, #0]
    1158:	2202      	movs	r2, #2
    115a:	431a      	orrs	r2, r3
    115c:	68fb      	ldr	r3, [r7, #12]
    115e:	601a      	str	r2, [r3, #0]
}
    1160:	46c0      	nop			; (mov r8, r8)
    1162:	46bd      	mov	sp, r7
    1164:	b004      	add	sp, #16
    1166:	bd80      	pop	{r7, pc}
    1168:	0000194d 	.word	0x0000194d
    116c:	00000fc1 	.word	0x00000fc1
    1170:	0000100d 	.word	0x0000100d

00001174 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    1174:	b580      	push	{r7, lr}
    1176:	b084      	sub	sp, #16
    1178:	af00      	add	r7, sp, #0
    117a:	60f8      	str	r0, [r7, #12]
    117c:	60b9      	str	r1, [r7, #8]
    117e:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    1180:	687a      	ldr	r2, [r7, #4]
    1182:	68b9      	ldr	r1, [r7, #8]
    1184:	68fb      	ldr	r3, [r7, #12]
    1186:	0018      	movs	r0, r3
    1188:	4b05      	ldr	r3, [pc, #20]	; (11a0 <usart_serial_init+0x2c>)
    118a:	4798      	blx	r3
    118c:	1e03      	subs	r3, r0, #0
    118e:	d101      	bne.n	1194 <usart_serial_init+0x20>
		return true;
    1190:	2301      	movs	r3, #1
    1192:	e000      	b.n	1196 <usart_serial_init+0x22>
	}
	else {
		return false;
    1194:	2300      	movs	r3, #0
	}
}
    1196:	0018      	movs	r0, r3
    1198:	46bd      	mov	sp, r7
    119a:	b004      	add	sp, #16
    119c:	bd80      	pop	{r7, pc}
    119e:	46c0      	nop			; (mov r8, r8)
    11a0:	00001ef1 	.word	0x00001ef1

000011a4 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    11a4:	b580      	push	{r7, lr}
    11a6:	b082      	sub	sp, #8
    11a8:	af00      	add	r7, sp, #0
    11aa:	6078      	str	r0, [r7, #4]
    11ac:	000a      	movs	r2, r1
    11ae:	1cfb      	adds	r3, r7, #3
    11b0:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    11b2:	46c0      	nop			; (mov r8, r8)
    11b4:	1cfb      	adds	r3, r7, #3
    11b6:	781b      	ldrb	r3, [r3, #0]
    11b8:	b29a      	uxth	r2, r3
    11ba:	687b      	ldr	r3, [r7, #4]
    11bc:	0011      	movs	r1, r2
    11be:	0018      	movs	r0, r3
    11c0:	4b04      	ldr	r3, [pc, #16]	; (11d4 <usart_serial_putchar+0x30>)
    11c2:	4798      	blx	r3
    11c4:	1e03      	subs	r3, r0, #0
    11c6:	d1f5      	bne.n	11b4 <usart_serial_putchar+0x10>

	return STATUS_OK;
    11c8:	2300      	movs	r3, #0
}
    11ca:	0018      	movs	r0, r3
    11cc:	46bd      	mov	sp, r7
    11ce:	b002      	add	sp, #8
    11d0:	bd80      	pop	{r7, pc}
    11d2:	46c0      	nop			; (mov r8, r8)
    11d4:	0000216d 	.word	0x0000216d

000011d8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    11d8:	b580      	push	{r7, lr}
    11da:	b084      	sub	sp, #16
    11dc:	af00      	add	r7, sp, #0
    11de:	6078      	str	r0, [r7, #4]
    11e0:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    11e2:	230e      	movs	r3, #14
    11e4:	18fb      	adds	r3, r7, r3
    11e6:	2200      	movs	r2, #0
    11e8:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    11ea:	46c0      	nop			; (mov r8, r8)
    11ec:	230e      	movs	r3, #14
    11ee:	18fa      	adds	r2, r7, r3
    11f0:	687b      	ldr	r3, [r7, #4]
    11f2:	0011      	movs	r1, r2
    11f4:	0018      	movs	r0, r3
    11f6:	4b07      	ldr	r3, [pc, #28]	; (1214 <usart_serial_getchar+0x3c>)
    11f8:	4798      	blx	r3
    11fa:	1e03      	subs	r3, r0, #0
    11fc:	d1f6      	bne.n	11ec <usart_serial_getchar+0x14>

	*c = temp;
    11fe:	230e      	movs	r3, #14
    1200:	18fb      	adds	r3, r7, r3
    1202:	881b      	ldrh	r3, [r3, #0]
    1204:	b2da      	uxtb	r2, r3
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	701a      	strb	r2, [r3, #0]
}
    120a:	46c0      	nop			; (mov r8, r8)
    120c:	46bd      	mov	sp, r7
    120e:	b004      	add	sp, #16
    1210:	bd80      	pop	{r7, pc}
    1212:	46c0      	nop			; (mov r8, r8)
    1214:	000021d1 	.word	0x000021d1

00001218 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    1218:	b580      	push	{r7, lr}
    121a:	b084      	sub	sp, #16
    121c:	af00      	add	r7, sp, #0
    121e:	60f8      	str	r0, [r7, #12]
    1220:	60b9      	str	r1, [r7, #8]
    1222:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    1224:	4b10      	ldr	r3, [pc, #64]	; (1268 <stdio_serial_init+0x50>)
    1226:	68fa      	ldr	r2, [r7, #12]
    1228:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    122a:	4b10      	ldr	r3, [pc, #64]	; (126c <stdio_serial_init+0x54>)
    122c:	4a10      	ldr	r2, [pc, #64]	; (1270 <stdio_serial_init+0x58>)
    122e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1230:	4b10      	ldr	r3, [pc, #64]	; (1274 <stdio_serial_init+0x5c>)
    1232:	4a11      	ldr	r2, [pc, #68]	; (1278 <stdio_serial_init+0x60>)
    1234:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    1236:	687a      	ldr	r2, [r7, #4]
    1238:	68b9      	ldr	r1, [r7, #8]
    123a:	68fb      	ldr	r3, [r7, #12]
    123c:	0018      	movs	r0, r3
    123e:	4b0f      	ldr	r3, [pc, #60]	; (127c <stdio_serial_init+0x64>)
    1240:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    1242:	4b0f      	ldr	r3, [pc, #60]	; (1280 <stdio_serial_init+0x68>)
    1244:	681b      	ldr	r3, [r3, #0]
    1246:	689b      	ldr	r3, [r3, #8]
    1248:	2100      	movs	r1, #0
    124a:	0018      	movs	r0, r3
    124c:	4b0d      	ldr	r3, [pc, #52]	; (1284 <stdio_serial_init+0x6c>)
    124e:	4798      	blx	r3
	setbuf(stdin, NULL);
    1250:	4b0b      	ldr	r3, [pc, #44]	; (1280 <stdio_serial_init+0x68>)
    1252:	681b      	ldr	r3, [r3, #0]
    1254:	685b      	ldr	r3, [r3, #4]
    1256:	2100      	movs	r1, #0
    1258:	0018      	movs	r0, r3
    125a:	4b0a      	ldr	r3, [pc, #40]	; (1284 <stdio_serial_init+0x6c>)
    125c:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    125e:	46c0      	nop			; (mov r8, r8)
    1260:	46bd      	mov	sp, r7
    1262:	b004      	add	sp, #16
    1264:	bd80      	pop	{r7, pc}
    1266:	46c0      	nop			; (mov r8, r8)
    1268:	20003980 	.word	0x20003980
    126c:	2000397c 	.word	0x2000397c
    1270:	000011a5 	.word	0x000011a5
    1274:	20003978 	.word	0x20003978
    1278:	000011d9 	.word	0x000011d9
    127c:	00001175 	.word	0x00001175
    1280:	20000008 	.word	0x20000008
    1284:	00003955 	.word	0x00003955

00001288 <configure_console>:

/**
 *  Configure UART console.
 */
 void configure_console(void)
{
    1288:	b580      	push	{r7, lr}
    128a:	b098      	sub	sp, #96	; 0x60
    128c:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
    128e:	1d3b      	adds	r3, r7, #4
    1290:	0018      	movs	r0, r3
    1292:	4b13      	ldr	r3, [pc, #76]	; (12e0 <configure_console+0x58>)
    1294:	4798      	blx	r3
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
    1296:	1d3b      	adds	r3, r7, #4
    1298:	22c4      	movs	r2, #196	; 0xc4
    129a:	0392      	lsls	r2, r2, #14
    129c:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    129e:	1d3b      	adds	r3, r7, #4
    12a0:	2201      	movs	r2, #1
    12a2:	4252      	negs	r2, r2
    12a4:	64da      	str	r2, [r3, #76]	; 0x4c
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    12a6:	1d3b      	adds	r3, r7, #4
    12a8:	2201      	movs	r2, #1
    12aa:	4252      	negs	r2, r2
    12ac:	651a      	str	r2, [r3, #80]	; 0x50
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    12ae:	1d3b      	adds	r3, r7, #4
    12b0:	4a0c      	ldr	r2, [pc, #48]	; (12e4 <configure_console+0x5c>)
    12b2:	655a      	str	r2, [r3, #84]	; 0x54
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    12b4:	1d3b      	adds	r3, r7, #4
    12b6:	4a0c      	ldr	r2, [pc, #48]	; (12e8 <configure_console+0x60>)
    12b8:	659a      	str	r2, [r3, #88]	; 0x58
	usart_conf.baudrate    = CONF_STDIO_BAUDRATE;
    12ba:	1d3b      	adds	r3, r7, #4
    12bc:	2296      	movs	r2, #150	; 0x96
    12be:	0212      	lsls	r2, r2, #8
    12c0:	63da      	str	r2, [r3, #60]	; 0x3c

	stdio_serial_init(&cdc_uart_module, CONF_STDIO_USART_MODULE, &usart_conf);
    12c2:	1d3a      	adds	r2, r7, #4
    12c4:	4909      	ldr	r1, [pc, #36]	; (12ec <configure_console+0x64>)
    12c6:	4b0a      	ldr	r3, [pc, #40]	; (12f0 <configure_console+0x68>)
    12c8:	0018      	movs	r0, r3
    12ca:	4b0a      	ldr	r3, [pc, #40]	; (12f4 <configure_console+0x6c>)
    12cc:	4798      	blx	r3
	usart_enable(&cdc_uart_module);
    12ce:	4b08      	ldr	r3, [pc, #32]	; (12f0 <configure_console+0x68>)
    12d0:	0018      	movs	r0, r3
    12d2:	4b09      	ldr	r3, [pc, #36]	; (12f8 <configure_console+0x70>)
    12d4:	4798      	blx	r3
    12d6:	46c0      	nop			; (mov r8, r8)
    12d8:	46bd      	mov	sp, r7
    12da:	b018      	add	sp, #96	; 0x60
    12dc:	bd80      	pop	{r7, pc}
    12de:	46c0      	nop			; (mov r8, r8)
    12e0:	00001031 	.word	0x00001031
    12e4:	00580003 	.word	0x00580003
    12e8:	00590003 	.word	0x00590003
    12ec:	42001400 	.word	0x42001400
    12f0:	200038f4 	.word	0x200038f4
    12f4:	00001219 	.word	0x00001219
    12f8:	0000112d 	.word	0x0000112d

000012fc <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    12fc:	b580      	push	{r7, lr}
    12fe:	b082      	sub	sp, #8
    1300:	af00      	add	r7, sp, #0
    1302:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1304:	687b      	ldr	r3, [r7, #4]
    1306:	2200      	movs	r2, #0
    1308:	701a      	strb	r2, [r3, #0]
}
    130a:	46c0      	nop			; (mov r8, r8)
    130c:	46bd      	mov	sp, r7
    130e:	b002      	add	sp, #8
    1310:	bd80      	pop	{r7, pc}

00001312 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1312:	b5f0      	push	{r4, r5, r6, r7, lr}
    1314:	b08d      	sub	sp, #52	; 0x34
    1316:	af00      	add	r7, sp, #0
    1318:	60b8      	str	r0, [r7, #8]
    131a:	60f9      	str	r1, [r7, #12]
    131c:	603a      	str	r2, [r7, #0]
    131e:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1320:	2300      	movs	r3, #0
    1322:	2400      	movs	r4, #0
    1324:	623b      	str	r3, [r7, #32]
    1326:	627c      	str	r4, [r7, #36]	; 0x24
    1328:	2300      	movs	r3, #0
    132a:	2400      	movs	r4, #0
    132c:	61bb      	str	r3, [r7, #24]
    132e:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    1330:	233f      	movs	r3, #63	; 0x3f
    1332:	62fb      	str	r3, [r7, #44]	; 0x2c
    1334:	e053      	b.n	13de <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    1336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1338:	3b20      	subs	r3, #32
    133a:	2b00      	cmp	r3, #0
    133c:	db04      	blt.n	1348 <long_division+0x36>
    133e:	2201      	movs	r2, #1
    1340:	409a      	lsls	r2, r3
    1342:	0013      	movs	r3, r2
    1344:	617b      	str	r3, [r7, #20]
    1346:	e00b      	b.n	1360 <long_division+0x4e>
    1348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    134a:	2220      	movs	r2, #32
    134c:	1ad3      	subs	r3, r2, r3
    134e:	2201      	movs	r2, #1
    1350:	40da      	lsrs	r2, r3
    1352:	0013      	movs	r3, r2
    1354:	2100      	movs	r1, #0
    1356:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1358:	4091      	lsls	r1, r2
    135a:	000a      	movs	r2, r1
    135c:	4313      	orrs	r3, r2
    135e:	617b      	str	r3, [r7, #20]
    1360:	2201      	movs	r2, #1
    1362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1364:	409a      	lsls	r2, r3
    1366:	0013      	movs	r3, r2
    1368:	613b      	str	r3, [r7, #16]

		r = r << 1;
    136a:	69bb      	ldr	r3, [r7, #24]
    136c:	69fc      	ldr	r4, [r7, #28]
    136e:	18db      	adds	r3, r3, r3
    1370:	4164      	adcs	r4, r4
    1372:	61bb      	str	r3, [r7, #24]
    1374:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    1376:	68bb      	ldr	r3, [r7, #8]
    1378:	693a      	ldr	r2, [r7, #16]
    137a:	401a      	ands	r2, r3
    137c:	0015      	movs	r5, r2
    137e:	68fb      	ldr	r3, [r7, #12]
    1380:	697a      	ldr	r2, [r7, #20]
    1382:	401a      	ands	r2, r3
    1384:	0016      	movs	r6, r2
    1386:	002b      	movs	r3, r5
    1388:	4333      	orrs	r3, r6
    138a:	d007      	beq.n	139c <long_division+0x8a>
			r |= 0x01;
    138c:	69bb      	ldr	r3, [r7, #24]
    138e:	2201      	movs	r2, #1
    1390:	4313      	orrs	r3, r2
    1392:	61bb      	str	r3, [r7, #24]
    1394:	69fb      	ldr	r3, [r7, #28]
    1396:	2200      	movs	r2, #0
    1398:	4313      	orrs	r3, r2
    139a:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    139c:	687a      	ldr	r2, [r7, #4]
    139e:	69fb      	ldr	r3, [r7, #28]
    13a0:	429a      	cmp	r2, r3
    13a2:	d819      	bhi.n	13d8 <long_division+0xc6>
    13a4:	687a      	ldr	r2, [r7, #4]
    13a6:	69fb      	ldr	r3, [r7, #28]
    13a8:	429a      	cmp	r2, r3
    13aa:	d103      	bne.n	13b4 <long_division+0xa2>
    13ac:	683a      	ldr	r2, [r7, #0]
    13ae:	69bb      	ldr	r3, [r7, #24]
    13b0:	429a      	cmp	r2, r3
    13b2:	d811      	bhi.n	13d8 <long_division+0xc6>
			r = r - d;
    13b4:	69b9      	ldr	r1, [r7, #24]
    13b6:	69fa      	ldr	r2, [r7, #28]
    13b8:	683b      	ldr	r3, [r7, #0]
    13ba:	687c      	ldr	r4, [r7, #4]
    13bc:	1ac9      	subs	r1, r1, r3
    13be:	41a2      	sbcs	r2, r4
    13c0:	000b      	movs	r3, r1
    13c2:	0014      	movs	r4, r2
    13c4:	61bb      	str	r3, [r7, #24]
    13c6:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    13c8:	6a3a      	ldr	r2, [r7, #32]
    13ca:	693b      	ldr	r3, [r7, #16]
    13cc:	4313      	orrs	r3, r2
    13ce:	623b      	str	r3, [r7, #32]
    13d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    13d2:	697b      	ldr	r3, [r7, #20]
    13d4:	4313      	orrs	r3, r2
    13d6:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    13d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    13da:	3b01      	subs	r3, #1
    13dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    13de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    13e0:	2b00      	cmp	r3, #0
    13e2:	daa8      	bge.n	1336 <long_division+0x24>
		}
	}

	return q;
    13e4:	6a3b      	ldr	r3, [r7, #32]
    13e6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    13e8:	0018      	movs	r0, r3
    13ea:	0021      	movs	r1, r4
    13ec:	46bd      	mov	sp, r7
    13ee:	b00d      	add	sp, #52	; 0x34
    13f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000013f2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    13f2:	b580      	push	{r7, lr}
    13f4:	b086      	sub	sp, #24
    13f6:	af00      	add	r7, sp, #0
    13f8:	60f8      	str	r0, [r7, #12]
    13fa:	60b9      	str	r1, [r7, #8]
    13fc:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    13fe:	2316      	movs	r3, #22
    1400:	18fb      	adds	r3, r7, r3
    1402:	2200      	movs	r2, #0
    1404:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    1406:	68bb      	ldr	r3, [r7, #8]
    1408:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    140a:	68bb      	ldr	r3, [r7, #8]
    140c:	085a      	lsrs	r2, r3, #1
    140e:	68fb      	ldr	r3, [r7, #12]
    1410:	429a      	cmp	r2, r3
    1412:	d201      	bcs.n	1418 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1414:	2340      	movs	r3, #64	; 0x40
    1416:	e026      	b.n	1466 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    1418:	68bb      	ldr	r3, [r7, #8]
    141a:	085b      	lsrs	r3, r3, #1
    141c:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    141e:	e00a      	b.n	1436 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    1420:	693a      	ldr	r2, [r7, #16]
    1422:	68fb      	ldr	r3, [r7, #12]
    1424:	1ad3      	subs	r3, r2, r3
    1426:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    1428:	2316      	movs	r3, #22
    142a:	18fb      	adds	r3, r7, r3
    142c:	881a      	ldrh	r2, [r3, #0]
    142e:	2316      	movs	r3, #22
    1430:	18fb      	adds	r3, r7, r3
    1432:	3201      	adds	r2, #1
    1434:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    1436:	693a      	ldr	r2, [r7, #16]
    1438:	68fb      	ldr	r3, [r7, #12]
    143a:	429a      	cmp	r2, r3
    143c:	d2f0      	bcs.n	1420 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    143e:	2316      	movs	r3, #22
    1440:	18fb      	adds	r3, r7, r3
    1442:	2216      	movs	r2, #22
    1444:	18ba      	adds	r2, r7, r2
    1446:	8812      	ldrh	r2, [r2, #0]
    1448:	3a01      	subs	r2, #1
    144a:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    144c:	2316      	movs	r3, #22
    144e:	18fb      	adds	r3, r7, r3
    1450:	881b      	ldrh	r3, [r3, #0]
    1452:	2bff      	cmp	r3, #255	; 0xff
    1454:	d901      	bls.n	145a <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1456:	2340      	movs	r3, #64	; 0x40
    1458:	e005      	b.n	1466 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    145a:	687b      	ldr	r3, [r7, #4]
    145c:	2216      	movs	r2, #22
    145e:	18ba      	adds	r2, r7, r2
    1460:	8812      	ldrh	r2, [r2, #0]
    1462:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    1464:	2300      	movs	r3, #0
	}
}
    1466:	0018      	movs	r0, r3
    1468:	46bd      	mov	sp, r7
    146a:	b006      	add	sp, #24
    146c:	bd80      	pop	{r7, pc}
	...

00001470 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1470:	b5f0      	push	{r4, r5, r6, r7, lr}
    1472:	b0a1      	sub	sp, #132	; 0x84
    1474:	af00      	add	r7, sp, #0
    1476:	64f8      	str	r0, [r7, #76]	; 0x4c
    1478:	64b9      	str	r1, [r7, #72]	; 0x48
    147a:	647a      	str	r2, [r7, #68]	; 0x44
    147c:	2243      	movs	r2, #67	; 0x43
    147e:	18ba      	adds	r2, r7, r2
    1480:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    1482:	2300      	movs	r3, #0
    1484:	2400      	movs	r4, #0
    1486:	673b      	str	r3, [r7, #112]	; 0x70
    1488:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    148a:	2300      	movs	r3, #0
    148c:	2400      	movs	r4, #0
    148e:	66bb      	str	r3, [r7, #104]	; 0x68
    1490:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    1492:	2300      	movs	r3, #0
    1494:	2400      	movs	r4, #0
    1496:	67bb      	str	r3, [r7, #120]	; 0x78
    1498:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    149a:	2300      	movs	r3, #0
    149c:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    149e:	2358      	movs	r3, #88	; 0x58
    14a0:	2240      	movs	r2, #64	; 0x40
    14a2:	4694      	mov	ip, r2
    14a4:	44bc      	add	ip, r7
    14a6:	4463      	add	r3, ip
    14a8:	781a      	ldrb	r2, [r3, #0]
    14aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    14ac:	435a      	muls	r2, r3
    14ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    14b0:	429a      	cmp	r2, r3
    14b2:	d901      	bls.n	14b8 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    14b4:	2340      	movs	r3, #64	; 0x40
    14b6:	e0b3      	b.n	1620 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    14b8:	2343      	movs	r3, #67	; 0x43
    14ba:	18fb      	adds	r3, r7, r3
    14bc:	781b      	ldrb	r3, [r3, #0]
    14be:	2b00      	cmp	r3, #0
    14c0:	d13d      	bne.n	153e <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    14c2:	2358      	movs	r3, #88	; 0x58
    14c4:	2240      	movs	r2, #64	; 0x40
    14c6:	4694      	mov	ip, r2
    14c8:	44bc      	add	ip, r7
    14ca:	4463      	add	r3, ip
    14cc:	781b      	ldrb	r3, [r3, #0]
    14ce:	b2db      	uxtb	r3, r3
    14d0:	613b      	str	r3, [r7, #16]
    14d2:	2300      	movs	r3, #0
    14d4:	617b      	str	r3, [r7, #20]
    14d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    14d8:	60bb      	str	r3, [r7, #8]
    14da:	2300      	movs	r3, #0
    14dc:	60fb      	str	r3, [r7, #12]
    14de:	4c52      	ldr	r4, [pc, #328]	; (1628 <_sercom_get_async_baud_val+0x1b8>)
    14e0:	68ba      	ldr	r2, [r7, #8]
    14e2:	68fb      	ldr	r3, [r7, #12]
    14e4:	6938      	ldr	r0, [r7, #16]
    14e6:	6979      	ldr	r1, [r7, #20]
    14e8:	47a0      	blx	r4
    14ea:	0003      	movs	r3, r0
    14ec:	000c      	movs	r4, r1
    14ee:	001b      	movs	r3, r3
    14f0:	65fb      	str	r3, [r7, #92]	; 0x5c
    14f2:	2300      	movs	r3, #0
    14f4:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    14f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    14f8:	603b      	str	r3, [r7, #0]
    14fa:	2300      	movs	r3, #0
    14fc:	607b      	str	r3, [r7, #4]
    14fe:	6db8      	ldr	r0, [r7, #88]	; 0x58
    1500:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    1502:	683a      	ldr	r2, [r7, #0]
    1504:	687b      	ldr	r3, [r7, #4]
    1506:	4c49      	ldr	r4, [pc, #292]	; (162c <_sercom_get_async_baud_val+0x1bc>)
    1508:	47a0      	blx	r4
    150a:	0003      	movs	r3, r0
    150c:	000c      	movs	r4, r1
    150e:	673b      	str	r3, [r7, #112]	; 0x70
    1510:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1512:	2100      	movs	r1, #0
    1514:	2201      	movs	r2, #1
    1516:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1518:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    151a:	1ac9      	subs	r1, r1, r3
    151c:	41a2      	sbcs	r2, r4
    151e:	000b      	movs	r3, r1
    1520:	0014      	movs	r4, r2
    1522:	66bb      	str	r3, [r7, #104]	; 0x68
    1524:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    1526:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1528:	0c1b      	lsrs	r3, r3, #16
    152a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    152c:	0416      	lsls	r6, r2, #16
    152e:	431e      	orrs	r6, r3
    1530:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1532:	041d      	lsls	r5, r3, #16
    1534:	0033      	movs	r3, r6
    1536:	67bb      	str	r3, [r7, #120]	; 0x78
    1538:	2300      	movs	r3, #0
    153a:	67fb      	str	r3, [r7, #124]	; 0x7c
    153c:	e06a      	b.n	1614 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    153e:	2343      	movs	r3, #67	; 0x43
    1540:	18fb      	adds	r3, r7, r3
    1542:	781b      	ldrb	r3, [r3, #0]
    1544:	2b01      	cmp	r3, #1
    1546:	d165      	bne.n	1614 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    1548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    154a:	633b      	str	r3, [r7, #48]	; 0x30
    154c:	2300      	movs	r3, #0
    154e:	637b      	str	r3, [r7, #52]	; 0x34
    1550:	2358      	movs	r3, #88	; 0x58
    1552:	2240      	movs	r2, #64	; 0x40
    1554:	4694      	mov	ip, r2
    1556:	44bc      	add	ip, r7
    1558:	4463      	add	r3, ip
    155a:	781b      	ldrb	r3, [r3, #0]
    155c:	b2db      	uxtb	r3, r3
    155e:	62bb      	str	r3, [r7, #40]	; 0x28
    1560:	2300      	movs	r3, #0
    1562:	62fb      	str	r3, [r7, #44]	; 0x2c
    1564:	4c30      	ldr	r4, [pc, #192]	; (1628 <_sercom_get_async_baud_val+0x1b8>)
    1566:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    156a:	6b38      	ldr	r0, [r7, #48]	; 0x30
    156c:	6b79      	ldr	r1, [r7, #52]	; 0x34
    156e:	47a0      	blx	r4
    1570:	0003      	movs	r3, r0
    1572:	000c      	movs	r4, r1
    1574:	65bb      	str	r3, [r7, #88]	; 0x58
    1576:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    1578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    157a:	623b      	str	r3, [r7, #32]
    157c:	2300      	movs	r3, #0
    157e:	627b      	str	r3, [r7, #36]	; 0x24
    1580:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1582:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    1584:	001a      	movs	r2, r3
    1586:	0023      	movs	r3, r4
    1588:	6a38      	ldr	r0, [r7, #32]
    158a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    158c:	4c27      	ldr	r4, [pc, #156]	; (162c <_sercom_get_async_baud_val+0x1bc>)
    158e:	47a0      	blx	r4
    1590:	0003      	movs	r3, r0
    1592:	000c      	movs	r4, r1
    1594:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    1596:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    1598:	2380      	movs	r3, #128	; 0x80
    159a:	019b      	lsls	r3, r3, #6
    159c:	429a      	cmp	r2, r3
    159e:	d901      	bls.n	15a4 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    15a0:	2340      	movs	r3, #64	; 0x40
    15a2:	e03d      	b.n	1620 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    15a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    15a6:	61bb      	str	r3, [r7, #24]
    15a8:	2300      	movs	r3, #0
    15aa:	61fb      	str	r3, [r7, #28]
    15ac:	69b9      	ldr	r1, [r7, #24]
    15ae:	69fa      	ldr	r2, [r7, #28]
    15b0:	000b      	movs	r3, r1
    15b2:	0f5b      	lsrs	r3, r3, #29
    15b4:	0010      	movs	r0, r2
    15b6:	00c0      	lsls	r0, r0, #3
    15b8:	63f8      	str	r0, [r7, #60]	; 0x3c
    15ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    15bc:	4318      	orrs	r0, r3
    15be:	63f8      	str	r0, [r7, #60]	; 0x3c
    15c0:	000b      	movs	r3, r1
    15c2:	00db      	lsls	r3, r3, #3
    15c4:	63bb      	str	r3, [r7, #56]	; 0x38
    15c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    15c8:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    15ca:	001a      	movs	r2, r3
    15cc:	0023      	movs	r3, r4
    15ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    15d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    15d2:	4c16      	ldr	r4, [pc, #88]	; (162c <_sercom_get_async_baud_val+0x1bc>)
    15d4:	47a0      	blx	r4
    15d6:	0003      	movs	r3, r0
    15d8:	000c      	movs	r4, r1
    15da:	65bb      	str	r3, [r7, #88]	; 0x58
    15dc:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    15de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    15e0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    15e2:	b2d9      	uxtb	r1, r3
    15e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    15e6:	b2db      	uxtb	r3, r3
    15e8:	00db      	lsls	r3, r3, #3
    15ea:	b2da      	uxtb	r2, r3
    15ec:	2317      	movs	r3, #23
    15ee:	2040      	movs	r0, #64	; 0x40
    15f0:	4684      	mov	ip, r0
    15f2:	44bc      	add	ip, r7
    15f4:	4463      	add	r3, ip
    15f6:	1a8a      	subs	r2, r1, r2
    15f8:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    15fa:	2317      	movs	r3, #23
    15fc:	2240      	movs	r2, #64	; 0x40
    15fe:	4694      	mov	ip, r2
    1600:	44bc      	add	ip, r7
    1602:	4463      	add	r3, ip
    1604:	781b      	ldrb	r3, [r3, #0]
    1606:	035b      	lsls	r3, r3, #13
    1608:	001a      	movs	r2, r3
    160a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    160c:	4313      	orrs	r3, r2
    160e:	67bb      	str	r3, [r7, #120]	; 0x78
    1610:	2300      	movs	r3, #0
    1612:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    1614:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    1616:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    1618:	b29a      	uxth	r2, r3
    161a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    161c:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    161e:	2300      	movs	r3, #0
}
    1620:	0018      	movs	r0, r3
    1622:	46bd      	mov	sp, r7
    1624:	b021      	add	sp, #132	; 0x84
    1626:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1628:	000037d5 	.word	0x000037d5
    162c:	00001313 	.word	0x00001313

00001630 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1630:	b580      	push	{r7, lr}
    1632:	b084      	sub	sp, #16
    1634:	af00      	add	r7, sp, #0
    1636:	0002      	movs	r2, r0
    1638:	1dfb      	adds	r3, r7, #7
    163a:	701a      	strb	r2, [r3, #0]
    163c:	1dbb      	adds	r3, r7, #6
    163e:	1c0a      	adds	r2, r1, #0
    1640:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1642:	4b1a      	ldr	r3, [pc, #104]	; (16ac <sercom_set_gclk_generator+0x7c>)
    1644:	781b      	ldrb	r3, [r3, #0]
    1646:	2201      	movs	r2, #1
    1648:	4053      	eors	r3, r2
    164a:	b2db      	uxtb	r3, r3
    164c:	2b00      	cmp	r3, #0
    164e:	d103      	bne.n	1658 <sercom_set_gclk_generator+0x28>
    1650:	1dbb      	adds	r3, r7, #6
    1652:	781b      	ldrb	r3, [r3, #0]
    1654:	2b00      	cmp	r3, #0
    1656:	d01b      	beq.n	1690 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1658:	230c      	movs	r3, #12
    165a:	18fb      	adds	r3, r7, r3
    165c:	0018      	movs	r0, r3
    165e:	4b14      	ldr	r3, [pc, #80]	; (16b0 <sercom_set_gclk_generator+0x80>)
    1660:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    1662:	230c      	movs	r3, #12
    1664:	18fb      	adds	r3, r7, r3
    1666:	1dfa      	adds	r2, r7, #7
    1668:	7812      	ldrb	r2, [r2, #0]
    166a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    166c:	230c      	movs	r3, #12
    166e:	18fb      	adds	r3, r7, r3
    1670:	0019      	movs	r1, r3
    1672:	200f      	movs	r0, #15
    1674:	4b0f      	ldr	r3, [pc, #60]	; (16b4 <sercom_set_gclk_generator+0x84>)
    1676:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1678:	200f      	movs	r0, #15
    167a:	4b0f      	ldr	r3, [pc, #60]	; (16b8 <sercom_set_gclk_generator+0x88>)
    167c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    167e:	4b0b      	ldr	r3, [pc, #44]	; (16ac <sercom_set_gclk_generator+0x7c>)
    1680:	1dfa      	adds	r2, r7, #7
    1682:	7812      	ldrb	r2, [r2, #0]
    1684:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    1686:	4b09      	ldr	r3, [pc, #36]	; (16ac <sercom_set_gclk_generator+0x7c>)
    1688:	2201      	movs	r2, #1
    168a:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    168c:	2300      	movs	r3, #0
    168e:	e008      	b.n	16a2 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    1690:	4b06      	ldr	r3, [pc, #24]	; (16ac <sercom_set_gclk_generator+0x7c>)
    1692:	785b      	ldrb	r3, [r3, #1]
    1694:	1dfa      	adds	r2, r7, #7
    1696:	7812      	ldrb	r2, [r2, #0]
    1698:	429a      	cmp	r2, r3
    169a:	d101      	bne.n	16a0 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    169c:	2300      	movs	r3, #0
    169e:	e000      	b.n	16a2 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    16a0:	231d      	movs	r3, #29
}
    16a2:	0018      	movs	r0, r3
    16a4:	46bd      	mov	sp, r7
    16a6:	b004      	add	sp, #16
    16a8:	bd80      	pop	{r7, pc}
    16aa:	46c0      	nop			; (mov r8, r8)
    16ac:	20003928 	.word	0x20003928
    16b0:	000012fd 	.word	0x000012fd
    16b4:	00002fad 	.word	0x00002fad
    16b8:	00002fed 	.word	0x00002fed

000016bc <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    16bc:	b580      	push	{r7, lr}
    16be:	b082      	sub	sp, #8
    16c0:	af00      	add	r7, sp, #0
    16c2:	6078      	str	r0, [r7, #4]
    16c4:	000a      	movs	r2, r1
    16c6:	1cfb      	adds	r3, r7, #3
    16c8:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    16ca:	687b      	ldr	r3, [r7, #4]
    16cc:	4a4d      	ldr	r2, [pc, #308]	; (1804 <_sercom_get_default_pad+0x148>)
    16ce:	4293      	cmp	r3, r2
    16d0:	d03f      	beq.n	1752 <_sercom_get_default_pad+0x96>
    16d2:	4a4c      	ldr	r2, [pc, #304]	; (1804 <_sercom_get_default_pad+0x148>)
    16d4:	4293      	cmp	r3, r2
    16d6:	d806      	bhi.n	16e6 <_sercom_get_default_pad+0x2a>
    16d8:	4a4b      	ldr	r2, [pc, #300]	; (1808 <_sercom_get_default_pad+0x14c>)
    16da:	4293      	cmp	r3, r2
    16dc:	d00f      	beq.n	16fe <_sercom_get_default_pad+0x42>
    16de:	4a4b      	ldr	r2, [pc, #300]	; (180c <_sercom_get_default_pad+0x150>)
    16e0:	4293      	cmp	r3, r2
    16e2:	d021      	beq.n	1728 <_sercom_get_default_pad+0x6c>
    16e4:	e089      	b.n	17fa <_sercom_get_default_pad+0x13e>
    16e6:	4a4a      	ldr	r2, [pc, #296]	; (1810 <_sercom_get_default_pad+0x154>)
    16e8:	4293      	cmp	r3, r2
    16ea:	d100      	bne.n	16ee <_sercom_get_default_pad+0x32>
    16ec:	e05b      	b.n	17a6 <_sercom_get_default_pad+0xea>
    16ee:	4a49      	ldr	r2, [pc, #292]	; (1814 <_sercom_get_default_pad+0x158>)
    16f0:	4293      	cmp	r3, r2
    16f2:	d100      	bne.n	16f6 <_sercom_get_default_pad+0x3a>
    16f4:	e06c      	b.n	17d0 <_sercom_get_default_pad+0x114>
    16f6:	4a48      	ldr	r2, [pc, #288]	; (1818 <_sercom_get_default_pad+0x15c>)
    16f8:	4293      	cmp	r3, r2
    16fa:	d03f      	beq.n	177c <_sercom_get_default_pad+0xc0>
    16fc:	e07d      	b.n	17fa <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    16fe:	1cfb      	adds	r3, r7, #3
    1700:	781b      	ldrb	r3, [r3, #0]
    1702:	2b01      	cmp	r3, #1
    1704:	d00a      	beq.n	171c <_sercom_get_default_pad+0x60>
    1706:	dc02      	bgt.n	170e <_sercom_get_default_pad+0x52>
    1708:	2b00      	cmp	r3, #0
    170a:	d005      	beq.n	1718 <_sercom_get_default_pad+0x5c>
    170c:	e075      	b.n	17fa <_sercom_get_default_pad+0x13e>
    170e:	2b02      	cmp	r3, #2
    1710:	d006      	beq.n	1720 <_sercom_get_default_pad+0x64>
    1712:	2b03      	cmp	r3, #3
    1714:	d006      	beq.n	1724 <_sercom_get_default_pad+0x68>
    1716:	e070      	b.n	17fa <_sercom_get_default_pad+0x13e>
    1718:	4b40      	ldr	r3, [pc, #256]	; (181c <_sercom_get_default_pad+0x160>)
    171a:	e06f      	b.n	17fc <_sercom_get_default_pad+0x140>
    171c:	4b40      	ldr	r3, [pc, #256]	; (1820 <_sercom_get_default_pad+0x164>)
    171e:	e06d      	b.n	17fc <_sercom_get_default_pad+0x140>
    1720:	4b40      	ldr	r3, [pc, #256]	; (1824 <_sercom_get_default_pad+0x168>)
    1722:	e06b      	b.n	17fc <_sercom_get_default_pad+0x140>
    1724:	4b40      	ldr	r3, [pc, #256]	; (1828 <_sercom_get_default_pad+0x16c>)
    1726:	e069      	b.n	17fc <_sercom_get_default_pad+0x140>
    1728:	1cfb      	adds	r3, r7, #3
    172a:	781b      	ldrb	r3, [r3, #0]
    172c:	2b01      	cmp	r3, #1
    172e:	d00a      	beq.n	1746 <_sercom_get_default_pad+0x8a>
    1730:	dc02      	bgt.n	1738 <_sercom_get_default_pad+0x7c>
    1732:	2b00      	cmp	r3, #0
    1734:	d005      	beq.n	1742 <_sercom_get_default_pad+0x86>
    1736:	e060      	b.n	17fa <_sercom_get_default_pad+0x13e>
    1738:	2b02      	cmp	r3, #2
    173a:	d006      	beq.n	174a <_sercom_get_default_pad+0x8e>
    173c:	2b03      	cmp	r3, #3
    173e:	d006      	beq.n	174e <_sercom_get_default_pad+0x92>
    1740:	e05b      	b.n	17fa <_sercom_get_default_pad+0x13e>
    1742:	4b3a      	ldr	r3, [pc, #232]	; (182c <_sercom_get_default_pad+0x170>)
    1744:	e05a      	b.n	17fc <_sercom_get_default_pad+0x140>
    1746:	4b3a      	ldr	r3, [pc, #232]	; (1830 <_sercom_get_default_pad+0x174>)
    1748:	e058      	b.n	17fc <_sercom_get_default_pad+0x140>
    174a:	4b3a      	ldr	r3, [pc, #232]	; (1834 <_sercom_get_default_pad+0x178>)
    174c:	e056      	b.n	17fc <_sercom_get_default_pad+0x140>
    174e:	4b3a      	ldr	r3, [pc, #232]	; (1838 <_sercom_get_default_pad+0x17c>)
    1750:	e054      	b.n	17fc <_sercom_get_default_pad+0x140>
    1752:	1cfb      	adds	r3, r7, #3
    1754:	781b      	ldrb	r3, [r3, #0]
    1756:	2b01      	cmp	r3, #1
    1758:	d00a      	beq.n	1770 <_sercom_get_default_pad+0xb4>
    175a:	dc02      	bgt.n	1762 <_sercom_get_default_pad+0xa6>
    175c:	2b00      	cmp	r3, #0
    175e:	d005      	beq.n	176c <_sercom_get_default_pad+0xb0>
    1760:	e04b      	b.n	17fa <_sercom_get_default_pad+0x13e>
    1762:	2b02      	cmp	r3, #2
    1764:	d006      	beq.n	1774 <_sercom_get_default_pad+0xb8>
    1766:	2b03      	cmp	r3, #3
    1768:	d006      	beq.n	1778 <_sercom_get_default_pad+0xbc>
    176a:	e046      	b.n	17fa <_sercom_get_default_pad+0x13e>
    176c:	4b33      	ldr	r3, [pc, #204]	; (183c <_sercom_get_default_pad+0x180>)
    176e:	e045      	b.n	17fc <_sercom_get_default_pad+0x140>
    1770:	4b33      	ldr	r3, [pc, #204]	; (1840 <_sercom_get_default_pad+0x184>)
    1772:	e043      	b.n	17fc <_sercom_get_default_pad+0x140>
    1774:	4b33      	ldr	r3, [pc, #204]	; (1844 <_sercom_get_default_pad+0x188>)
    1776:	e041      	b.n	17fc <_sercom_get_default_pad+0x140>
    1778:	4b33      	ldr	r3, [pc, #204]	; (1848 <_sercom_get_default_pad+0x18c>)
    177a:	e03f      	b.n	17fc <_sercom_get_default_pad+0x140>
    177c:	1cfb      	adds	r3, r7, #3
    177e:	781b      	ldrb	r3, [r3, #0]
    1780:	2b01      	cmp	r3, #1
    1782:	d00a      	beq.n	179a <_sercom_get_default_pad+0xde>
    1784:	dc02      	bgt.n	178c <_sercom_get_default_pad+0xd0>
    1786:	2b00      	cmp	r3, #0
    1788:	d005      	beq.n	1796 <_sercom_get_default_pad+0xda>
    178a:	e036      	b.n	17fa <_sercom_get_default_pad+0x13e>
    178c:	2b02      	cmp	r3, #2
    178e:	d006      	beq.n	179e <_sercom_get_default_pad+0xe2>
    1790:	2b03      	cmp	r3, #3
    1792:	d006      	beq.n	17a2 <_sercom_get_default_pad+0xe6>
    1794:	e031      	b.n	17fa <_sercom_get_default_pad+0x13e>
    1796:	4b2d      	ldr	r3, [pc, #180]	; (184c <_sercom_get_default_pad+0x190>)
    1798:	e030      	b.n	17fc <_sercom_get_default_pad+0x140>
    179a:	4b2d      	ldr	r3, [pc, #180]	; (1850 <_sercom_get_default_pad+0x194>)
    179c:	e02e      	b.n	17fc <_sercom_get_default_pad+0x140>
    179e:	4b2d      	ldr	r3, [pc, #180]	; (1854 <_sercom_get_default_pad+0x198>)
    17a0:	e02c      	b.n	17fc <_sercom_get_default_pad+0x140>
    17a2:	4b2d      	ldr	r3, [pc, #180]	; (1858 <_sercom_get_default_pad+0x19c>)
    17a4:	e02a      	b.n	17fc <_sercom_get_default_pad+0x140>
    17a6:	1cfb      	adds	r3, r7, #3
    17a8:	781b      	ldrb	r3, [r3, #0]
    17aa:	2b01      	cmp	r3, #1
    17ac:	d00a      	beq.n	17c4 <_sercom_get_default_pad+0x108>
    17ae:	dc02      	bgt.n	17b6 <_sercom_get_default_pad+0xfa>
    17b0:	2b00      	cmp	r3, #0
    17b2:	d005      	beq.n	17c0 <_sercom_get_default_pad+0x104>
    17b4:	e021      	b.n	17fa <_sercom_get_default_pad+0x13e>
    17b6:	2b02      	cmp	r3, #2
    17b8:	d006      	beq.n	17c8 <_sercom_get_default_pad+0x10c>
    17ba:	2b03      	cmp	r3, #3
    17bc:	d006      	beq.n	17cc <_sercom_get_default_pad+0x110>
    17be:	e01c      	b.n	17fa <_sercom_get_default_pad+0x13e>
    17c0:	4b26      	ldr	r3, [pc, #152]	; (185c <_sercom_get_default_pad+0x1a0>)
    17c2:	e01b      	b.n	17fc <_sercom_get_default_pad+0x140>
    17c4:	4b26      	ldr	r3, [pc, #152]	; (1860 <_sercom_get_default_pad+0x1a4>)
    17c6:	e019      	b.n	17fc <_sercom_get_default_pad+0x140>
    17c8:	4b26      	ldr	r3, [pc, #152]	; (1864 <_sercom_get_default_pad+0x1a8>)
    17ca:	e017      	b.n	17fc <_sercom_get_default_pad+0x140>
    17cc:	4b26      	ldr	r3, [pc, #152]	; (1868 <_sercom_get_default_pad+0x1ac>)
    17ce:	e015      	b.n	17fc <_sercom_get_default_pad+0x140>
    17d0:	1cfb      	adds	r3, r7, #3
    17d2:	781b      	ldrb	r3, [r3, #0]
    17d4:	2b01      	cmp	r3, #1
    17d6:	d00a      	beq.n	17ee <_sercom_get_default_pad+0x132>
    17d8:	dc02      	bgt.n	17e0 <_sercom_get_default_pad+0x124>
    17da:	2b00      	cmp	r3, #0
    17dc:	d005      	beq.n	17ea <_sercom_get_default_pad+0x12e>
    17de:	e00c      	b.n	17fa <_sercom_get_default_pad+0x13e>
    17e0:	2b02      	cmp	r3, #2
    17e2:	d006      	beq.n	17f2 <_sercom_get_default_pad+0x136>
    17e4:	2b03      	cmp	r3, #3
    17e6:	d006      	beq.n	17f6 <_sercom_get_default_pad+0x13a>
    17e8:	e007      	b.n	17fa <_sercom_get_default_pad+0x13e>
    17ea:	4b20      	ldr	r3, [pc, #128]	; (186c <_sercom_get_default_pad+0x1b0>)
    17ec:	e006      	b.n	17fc <_sercom_get_default_pad+0x140>
    17ee:	4b20      	ldr	r3, [pc, #128]	; (1870 <_sercom_get_default_pad+0x1b4>)
    17f0:	e004      	b.n	17fc <_sercom_get_default_pad+0x140>
    17f2:	4b20      	ldr	r3, [pc, #128]	; (1874 <_sercom_get_default_pad+0x1b8>)
    17f4:	e002      	b.n	17fc <_sercom_get_default_pad+0x140>
    17f6:	4b20      	ldr	r3, [pc, #128]	; (1878 <_sercom_get_default_pad+0x1bc>)
    17f8:	e000      	b.n	17fc <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    17fa:	2300      	movs	r3, #0
}
    17fc:	0018      	movs	r0, r3
    17fe:	46bd      	mov	sp, r7
    1800:	b002      	add	sp, #8
    1802:	bd80      	pop	{r7, pc}
    1804:	42000c00 	.word	0x42000c00
    1808:	42000400 	.word	0x42000400
    180c:	42000800 	.word	0x42000800
    1810:	42001400 	.word	0x42001400
    1814:	42001800 	.word	0x42001800
    1818:	42001000 	.word	0x42001000
    181c:	00080002 	.word	0x00080002
    1820:	00090002 	.word	0x00090002
    1824:	000a0002 	.word	0x000a0002
    1828:	000b0002 	.word	0x000b0002
    182c:	00100002 	.word	0x00100002
    1830:	00110002 	.word	0x00110002
    1834:	00120002 	.word	0x00120002
    1838:	00130002 	.word	0x00130002
    183c:	00160003 	.word	0x00160003
    1840:	00170003 	.word	0x00170003
    1844:	00140003 	.word	0x00140003
    1848:	00150003 	.word	0x00150003
    184c:	00220002 	.word	0x00220002
    1850:	00350002 	.word	0x00350002
    1854:	00200002 	.word	0x00200002
    1858:	00210002 	.word	0x00210002
    185c:	000c0002 	.word	0x000c0002
    1860:	000d0002 	.word	0x000d0002
    1864:	000e0002 	.word	0x000e0002
    1868:	000f0002 	.word	0x000f0002
    186c:	003e0003 	.word	0x003e0003
    1870:	003f0003 	.word	0x003f0003
    1874:	00360003 	.word	0x00360003
    1878:	00370003 	.word	0x00370003

0000187c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    187c:	b590      	push	{r4, r7, lr}
    187e:	b08b      	sub	sp, #44	; 0x2c
    1880:	af00      	add	r7, sp, #0
    1882:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1884:	230c      	movs	r3, #12
    1886:	18fb      	adds	r3, r7, r3
    1888:	4a0f      	ldr	r2, [pc, #60]	; (18c8 <_sercom_get_sercom_inst_index+0x4c>)
    188a:	ca13      	ldmia	r2!, {r0, r1, r4}
    188c:	c313      	stmia	r3!, {r0, r1, r4}
    188e:	ca13      	ldmia	r2!, {r0, r1, r4}
    1890:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1892:	2300      	movs	r3, #0
    1894:	627b      	str	r3, [r7, #36]	; 0x24
    1896:	e00e      	b.n	18b6 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1898:	230c      	movs	r3, #12
    189a:	18fb      	adds	r3, r7, r3
    189c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    189e:	0092      	lsls	r2, r2, #2
    18a0:	58d3      	ldr	r3, [r2, r3]
    18a2:	001a      	movs	r2, r3
    18a4:	687b      	ldr	r3, [r7, #4]
    18a6:	429a      	cmp	r2, r3
    18a8:	d102      	bne.n	18b0 <_sercom_get_sercom_inst_index+0x34>
			return i;
    18aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    18ac:	b2db      	uxtb	r3, r3
    18ae:	e006      	b.n	18be <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    18b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    18b2:	3301      	adds	r3, #1
    18b4:	627b      	str	r3, [r7, #36]	; 0x24
    18b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    18b8:	2b05      	cmp	r3, #5
    18ba:	d9ed      	bls.n	1898 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    18bc:	2300      	movs	r3, #0
}
    18be:	0018      	movs	r0, r3
    18c0:	46bd      	mov	sp, r7
    18c2:	b00b      	add	sp, #44	; 0x2c
    18c4:	bd90      	pop	{r4, r7, pc}
    18c6:	46c0      	nop			; (mov r8, r8)
    18c8:	0000436c 	.word	0x0000436c

000018cc <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    18cc:	b580      	push	{r7, lr}
    18ce:	b082      	sub	sp, #8
    18d0:	af00      	add	r7, sp, #0
    18d2:	0002      	movs	r2, r0
    18d4:	1dfb      	adds	r3, r7, #7
    18d6:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    18d8:	46c0      	nop			; (mov r8, r8)
    18da:	46bd      	mov	sp, r7
    18dc:	b002      	add	sp, #8
    18de:	bd80      	pop	{r7, pc}

000018e0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    18e0:	b580      	push	{r7, lr}
    18e2:	b084      	sub	sp, #16
    18e4:	af00      	add	r7, sp, #0
    18e6:	0002      	movs	r2, r0
    18e8:	6039      	str	r1, [r7, #0]
    18ea:	1dfb      	adds	r3, r7, #7
    18ec:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    18ee:	4b13      	ldr	r3, [pc, #76]	; (193c <_sercom_set_handler+0x5c>)
    18f0:	781b      	ldrb	r3, [r3, #0]
    18f2:	2201      	movs	r2, #1
    18f4:	4053      	eors	r3, r2
    18f6:	b2db      	uxtb	r3, r3
    18f8:	2b00      	cmp	r3, #0
    18fa:	d015      	beq.n	1928 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    18fc:	2300      	movs	r3, #0
    18fe:	60fb      	str	r3, [r7, #12]
    1900:	e00c      	b.n	191c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1902:	4b0f      	ldr	r3, [pc, #60]	; (1940 <_sercom_set_handler+0x60>)
    1904:	68fa      	ldr	r2, [r7, #12]
    1906:	0092      	lsls	r2, r2, #2
    1908:	490e      	ldr	r1, [pc, #56]	; (1944 <_sercom_set_handler+0x64>)
    190a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    190c:	4b0e      	ldr	r3, [pc, #56]	; (1948 <_sercom_set_handler+0x68>)
    190e:	68fa      	ldr	r2, [r7, #12]
    1910:	0092      	lsls	r2, r2, #2
    1912:	2100      	movs	r1, #0
    1914:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1916:	68fb      	ldr	r3, [r7, #12]
    1918:	3301      	adds	r3, #1
    191a:	60fb      	str	r3, [r7, #12]
    191c:	68fb      	ldr	r3, [r7, #12]
    191e:	2b05      	cmp	r3, #5
    1920:	d9ef      	bls.n	1902 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    1922:	4b06      	ldr	r3, [pc, #24]	; (193c <_sercom_set_handler+0x5c>)
    1924:	2201      	movs	r2, #1
    1926:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1928:	1dfb      	adds	r3, r7, #7
    192a:	781a      	ldrb	r2, [r3, #0]
    192c:	4b04      	ldr	r3, [pc, #16]	; (1940 <_sercom_set_handler+0x60>)
    192e:	0092      	lsls	r2, r2, #2
    1930:	6839      	ldr	r1, [r7, #0]
    1932:	50d1      	str	r1, [r2, r3]
}
    1934:	46c0      	nop			; (mov r8, r8)
    1936:	46bd      	mov	sp, r7
    1938:	b004      	add	sp, #16
    193a:	bd80      	pop	{r7, pc}
    193c:	2000392a 	.word	0x2000392a
    1940:	2000392c 	.word	0x2000392c
    1944:	000018cd 	.word	0x000018cd
    1948:	20003984 	.word	0x20003984

0000194c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    194c:	b590      	push	{r4, r7, lr}
    194e:	b085      	sub	sp, #20
    1950:	af00      	add	r7, sp, #0
    1952:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1954:	2308      	movs	r3, #8
    1956:	18fb      	adds	r3, r7, r3
    1958:	4a0b      	ldr	r2, [pc, #44]	; (1988 <_sercom_get_interrupt_vector+0x3c>)
    195a:	6811      	ldr	r1, [r2, #0]
    195c:	6019      	str	r1, [r3, #0]
    195e:	8892      	ldrh	r2, [r2, #4]
    1960:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1962:	230f      	movs	r3, #15
    1964:	18fc      	adds	r4, r7, r3
    1966:	687b      	ldr	r3, [r7, #4]
    1968:	0018      	movs	r0, r3
    196a:	4b08      	ldr	r3, [pc, #32]	; (198c <_sercom_get_interrupt_vector+0x40>)
    196c:	4798      	blx	r3
    196e:	0003      	movs	r3, r0
    1970:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1972:	230f      	movs	r3, #15
    1974:	18fb      	adds	r3, r7, r3
    1976:	781b      	ldrb	r3, [r3, #0]
    1978:	2208      	movs	r2, #8
    197a:	18ba      	adds	r2, r7, r2
    197c:	5cd3      	ldrb	r3, [r2, r3]
    197e:	b25b      	sxtb	r3, r3
}
    1980:	0018      	movs	r0, r3
    1982:	46bd      	mov	sp, r7
    1984:	b005      	add	sp, #20
    1986:	bd90      	pop	{r4, r7, pc}
    1988:	00004384 	.word	0x00004384
    198c:	0000187d 	.word	0x0000187d

00001990 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1990:	b580      	push	{r7, lr}
    1992:	af00      	add	r7, sp, #0
    1994:	4b03      	ldr	r3, [pc, #12]	; (19a4 <SERCOM0_Handler+0x14>)
    1996:	681b      	ldr	r3, [r3, #0]
    1998:	2000      	movs	r0, #0
    199a:	4798      	blx	r3
    199c:	46c0      	nop			; (mov r8, r8)
    199e:	46bd      	mov	sp, r7
    19a0:	bd80      	pop	{r7, pc}
    19a2:	46c0      	nop			; (mov r8, r8)
    19a4:	2000392c 	.word	0x2000392c

000019a8 <SERCOM1_Handler>:
    19a8:	b580      	push	{r7, lr}
    19aa:	af00      	add	r7, sp, #0
    19ac:	4b03      	ldr	r3, [pc, #12]	; (19bc <SERCOM1_Handler+0x14>)
    19ae:	685b      	ldr	r3, [r3, #4]
    19b0:	2001      	movs	r0, #1
    19b2:	4798      	blx	r3
    19b4:	46c0      	nop			; (mov r8, r8)
    19b6:	46bd      	mov	sp, r7
    19b8:	bd80      	pop	{r7, pc}
    19ba:	46c0      	nop			; (mov r8, r8)
    19bc:	2000392c 	.word	0x2000392c

000019c0 <SERCOM2_Handler>:
    19c0:	b580      	push	{r7, lr}
    19c2:	af00      	add	r7, sp, #0
    19c4:	4b03      	ldr	r3, [pc, #12]	; (19d4 <SERCOM2_Handler+0x14>)
    19c6:	689b      	ldr	r3, [r3, #8]
    19c8:	2002      	movs	r0, #2
    19ca:	4798      	blx	r3
    19cc:	46c0      	nop			; (mov r8, r8)
    19ce:	46bd      	mov	sp, r7
    19d0:	bd80      	pop	{r7, pc}
    19d2:	46c0      	nop			; (mov r8, r8)
    19d4:	2000392c 	.word	0x2000392c

000019d8 <SERCOM3_Handler>:
    19d8:	b580      	push	{r7, lr}
    19da:	af00      	add	r7, sp, #0
    19dc:	4b03      	ldr	r3, [pc, #12]	; (19ec <SERCOM3_Handler+0x14>)
    19de:	68db      	ldr	r3, [r3, #12]
    19e0:	2003      	movs	r0, #3
    19e2:	4798      	blx	r3
    19e4:	46c0      	nop			; (mov r8, r8)
    19e6:	46bd      	mov	sp, r7
    19e8:	bd80      	pop	{r7, pc}
    19ea:	46c0      	nop			; (mov r8, r8)
    19ec:	2000392c 	.word	0x2000392c

000019f0 <SERCOM4_Handler>:
    19f0:	b580      	push	{r7, lr}
    19f2:	af00      	add	r7, sp, #0
    19f4:	4b03      	ldr	r3, [pc, #12]	; (1a04 <SERCOM4_Handler+0x14>)
    19f6:	691b      	ldr	r3, [r3, #16]
    19f8:	2004      	movs	r0, #4
    19fa:	4798      	blx	r3
    19fc:	46c0      	nop			; (mov r8, r8)
    19fe:	46bd      	mov	sp, r7
    1a00:	bd80      	pop	{r7, pc}
    1a02:	46c0      	nop			; (mov r8, r8)
    1a04:	2000392c 	.word	0x2000392c

00001a08 <SERCOM5_Handler>:
    1a08:	b580      	push	{r7, lr}
    1a0a:	af00      	add	r7, sp, #0
    1a0c:	4b03      	ldr	r3, [pc, #12]	; (1a1c <SERCOM5_Handler+0x14>)
    1a0e:	695b      	ldr	r3, [r3, #20]
    1a10:	2005      	movs	r0, #5
    1a12:	4798      	blx	r3
    1a14:	46c0      	nop			; (mov r8, r8)
    1a16:	46bd      	mov	sp, r7
    1a18:	bd80      	pop	{r7, pc}
    1a1a:	46c0      	nop			; (mov r8, r8)
    1a1c:	2000392c 	.word	0x2000392c

00001a20 <system_gclk_chan_get_config_defaults>:
{
    1a20:	b580      	push	{r7, lr}
    1a22:	b082      	sub	sp, #8
    1a24:	af00      	add	r7, sp, #0
    1a26:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    1a28:	687b      	ldr	r3, [r7, #4]
    1a2a:	2200      	movs	r2, #0
    1a2c:	701a      	strb	r2, [r3, #0]
}
    1a2e:	46c0      	nop			; (mov r8, r8)
    1a30:	46bd      	mov	sp, r7
    1a32:	b002      	add	sp, #8
    1a34:	bd80      	pop	{r7, pc}
	...

00001a38 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    1a38:	b580      	push	{r7, lr}
    1a3a:	b082      	sub	sp, #8
    1a3c:	af00      	add	r7, sp, #0
    1a3e:	0002      	movs	r2, r0
    1a40:	6039      	str	r1, [r7, #0]
    1a42:	1dfb      	adds	r3, r7, #7
    1a44:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1a46:	1dfb      	adds	r3, r7, #7
    1a48:	781b      	ldrb	r3, [r3, #0]
    1a4a:	2b01      	cmp	r3, #1
    1a4c:	d00a      	beq.n	1a64 <system_apb_clock_set_mask+0x2c>
    1a4e:	2b02      	cmp	r3, #2
    1a50:	d00f      	beq.n	1a72 <system_apb_clock_set_mask+0x3a>
    1a52:	2b00      	cmp	r3, #0
    1a54:	d114      	bne.n	1a80 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    1a56:	4b0e      	ldr	r3, [pc, #56]	; (1a90 <system_apb_clock_set_mask+0x58>)
    1a58:	4a0d      	ldr	r2, [pc, #52]	; (1a90 <system_apb_clock_set_mask+0x58>)
    1a5a:	6951      	ldr	r1, [r2, #20]
    1a5c:	683a      	ldr	r2, [r7, #0]
    1a5e:	430a      	orrs	r2, r1
    1a60:	615a      	str	r2, [r3, #20]
			break;
    1a62:	e00f      	b.n	1a84 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
    1a64:	4b0a      	ldr	r3, [pc, #40]	; (1a90 <system_apb_clock_set_mask+0x58>)
    1a66:	4a0a      	ldr	r2, [pc, #40]	; (1a90 <system_apb_clock_set_mask+0x58>)
    1a68:	6991      	ldr	r1, [r2, #24]
    1a6a:	683a      	ldr	r2, [r7, #0]
    1a6c:	430a      	orrs	r2, r1
    1a6e:	619a      	str	r2, [r3, #24]
			break;
    1a70:	e008      	b.n	1a84 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    1a72:	4b07      	ldr	r3, [pc, #28]	; (1a90 <system_apb_clock_set_mask+0x58>)
    1a74:	4a06      	ldr	r2, [pc, #24]	; (1a90 <system_apb_clock_set_mask+0x58>)
    1a76:	69d1      	ldr	r1, [r2, #28]
    1a78:	683a      	ldr	r2, [r7, #0]
    1a7a:	430a      	orrs	r2, r1
    1a7c:	61da      	str	r2, [r3, #28]
			break;
    1a7e:	e001      	b.n	1a84 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1a80:	2317      	movs	r3, #23
    1a82:	e000      	b.n	1a86 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    1a84:	2300      	movs	r3, #0
}
    1a86:	0018      	movs	r0, r3
    1a88:	46bd      	mov	sp, r7
    1a8a:	b002      	add	sp, #8
    1a8c:	bd80      	pop	{r7, pc}
    1a8e:	46c0      	nop			; (mov r8, r8)
    1a90:	40000800 	.word	0x40000800

00001a94 <system_pinmux_get_config_defaults>:
{
    1a94:	b580      	push	{r7, lr}
    1a96:	b082      	sub	sp, #8
    1a98:	af00      	add	r7, sp, #0
    1a9a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1a9c:	687b      	ldr	r3, [r7, #4]
    1a9e:	2280      	movs	r2, #128	; 0x80
    1aa0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1aa2:	687b      	ldr	r3, [r7, #4]
    1aa4:	2200      	movs	r2, #0
    1aa6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	2201      	movs	r2, #1
    1aac:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1aae:	687b      	ldr	r3, [r7, #4]
    1ab0:	2200      	movs	r2, #0
    1ab2:	70da      	strb	r2, [r3, #3]
}
    1ab4:	46c0      	nop			; (mov r8, r8)
    1ab6:	46bd      	mov	sp, r7
    1ab8:	b002      	add	sp, #8
    1aba:	bd80      	pop	{r7, pc}

00001abc <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    1abc:	b580      	push	{r7, lr}
    1abe:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1ac0:	4b05      	ldr	r3, [pc, #20]	; (1ad8 <system_is_debugger_present+0x1c>)
    1ac2:	789b      	ldrb	r3, [r3, #2]
    1ac4:	b2db      	uxtb	r3, r3
    1ac6:	001a      	movs	r2, r3
    1ac8:	2302      	movs	r3, #2
    1aca:	4013      	ands	r3, r2
    1acc:	1e5a      	subs	r2, r3, #1
    1ace:	4193      	sbcs	r3, r2
    1ad0:	b2db      	uxtb	r3, r3
}
    1ad2:	0018      	movs	r0, r3
    1ad4:	46bd      	mov	sp, r7
    1ad6:	bd80      	pop	{r7, pc}
    1ad8:	41002000 	.word	0x41002000

00001adc <usart_is_syncing>:
{
    1adc:	b580      	push	{r7, lr}
    1ade:	b084      	sub	sp, #16
    1ae0:	af00      	add	r7, sp, #0
    1ae2:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1ae4:	687b      	ldr	r3, [r7, #4]
    1ae6:	681b      	ldr	r3, [r3, #0]
    1ae8:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    1aea:	68fb      	ldr	r3, [r7, #12]
    1aec:	69db      	ldr	r3, [r3, #28]
    1aee:	1e5a      	subs	r2, r3, #1
    1af0:	4193      	sbcs	r3, r2
    1af2:	b2db      	uxtb	r3, r3
}
    1af4:	0018      	movs	r0, r3
    1af6:	46bd      	mov	sp, r7
    1af8:	b004      	add	sp, #16
    1afa:	bd80      	pop	{r7, pc}

00001afc <_usart_wait_for_sync>:
{
    1afc:	b580      	push	{r7, lr}
    1afe:	b082      	sub	sp, #8
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    1b04:	46c0      	nop			; (mov r8, r8)
    1b06:	687b      	ldr	r3, [r7, #4]
    1b08:	0018      	movs	r0, r3
    1b0a:	4b04      	ldr	r3, [pc, #16]	; (1b1c <_usart_wait_for_sync+0x20>)
    1b0c:	4798      	blx	r3
    1b0e:	1e03      	subs	r3, r0, #0
    1b10:	d1f9      	bne.n	1b06 <_usart_wait_for_sync+0xa>
}
    1b12:	46c0      	nop			; (mov r8, r8)
    1b14:	46bd      	mov	sp, r7
    1b16:	b002      	add	sp, #8
    1b18:	bd80      	pop	{r7, pc}
    1b1a:	46c0      	nop			; (mov r8, r8)
    1b1c:	00001add 	.word	0x00001add

00001b20 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    1b20:	b5b0      	push	{r4, r5, r7, lr}
    1b22:	b08e      	sub	sp, #56	; 0x38
    1b24:	af02      	add	r7, sp, #8
    1b26:	6078      	str	r0, [r7, #4]
    1b28:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1b2a:	687b      	ldr	r3, [r7, #4]
    1b2c:	681b      	ldr	r3, [r3, #0]
    1b2e:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1b30:	687b      	ldr	r3, [r7, #4]
    1b32:	681b      	ldr	r3, [r3, #0]
    1b34:	0018      	movs	r0, r3
    1b36:	4bc3      	ldr	r3, [pc, #780]	; (1e44 <_usart_set_config+0x324>)
    1b38:	4798      	blx	r3
    1b3a:	0003      	movs	r3, r0
    1b3c:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1b3e:	697b      	ldr	r3, [r7, #20]
    1b40:	3310      	adds	r3, #16
    1b42:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    1b44:	2300      	movs	r3, #0
    1b46:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t ctrlb = 0;
    1b48:	2300      	movs	r3, #0
    1b4a:	62bb      	str	r3, [r7, #40]	; 0x28
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
    1b4c:	2300      	movs	r3, #0
    1b4e:	627b      	str	r3, [r7, #36]	; 0x24
#endif
	uint16_t baud  = 0;
    1b50:	230e      	movs	r3, #14
    1b52:	18fb      	adds	r3, r7, r3
    1b54:	2200      	movs	r2, #0
    1b56:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1b58:	231f      	movs	r3, #31
    1b5a:	18fb      	adds	r3, r7, r3
    1b5c:	2200      	movs	r2, #0
    1b5e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1b60:	231e      	movs	r3, #30
    1b62:	18fb      	adds	r3, r7, r3
    1b64:	2210      	movs	r2, #16
    1b66:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    1b68:	683b      	ldr	r3, [r7, #0]
    1b6a:	8a1b      	ldrh	r3, [r3, #16]
    1b6c:	2280      	movs	r2, #128	; 0x80
    1b6e:	01d2      	lsls	r2, r2, #7
    1b70:	4293      	cmp	r3, r2
    1b72:	d01c      	beq.n	1bae <_usart_set_config+0x8e>
    1b74:	2280      	movs	r2, #128	; 0x80
    1b76:	01d2      	lsls	r2, r2, #7
    1b78:	4293      	cmp	r3, r2
    1b7a:	dc06      	bgt.n	1b8a <_usart_set_config+0x6a>
    1b7c:	2b00      	cmp	r3, #0
    1b7e:	d00d      	beq.n	1b9c <_usart_set_config+0x7c>
    1b80:	2280      	movs	r2, #128	; 0x80
    1b82:	0192      	lsls	r2, r2, #6
    1b84:	4293      	cmp	r3, r2
    1b86:	d024      	beq.n	1bd2 <_usart_set_config+0xb2>
    1b88:	e035      	b.n	1bf6 <_usart_set_config+0xd6>
    1b8a:	22c0      	movs	r2, #192	; 0xc0
    1b8c:	01d2      	lsls	r2, r2, #7
    1b8e:	4293      	cmp	r3, r2
    1b90:	d028      	beq.n	1be4 <_usart_set_config+0xc4>
    1b92:	2280      	movs	r2, #128	; 0x80
    1b94:	0212      	lsls	r2, r2, #8
    1b96:	4293      	cmp	r3, r2
    1b98:	d012      	beq.n	1bc0 <_usart_set_config+0xa0>
    1b9a:	e02c      	b.n	1bf6 <_usart_set_config+0xd6>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1b9c:	231f      	movs	r3, #31
    1b9e:	18fb      	adds	r3, r7, r3
    1ba0:	2200      	movs	r2, #0
    1ba2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1ba4:	231e      	movs	r3, #30
    1ba6:	18fb      	adds	r3, r7, r3
    1ba8:	2210      	movs	r2, #16
    1baa:	701a      	strb	r2, [r3, #0]
			break;
    1bac:	e023      	b.n	1bf6 <_usart_set_config+0xd6>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1bae:	231f      	movs	r3, #31
    1bb0:	18fb      	adds	r3, r7, r3
    1bb2:	2200      	movs	r2, #0
    1bb4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1bb6:	231e      	movs	r3, #30
    1bb8:	18fb      	adds	r3, r7, r3
    1bba:	2208      	movs	r2, #8
    1bbc:	701a      	strb	r2, [r3, #0]
			break;
    1bbe:	e01a      	b.n	1bf6 <_usart_set_config+0xd6>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1bc0:	231f      	movs	r3, #31
    1bc2:	18fb      	adds	r3, r7, r3
    1bc4:	2200      	movs	r2, #0
    1bc6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1bc8:	231e      	movs	r3, #30
    1bca:	18fb      	adds	r3, r7, r3
    1bcc:	2203      	movs	r2, #3
    1bce:	701a      	strb	r2, [r3, #0]
			break;
    1bd0:	e011      	b.n	1bf6 <_usart_set_config+0xd6>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1bd2:	231f      	movs	r3, #31
    1bd4:	18fb      	adds	r3, r7, r3
    1bd6:	2201      	movs	r2, #1
    1bd8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1bda:	231e      	movs	r3, #30
    1bdc:	18fb      	adds	r3, r7, r3
    1bde:	2210      	movs	r2, #16
    1be0:	701a      	strb	r2, [r3, #0]
			break;
    1be2:	e008      	b.n	1bf6 <_usart_set_config+0xd6>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1be4:	231f      	movs	r3, #31
    1be6:	18fb      	adds	r3, r7, r3
    1be8:	2201      	movs	r2, #1
    1bea:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1bec:	231e      	movs	r3, #30
    1bee:	18fb      	adds	r3, r7, r3
    1bf0:	2208      	movs	r2, #8
    1bf2:	701a      	strb	r2, [r3, #0]
			break;
    1bf4:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1bf6:	683b      	ldr	r3, [r7, #0]
    1bf8:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    1bfa:	683b      	ldr	r3, [r7, #0]
    1bfc:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    1bfe:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1c00:	683b      	ldr	r3, [r7, #0]
    1c02:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    1c04:	4313      	orrs	r3, r2
		config->sample_rate |
    1c06:	683a      	ldr	r2, [r7, #0]
    1c08:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    1c0a:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1c0c:	683a      	ldr	r2, [r7, #0]
    1c0e:	7e12      	ldrb	r2, [r2, #24]
    1c10:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    1c12:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1c14:	683a      	ldr	r2, [r7, #0]
    1c16:	2142      	movs	r1, #66	; 0x42
    1c18:	5c52      	ldrb	r2, [r2, r1]
    1c1a:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    1c1c:	4313      	orrs	r3, r2
    1c1e:	62fb      	str	r3, [r7, #44]	; 0x2c

	enum status_code status_code = STATUS_OK;
    1c20:	231d      	movs	r3, #29
    1c22:	18fb      	adds	r3, r7, r3
    1c24:	2200      	movs	r2, #0
    1c26:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    1c28:	683b      	ldr	r3, [r7, #0]
    1c2a:	685b      	ldr	r3, [r3, #4]
    1c2c:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
    1c2e:	683b      	ldr	r3, [r7, #0]
    1c30:	2220      	movs	r2, #32
    1c32:	5c9b      	ldrb	r3, [r3, r2]
    1c34:	2b00      	cmp	r3, #0
    1c36:	d002      	beq.n	1c3e <_usart_set_config+0x11e>
		transfer_mode = config->iso7816_config.protocol_t;
    1c38:	683b      	ldr	r3, [r7, #0]
    1c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1c3c:	623b      	str	r3, [r7, #32]
	}
#endif
	/* Get baud value from mode and clock */
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
    1c3e:	683b      	ldr	r3, [r7, #0]
    1c40:	2220      	movs	r2, #32
    1c42:	5c9b      	ldrb	r3, [r3, r2]
    1c44:	2b00      	cmp	r3, #0
    1c46:	d006      	beq.n	1c56 <_usart_set_config+0x136>
		baud = config->baudrate;
    1c48:	683b      	ldr	r3, [r7, #0]
    1c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1c4c:	b29a      	uxth	r2, r3
    1c4e:	230e      	movs	r3, #14
    1c50:	18fb      	adds	r3, r7, r3
    1c52:	801a      	strh	r2, [r3, #0]
    1c54:	e05f      	b.n	1d16 <_usart_set_config+0x1f6>
	} else {
#endif
	switch (transfer_mode)
    1c56:	6a3b      	ldr	r3, [r7, #32]
    1c58:	2b00      	cmp	r3, #0
    1c5a:	d01e      	beq.n	1c9a <_usart_set_config+0x17a>
    1c5c:	2280      	movs	r2, #128	; 0x80
    1c5e:	0552      	lsls	r2, r2, #21
    1c60:	4293      	cmp	r3, r2
    1c62:	d14f      	bne.n	1d04 <_usart_set_config+0x1e4>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    1c64:	683b      	ldr	r3, [r7, #0]
    1c66:	2243      	movs	r2, #67	; 0x43
    1c68:	5c9b      	ldrb	r3, [r3, r2]
    1c6a:	2201      	movs	r2, #1
    1c6c:	4053      	eors	r3, r2
    1c6e:	b2db      	uxtb	r3, r3
    1c70:	2b00      	cmp	r3, #0
    1c72:	d046      	beq.n	1d02 <_usart_set_config+0x1e2>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1c74:	683b      	ldr	r3, [r7, #0]
    1c76:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    1c78:	693b      	ldr	r3, [r7, #16]
    1c7a:	b2db      	uxtb	r3, r3
    1c7c:	0018      	movs	r0, r3
    1c7e:	4b72      	ldr	r3, [pc, #456]	; (1e48 <_usart_set_config+0x328>)
    1c80:	4798      	blx	r3
    1c82:	0001      	movs	r1, r0
    1c84:	231d      	movs	r3, #29
    1c86:	18fc      	adds	r4, r7, r3
    1c88:	230e      	movs	r3, #14
    1c8a:	18fb      	adds	r3, r7, r3
    1c8c:	001a      	movs	r2, r3
    1c8e:	0028      	movs	r0, r5
    1c90:	4b6e      	ldr	r3, [pc, #440]	; (1e4c <_usart_set_config+0x32c>)
    1c92:	4798      	blx	r3
    1c94:	0003      	movs	r3, r0
    1c96:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    1c98:	e033      	b.n	1d02 <_usart_set_config+0x1e2>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    1c9a:	683b      	ldr	r3, [r7, #0]
    1c9c:	2243      	movs	r2, #67	; 0x43
    1c9e:	5c9b      	ldrb	r3, [r3, r2]
    1ca0:	2b00      	cmp	r3, #0
    1ca2:	d014      	beq.n	1cce <_usart_set_config+0x1ae>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    1ca4:	683b      	ldr	r3, [r7, #0]
    1ca6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    1ca8:	683b      	ldr	r3, [r7, #0]
    1caa:	6c59      	ldr	r1, [r3, #68]	; 0x44
				status_code =
    1cac:	231d      	movs	r3, #29
    1cae:	18fc      	adds	r4, r7, r3
    1cb0:	231f      	movs	r3, #31
    1cb2:	18fb      	adds	r3, r7, r3
    1cb4:	781d      	ldrb	r5, [r3, #0]
    1cb6:	230e      	movs	r3, #14
    1cb8:	18fa      	adds	r2, r7, r3
    1cba:	231e      	movs	r3, #30
    1cbc:	18fb      	adds	r3, r7, r3
    1cbe:	781b      	ldrb	r3, [r3, #0]
    1cc0:	9300      	str	r3, [sp, #0]
    1cc2:	002b      	movs	r3, r5
    1cc4:	4d62      	ldr	r5, [pc, #392]	; (1e50 <_usart_set_config+0x330>)
    1cc6:	47a8      	blx	r5
    1cc8:	0003      	movs	r3, r0
    1cca:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    1ccc:	e01a      	b.n	1d04 <_usart_set_config+0x1e4>
						_sercom_get_async_baud_val(config->baudrate,
    1cce:	683b      	ldr	r3, [r7, #0]
    1cd0:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    1cd2:	693b      	ldr	r3, [r7, #16]
    1cd4:	b2db      	uxtb	r3, r3
    1cd6:	0018      	movs	r0, r3
    1cd8:	4b5b      	ldr	r3, [pc, #364]	; (1e48 <_usart_set_config+0x328>)
    1cda:	4798      	blx	r3
				status_code =
    1cdc:	231d      	movs	r3, #29
    1cde:	18fc      	adds	r4, r7, r3
    1ce0:	231f      	movs	r3, #31
    1ce2:	18fb      	adds	r3, r7, r3
    1ce4:	7819      	ldrb	r1, [r3, #0]
    1ce6:	230e      	movs	r3, #14
    1ce8:	18fa      	adds	r2, r7, r3
    1cea:	231e      	movs	r3, #30
    1cec:	18fb      	adds	r3, r7, r3
    1cee:	781b      	ldrb	r3, [r3, #0]
    1cf0:	9300      	str	r3, [sp, #0]
    1cf2:	000b      	movs	r3, r1
    1cf4:	0001      	movs	r1, r0
    1cf6:	0028      	movs	r0, r5
    1cf8:	4d55      	ldr	r5, [pc, #340]	; (1e50 <_usart_set_config+0x330>)
    1cfa:	47a8      	blx	r5
    1cfc:	0003      	movs	r3, r0
    1cfe:	7023      	strb	r3, [r4, #0]
			break;
    1d00:	e000      	b.n	1d04 <_usart_set_config+0x1e4>
			break;
    1d02:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    1d04:	231d      	movs	r3, #29
    1d06:	18fb      	adds	r3, r7, r3
    1d08:	781b      	ldrb	r3, [r3, #0]
    1d0a:	2b00      	cmp	r3, #0
    1d0c:	d003      	beq.n	1d16 <_usart_set_config+0x1f6>
		/* Abort */
		return status_code;
    1d0e:	231d      	movs	r3, #29
    1d10:	18fb      	adds	r3, r7, r3
    1d12:	781b      	ldrb	r3, [r3, #0]
    1d14:	e0e4      	b.n	1ee0 <_usart_set_config+0x3c0>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    1d16:	683b      	ldr	r3, [r7, #0]
    1d18:	7e5b      	ldrb	r3, [r3, #25]
    1d1a:	2b00      	cmp	r3, #0
    1d1c:	d003      	beq.n	1d26 <_usart_set_config+0x206>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1d1e:	683b      	ldr	r3, [r7, #0]
    1d20:	7e9a      	ldrb	r2, [r3, #26]
    1d22:	69bb      	ldr	r3, [r7, #24]
    1d24:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1d26:	687b      	ldr	r3, [r7, #4]
    1d28:	0018      	movs	r0, r3
    1d2a:	4b4a      	ldr	r3, [pc, #296]	; (1e54 <_usart_set_config+0x334>)
    1d2c:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    1d2e:	230e      	movs	r3, #14
    1d30:	18fb      	adds	r3, r7, r3
    1d32:	881a      	ldrh	r2, [r3, #0]
    1d34:	69bb      	ldr	r3, [r7, #24]
    1d36:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    1d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1d3a:	6a3b      	ldr	r3, [r7, #32]
    1d3c:	4313      	orrs	r3, r2
    1d3e:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (config->use_external_clock == false) {
    1d40:	683b      	ldr	r3, [r7, #0]
    1d42:	2243      	movs	r2, #67	; 0x43
    1d44:	5c9b      	ldrb	r3, [r3, r2]
    1d46:	2201      	movs	r2, #1
    1d48:	4053      	eors	r3, r2
    1d4a:	b2db      	uxtb	r3, r3
    1d4c:	2b00      	cmp	r3, #0
    1d4e:	d003      	beq.n	1d58 <_usart_set_config+0x238>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1d52:	2204      	movs	r2, #4
    1d54:	4313      	orrs	r3, r2
    1d56:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1d58:	683b      	ldr	r3, [r7, #0]
    1d5a:	7e5b      	ldrb	r3, [r3, #25]
    1d5c:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1d5e:	683b      	ldr	r3, [r7, #0]
    1d60:	7f1b      	ldrb	r3, [r3, #28]
    1d62:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1d64:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1d66:	683b      	ldr	r3, [r7, #0]
    1d68:	2139      	movs	r1, #57	; 0x39
    1d6a:	5c5b      	ldrb	r3, [r3, r1]
    1d6c:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1d6e:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1d70:	683b      	ldr	r3, [r7, #0]
    1d72:	2140      	movs	r1, #64	; 0x40
    1d74:	5c5b      	ldrb	r3, [r3, r1]
    1d76:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1d78:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1d7a:	683b      	ldr	r3, [r7, #0]
    1d7c:	2141      	movs	r1, #65	; 0x41
    1d7e:	5c5b      	ldrb	r3, [r3, r1]
    1d80:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1d82:	4313      	orrs	r3, r2
	ctrlb =  
    1d84:	62bb      	str	r3, [r7, #40]	; 0x28

#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
    1d86:	683b      	ldr	r3, [r7, #0]
    1d88:	2220      	movs	r2, #32
    1d8a:	5c9b      	ldrb	r3, [r3, r2]
    1d8c:	2b00      	cmp	r3, #0
    1d8e:	d033      	beq.n	1df8 <_usart_set_config+0x2d8>
		ctrla |= SERCOM_USART_CTRLA_FORM(0x07);
    1d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1d92:	22e0      	movs	r2, #224	; 0xe0
    1d94:	04d2      	lsls	r2, r2, #19
    1d96:	4313      	orrs	r3, r2
    1d98:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (config->iso7816_config.enable_inverse) {
    1d9a:	683b      	ldr	r3, [r7, #0]
    1d9c:	2228      	movs	r2, #40	; 0x28
    1d9e:	5c9b      	ldrb	r3, [r3, r2]
    1da0:	2b00      	cmp	r3, #0
    1da2:	d004      	beq.n	1dae <_usart_set_config+0x28e>
			ctrla |= SERCOM_USART_CTRLA_TXINV | SERCOM_USART_CTRLA_RXINV;
    1da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1da6:	22c0      	movs	r2, #192	; 0xc0
    1da8:	00d2      	lsls	r2, r2, #3
    1daa:	4313      	orrs	r3, r2
    1dac:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		ctrlb |=  USART_CHARACTER_SIZE_8BIT;
		
		switch(config->iso7816_config.protocol_t) {
    1dae:	683b      	ldr	r3, [r7, #0]
    1db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1db2:	2b00      	cmp	r3, #0
    1db4:	d050      	beq.n	1e58 <_usart_set_config+0x338>
    1db6:	2280      	movs	r2, #128	; 0x80
    1db8:	0552      	lsls	r2, r2, #21
    1dba:	4293      	cmp	r3, r2
    1dbc:	d14d      	bne.n	1e5a <_usart_set_config+0x33a>
			case ISO7816_PROTOCOL_T_0:
				ctrlb |= (uint32_t)config->stopbits;	
    1dbe:	683b      	ldr	r3, [r7, #0]
    1dc0:	7a9b      	ldrb	r3, [r3, #10]
    1dc2:	001a      	movs	r2, r3
    1dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1dc6:	4313      	orrs	r3, r2
    1dc8:	62bb      	str	r3, [r7, #40]	; 0x28
				ctrlc |= SERCOM_USART_CTRLC_GTIME(config->iso7816_config.guard_time) | \
    1dca:	683b      	ldr	r3, [r7, #0]
    1dcc:	2229      	movs	r2, #41	; 0x29
    1dce:	5c9b      	ldrb	r3, [r3, r2]
    1dd0:	001a      	movs	r2, r3
    1dd2:	2307      	movs	r3, #7
    1dd4:	401a      	ands	r2, r3
						(config->iso7816_config.inhibit_nack) | \
    1dd6:	683b      	ldr	r3, [r7, #0]
    1dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
				ctrlc |= SERCOM_USART_CTRLC_GTIME(config->iso7816_config.guard_time) | \
    1dda:	431a      	orrs	r2, r3
						(config->iso7816_config.successive_recv_nack) | \
    1ddc:	683b      	ldr	r3, [r7, #0]
    1dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
						(config->iso7816_config.inhibit_nack) | \
    1de0:	431a      	orrs	r2, r3
						SERCOM_USART_CTRLC_MAXITER(config->iso7816_config.max_iterations);
    1de2:	683b      	ldr	r3, [r7, #0]
    1de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1de6:	0519      	lsls	r1, r3, #20
    1de8:	23e0      	movs	r3, #224	; 0xe0
    1dea:	03db      	lsls	r3, r3, #15
    1dec:	400b      	ands	r3, r1
						(config->iso7816_config.successive_recv_nack) | \
    1dee:	4313      	orrs	r3, r2
				ctrlc |= SERCOM_USART_CTRLC_GTIME(config->iso7816_config.guard_time) | \
    1df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1df2:	4313      	orrs	r3, r2
    1df4:	627b      	str	r3, [r7, #36]	; 0x24
				break;	
    1df6:	e030      	b.n	1e5a <_usart_set_config+0x33a>
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    1df8:	683b      	ldr	r3, [r7, #0]
    1dfa:	7a9b      	ldrb	r3, [r3, #10]
    1dfc:	001a      	movs	r2, r3
    1dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1e00:	4313      	orrs	r3, r2
    1e02:	62bb      	str	r3, [r7, #40]	; 0x28
	ctrlb |= (uint32_t)config->character_size;
    1e04:	683b      	ldr	r3, [r7, #0]
    1e06:	7adb      	ldrb	r3, [r3, #11]
    1e08:	001a      	movs	r2, r3
    1e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1e0c:	4313      	orrs	r3, r2
    1e0e:	62bb      	str	r3, [r7, #40]	; 0x28
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    1e10:	683b      	ldr	r3, [r7, #0]
    1e12:	891b      	ldrh	r3, [r3, #8]
    1e14:	2bff      	cmp	r3, #255	; 0xff
    1e16:	d00b      	beq.n	1e30 <_usart_set_config+0x310>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1e1a:	2280      	movs	r2, #128	; 0x80
    1e1c:	0452      	lsls	r2, r2, #17
    1e1e:	4313      	orrs	r3, r2
    1e20:	62fb      	str	r3, [r7, #44]	; 0x2c
		ctrlb |= config->parity;
    1e22:	683b      	ldr	r3, [r7, #0]
    1e24:	891b      	ldrh	r3, [r3, #8]
    1e26:	001a      	movs	r2, r3
    1e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1e2a:	4313      	orrs	r3, r2
    1e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    1e2e:	e014      	b.n	1e5a <_usart_set_config+0x33a>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    1e30:	683b      	ldr	r3, [r7, #0]
    1e32:	7edb      	ldrb	r3, [r3, #27]
    1e34:	2b00      	cmp	r3, #0
    1e36:	d010      	beq.n	1e5a <_usart_set_config+0x33a>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1e3a:	2280      	movs	r2, #128	; 0x80
    1e3c:	04d2      	lsls	r2, r2, #19
    1e3e:	4313      	orrs	r3, r2
    1e40:	62fb      	str	r3, [r7, #44]	; 0x2c
    1e42:	e00a      	b.n	1e5a <_usart_set_config+0x33a>
    1e44:	0000187d 	.word	0x0000187d
    1e48:	0000309d 	.word	0x0000309d
    1e4c:	000013f3 	.word	0x000013f3
    1e50:	00001471 	.word	0x00001471
    1e54:	00001afd 	.word	0x00001afd
				break;		
    1e58:	46c0      	nop			; (mov r8, r8)
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1e5a:	683b      	ldr	r3, [r7, #0]
    1e5c:	2248      	movs	r2, #72	; 0x48
    1e5e:	5c9b      	ldrb	r3, [r3, r2]
    1e60:	2b00      	cmp	r3, #0
    1e62:	d103      	bne.n	1e6c <_usart_set_config+0x34c>
    1e64:	4b20      	ldr	r3, [pc, #128]	; (1ee8 <_usart_set_config+0x3c8>)
    1e66:	4798      	blx	r3
    1e68:	1e03      	subs	r3, r0, #0
    1e6a:	d003      	beq.n	1e74 <_usart_set_config+0x354>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1e6e:	2280      	movs	r2, #128	; 0x80
    1e70:	4313      	orrs	r3, r2
    1e72:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1e74:	687b      	ldr	r3, [r7, #4]
    1e76:	0018      	movs	r0, r3
    1e78:	4b1c      	ldr	r3, [pc, #112]	; (1eec <_usart_set_config+0x3cc>)
    1e7a:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    1e7c:	69bb      	ldr	r3, [r7, #24]
    1e7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1e80:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1e82:	687b      	ldr	r3, [r7, #4]
    1e84:	0018      	movs	r0, r3
    1e86:	4b19      	ldr	r3, [pc, #100]	; (1eec <_usart_set_config+0x3cc>)
    1e88:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    1e8a:	69bb      	ldr	r3, [r7, #24]
    1e8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1e8e:	601a      	str	r2, [r3, #0]

#ifdef FEATURE_USART_RS485
	if ((usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_FORM_Msk) != \
    1e90:	69bb      	ldr	r3, [r7, #24]
    1e92:	681a      	ldr	r2, [r3, #0]
    1e94:	23f0      	movs	r3, #240	; 0xf0
    1e96:	051b      	lsls	r3, r3, #20
    1e98:	401a      	ands	r2, r3
    1e9a:	23e0      	movs	r3, #224	; 0xe0
    1e9c:	04db      	lsls	r3, r3, #19
    1e9e:	429a      	cmp	r2, r3
    1ea0:	d011      	beq.n	1ec6 <_usart_set_config+0x3a6>
		SERCOM_USART_CTRLA_FORM(0x07)) {
		usart_hw->CTRLC.reg &= ~(SERCOM_USART_CTRLC_GTIME(0x7));
    1ea2:	69bb      	ldr	r3, [r7, #24]
    1ea4:	689b      	ldr	r3, [r3, #8]
    1ea6:	2207      	movs	r2, #7
    1ea8:	4393      	bics	r3, r2
    1eaa:	001a      	movs	r2, r3
    1eac:	69bb      	ldr	r3, [r7, #24]
    1eae:	609a      	str	r2, [r3, #8]
		usart_hw->CTRLC.reg |= SERCOM_USART_CTRLC_GTIME(config->rs485_guard_time);
    1eb0:	69bb      	ldr	r3, [r7, #24]
    1eb2:	689a      	ldr	r2, [r3, #8]
    1eb4:	683b      	ldr	r3, [r7, #0]
    1eb6:	2138      	movs	r1, #56	; 0x38
    1eb8:	5c5b      	ldrb	r3, [r3, r1]
    1eba:	0019      	movs	r1, r3
    1ebc:	2307      	movs	r3, #7
    1ebe:	400b      	ands	r3, r1
    1ec0:	431a      	orrs	r2, r3
    1ec2:	69bb      	ldr	r3, [r7, #24]
    1ec4:	609a      	str	r2, [r3, #8]
	}
#endif

#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
    1ec6:	683b      	ldr	r3, [r7, #0]
    1ec8:	2220      	movs	r2, #32
    1eca:	5c9b      	ldrb	r3, [r3, r2]
    1ecc:	2b00      	cmp	r3, #0
    1ece:	d006      	beq.n	1ede <_usart_set_config+0x3be>
		_usart_wait_for_sync(module);
    1ed0:	687b      	ldr	r3, [r7, #4]
    1ed2:	0018      	movs	r0, r3
    1ed4:	4b05      	ldr	r3, [pc, #20]	; (1eec <_usart_set_config+0x3cc>)
    1ed6:	4798      	blx	r3
		usart_hw->CTRLC.reg = ctrlc;
    1ed8:	69bb      	ldr	r3, [r7, #24]
    1eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1edc:	609a      	str	r2, [r3, #8]
	}
#endif

	return STATUS_OK;
    1ede:	2300      	movs	r3, #0
}
    1ee0:	0018      	movs	r0, r3
    1ee2:	46bd      	mov	sp, r7
    1ee4:	b00c      	add	sp, #48	; 0x30
    1ee6:	bdb0      	pop	{r4, r5, r7, pc}
    1ee8:	00001abd 	.word	0x00001abd
    1eec:	00001afd 	.word	0x00001afd

00001ef0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1ef0:	b590      	push	{r4, r7, lr}
    1ef2:	b093      	sub	sp, #76	; 0x4c
    1ef4:	af00      	add	r7, sp, #0
    1ef6:	60f8      	str	r0, [r7, #12]
    1ef8:	60b9      	str	r1, [r7, #8]
    1efa:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    1efc:	233b      	movs	r3, #59	; 0x3b
    1efe:	18fb      	adds	r3, r7, r3
    1f00:	2200      	movs	r2, #0
    1f02:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1f04:	68fb      	ldr	r3, [r7, #12]
    1f06:	68ba      	ldr	r2, [r7, #8]
    1f08:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1f0a:	68fb      	ldr	r3, [r7, #12]
    1f0c:	681b      	ldr	r3, [r3, #0]
    1f0e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1f10:	68fb      	ldr	r3, [r7, #12]
    1f12:	681b      	ldr	r3, [r3, #0]
    1f14:	0018      	movs	r0, r3
    1f16:	4b88      	ldr	r3, [pc, #544]	; (2138 <STACK_SIZE+0x138>)
    1f18:	4798      	blx	r3
    1f1a:	0003      	movs	r3, r0
    1f1c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    1f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1f20:	3301      	adds	r3, #1
    1f22:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    1f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1f26:	3310      	adds	r3, #16
    1f28:	62bb      	str	r3, [r7, #40]	; 0x28
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1f2c:	681b      	ldr	r3, [r3, #0]
    1f2e:	2201      	movs	r2, #1
    1f30:	4013      	ands	r3, r2
    1f32:	d001      	beq.n	1f38 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1f34:	2305      	movs	r3, #5
    1f36:	e0fb      	b.n	2130 <STACK_SIZE+0x130>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1f3a:	681b      	ldr	r3, [r3, #0]
    1f3c:	2202      	movs	r2, #2
    1f3e:	4013      	ands	r3, r2
    1f40:	d001      	beq.n	1f46 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    1f42:	231c      	movs	r3, #28
    1f44:	e0f4      	b.n	2130 <STACK_SIZE+0x130>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1f46:	2201      	movs	r2, #1
    1f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1f4a:	409a      	lsls	r2, r3
    1f4c:	0013      	movs	r3, r2
    1f4e:	0019      	movs	r1, r3
    1f50:	2002      	movs	r0, #2
    1f52:	4b7a      	ldr	r3, [pc, #488]	; (213c <STACK_SIZE+0x13c>)
    1f54:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1f56:	2324      	movs	r3, #36	; 0x24
    1f58:	18fb      	adds	r3, r7, r3
    1f5a:	0018      	movs	r0, r3
    1f5c:	4b78      	ldr	r3, [pc, #480]	; (2140 <STACK_SIZE+0x140>)
    1f5e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    1f60:	687b      	ldr	r3, [r7, #4]
    1f62:	2249      	movs	r2, #73	; 0x49
    1f64:	5c9a      	ldrb	r2, [r3, r2]
    1f66:	2324      	movs	r3, #36	; 0x24
    1f68:	18fb      	adds	r3, r7, r3
    1f6a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1f6e:	b2db      	uxtb	r3, r3
    1f70:	2224      	movs	r2, #36	; 0x24
    1f72:	18ba      	adds	r2, r7, r2
    1f74:	0011      	movs	r1, r2
    1f76:	0018      	movs	r0, r3
    1f78:	4b72      	ldr	r3, [pc, #456]	; (2144 <STACK_SIZE+0x144>)
    1f7a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1f7e:	b2db      	uxtb	r3, r3
    1f80:	0018      	movs	r0, r3
    1f82:	4b71      	ldr	r3, [pc, #452]	; (2148 <STACK_SIZE+0x148>)
    1f84:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1f86:	687b      	ldr	r3, [r7, #4]
    1f88:	2249      	movs	r2, #73	; 0x49
    1f8a:	5c9b      	ldrb	r3, [r3, r2]
    1f8c:	2100      	movs	r1, #0
    1f8e:	0018      	movs	r0, r3
    1f90:	4b6e      	ldr	r3, [pc, #440]	; (214c <STACK_SIZE+0x14c>)
    1f92:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    1f94:	687b      	ldr	r3, [r7, #4]
    1f96:	7ada      	ldrb	r2, [r3, #11]
    1f98:	68fb      	ldr	r3, [r7, #12]
    1f9a:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    1f9c:	687b      	ldr	r3, [r7, #4]
    1f9e:	2240      	movs	r2, #64	; 0x40
    1fa0:	5c9a      	ldrb	r2, [r3, r2]
    1fa2:	68fb      	ldr	r3, [r7, #12]
    1fa4:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1fa6:	687b      	ldr	r3, [r7, #4]
    1fa8:	2241      	movs	r2, #65	; 0x41
    1faa:	5c9a      	ldrb	r2, [r3, r2]
    1fac:	68fb      	ldr	r3, [r7, #12]
    1fae:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    1fb0:	687b      	ldr	r3, [r7, #4]
    1fb2:	7eda      	ldrb	r2, [r3, #27]
    1fb4:	68fb      	ldr	r3, [r7, #12]
    1fb6:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1fb8:	687b      	ldr	r3, [r7, #4]
    1fba:	7f1a      	ldrb	r2, [r3, #28]
    1fbc:	68fb      	ldr	r3, [r7, #12]
    1fbe:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
    1fc0:	687b      	ldr	r3, [r7, #4]
    1fc2:	2220      	movs	r2, #32
    1fc4:	5c9a      	ldrb	r2, [r3, r2]
    1fc6:	68fb      	ldr	r3, [r7, #12]
    1fc8:	729a      	strb	r2, [r3, #10]
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    1fca:	233b      	movs	r3, #59	; 0x3b
    1fcc:	18fc      	adds	r4, r7, r3
    1fce:	687a      	ldr	r2, [r7, #4]
    1fd0:	68fb      	ldr	r3, [r7, #12]
    1fd2:	0011      	movs	r1, r2
    1fd4:	0018      	movs	r0, r3
    1fd6:	4b5e      	ldr	r3, [pc, #376]	; (2150 <STACK_SIZE+0x150>)
    1fd8:	4798      	blx	r3
    1fda:	0003      	movs	r3, r0
    1fdc:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    1fde:	233b      	movs	r3, #59	; 0x3b
    1fe0:	18fb      	adds	r3, r7, r3
    1fe2:	781b      	ldrb	r3, [r3, #0]
    1fe4:	2b00      	cmp	r3, #0
    1fe6:	d003      	beq.n	1ff0 <usart_init+0x100>
		return status_code;
    1fe8:	233b      	movs	r3, #59	; 0x3b
    1fea:	18fb      	adds	r3, r7, r3
    1fec:	781b      	ldrb	r3, [r3, #0]
    1fee:	e09f      	b.n	2130 <STACK_SIZE+0x130>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    1ff0:	2320      	movs	r3, #32
    1ff2:	18fb      	adds	r3, r7, r3
    1ff4:	0018      	movs	r0, r3
    1ff6:	4b57      	ldr	r3, [pc, #348]	; (2154 <STACK_SIZE+0x154>)
    1ff8:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1ffa:	2320      	movs	r3, #32
    1ffc:	18fb      	adds	r3, r7, r3
    1ffe:	2200      	movs	r2, #0
    2000:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2002:	2320      	movs	r3, #32
    2004:	18fb      	adds	r3, r7, r3
    2006:	2200      	movs	r2, #0
    2008:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    200a:	687b      	ldr	r3, [r7, #4]
    200c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	uint32_t pad_pinmuxes[] = {
    200e:	2310      	movs	r3, #16
    2010:	18fb      	adds	r3, r7, r3
    2012:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    2014:	687b      	ldr	r3, [r7, #4]
    2016:	6d1a      	ldr	r2, [r3, #80]	; 0x50
	uint32_t pad_pinmuxes[] = {
    2018:	2310      	movs	r3, #16
    201a:	18fb      	adds	r3, r7, r3
    201c:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    201e:	687b      	ldr	r3, [r7, #4]
    2020:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	uint32_t pad_pinmuxes[] = {
    2022:	2310      	movs	r3, #16
    2024:	18fb      	adds	r3, r7, r3
    2026:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    2028:	687b      	ldr	r3, [r7, #4]
    202a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
	uint32_t pad_pinmuxes[] = {
    202c:	2310      	movs	r3, #16
    202e:	18fb      	adds	r3, r7, r3
    2030:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    2032:	2347      	movs	r3, #71	; 0x47
    2034:	18fb      	adds	r3, r7, r3
    2036:	2200      	movs	r2, #0
    2038:	701a      	strb	r2, [r3, #0]
    203a:	e02c      	b.n	2096 <STACK_SIZE+0x96>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    203c:	2347      	movs	r3, #71	; 0x47
    203e:	18fb      	adds	r3, r7, r3
    2040:	781a      	ldrb	r2, [r3, #0]
    2042:	2310      	movs	r3, #16
    2044:	18fb      	adds	r3, r7, r3
    2046:	0092      	lsls	r2, r2, #2
    2048:	58d3      	ldr	r3, [r2, r3]
    204a:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    204c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    204e:	2b00      	cmp	r3, #0
    2050:	d109      	bne.n	2066 <STACK_SIZE+0x66>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2052:	2347      	movs	r3, #71	; 0x47
    2054:	18fb      	adds	r3, r7, r3
    2056:	781a      	ldrb	r2, [r3, #0]
    2058:	68bb      	ldr	r3, [r7, #8]
    205a:	0011      	movs	r1, r2
    205c:	0018      	movs	r0, r3
    205e:	4b3e      	ldr	r3, [pc, #248]	; (2158 <STACK_SIZE+0x158>)
    2060:	4798      	blx	r3
    2062:	0003      	movs	r3, r0
    2064:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    2066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2068:	3301      	adds	r3, #1
    206a:	d00d      	beq.n	2088 <STACK_SIZE+0x88>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    206c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    206e:	b2da      	uxtb	r2, r3
    2070:	2320      	movs	r3, #32
    2072:	18fb      	adds	r3, r7, r3
    2074:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2078:	0c1b      	lsrs	r3, r3, #16
    207a:	b2db      	uxtb	r3, r3
    207c:	2220      	movs	r2, #32
    207e:	18ba      	adds	r2, r7, r2
    2080:	0011      	movs	r1, r2
    2082:	0018      	movs	r0, r3
    2084:	4b35      	ldr	r3, [pc, #212]	; (215c <STACK_SIZE+0x15c>)
    2086:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    2088:	2347      	movs	r3, #71	; 0x47
    208a:	18fb      	adds	r3, r7, r3
    208c:	781a      	ldrb	r2, [r3, #0]
    208e:	2347      	movs	r3, #71	; 0x47
    2090:	18fb      	adds	r3, r7, r3
    2092:	3201      	adds	r2, #1
    2094:	701a      	strb	r2, [r3, #0]
    2096:	2347      	movs	r3, #71	; 0x47
    2098:	18fb      	adds	r3, r7, r3
    209a:	781b      	ldrb	r3, [r3, #0]
    209c:	2b03      	cmp	r3, #3
    209e:	d9cd      	bls.n	203c <STACK_SIZE+0x3c>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    20a0:	2300      	movs	r3, #0
    20a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    20a4:	e00a      	b.n	20bc <STACK_SIZE+0xbc>
		module->callback[i]            = NULL;
    20a6:	68fa      	ldr	r2, [r7, #12]
    20a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    20aa:	3302      	adds	r3, #2
    20ac:	009b      	lsls	r3, r3, #2
    20ae:	18d3      	adds	r3, r2, r3
    20b0:	3304      	adds	r3, #4
    20b2:	2200      	movs	r2, #0
    20b4:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    20b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    20b8:	3301      	adds	r3, #1
    20ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    20bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    20be:	2b05      	cmp	r3, #5
    20c0:	d9f1      	bls.n	20a6 <STACK_SIZE+0xa6>
	}

	module->tx_buffer_ptr              = NULL;
    20c2:	68fb      	ldr	r3, [r7, #12]
    20c4:	2200      	movs	r2, #0
    20c6:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    20c8:	68fb      	ldr	r3, [r7, #12]
    20ca:	2200      	movs	r2, #0
    20cc:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    20ce:	68fb      	ldr	r3, [r7, #12]
    20d0:	2200      	movs	r2, #0
    20d2:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	2200      	movs	r2, #0
    20d8:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    20da:	68fb      	ldr	r3, [r7, #12]
    20dc:	2230      	movs	r2, #48	; 0x30
    20de:	2100      	movs	r1, #0
    20e0:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    20e2:	68fb      	ldr	r3, [r7, #12]
    20e4:	2231      	movs	r2, #49	; 0x31
    20e6:	2100      	movs	r1, #0
    20e8:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    20ea:	68fb      	ldr	r3, [r7, #12]
    20ec:	2232      	movs	r2, #50	; 0x32
    20ee:	2100      	movs	r1, #0
    20f0:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    20f2:	68fb      	ldr	r3, [r7, #12]
    20f4:	2233      	movs	r2, #51	; 0x33
    20f6:	2100      	movs	r1, #0
    20f8:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    20fa:	68fb      	ldr	r3, [r7, #12]
    20fc:	681b      	ldr	r3, [r3, #0]
    20fe:	2227      	movs	r2, #39	; 0x27
    2100:	18bc      	adds	r4, r7, r2
    2102:	0018      	movs	r0, r3
    2104:	4b0c      	ldr	r3, [pc, #48]	; (2138 <STACK_SIZE+0x138>)
    2106:	4798      	blx	r3
    2108:	0003      	movs	r3, r0
    210a:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    210c:	4a14      	ldr	r2, [pc, #80]	; (2160 <STACK_SIZE+0x160>)
    210e:	2327      	movs	r3, #39	; 0x27
    2110:	18fb      	adds	r3, r7, r3
    2112:	781b      	ldrb	r3, [r3, #0]
    2114:	0011      	movs	r1, r2
    2116:	0018      	movs	r0, r3
    2118:	4b12      	ldr	r3, [pc, #72]	; (2164 <STACK_SIZE+0x164>)
    211a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    211c:	2327      	movs	r3, #39	; 0x27
    211e:	18fb      	adds	r3, r7, r3
    2120:	781a      	ldrb	r2, [r3, #0]
    2122:	4b11      	ldr	r3, [pc, #68]	; (2168 <STACK_SIZE+0x168>)
    2124:	0092      	lsls	r2, r2, #2
    2126:	68f9      	ldr	r1, [r7, #12]
    2128:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    212a:	233b      	movs	r3, #59	; 0x3b
    212c:	18fb      	adds	r3, r7, r3
    212e:	781b      	ldrb	r3, [r3, #0]
}
    2130:	0018      	movs	r0, r3
    2132:	46bd      	mov	sp, r7
    2134:	b013      	add	sp, #76	; 0x4c
    2136:	bd90      	pop	{r4, r7, pc}
    2138:	0000187d 	.word	0x0000187d
    213c:	00001a39 	.word	0x00001a39
    2140:	00001a21 	.word	0x00001a21
    2144:	00002fad 	.word	0x00002fad
    2148:	00002fed 	.word	0x00002fed
    214c:	00001631 	.word	0x00001631
    2150:	00001b21 	.word	0x00001b21
    2154:	00001a95 	.word	0x00001a95
    2158:	000016bd 	.word	0x000016bd
    215c:	00003261 	.word	0x00003261
    2160:	000022fd 	.word	0x000022fd
    2164:	000018e1 	.word	0x000018e1
    2168:	20003984 	.word	0x20003984

0000216c <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    216c:	b580      	push	{r7, lr}
    216e:	b084      	sub	sp, #16
    2170:	af00      	add	r7, sp, #0
    2172:	6078      	str	r0, [r7, #4]
    2174:	000a      	movs	r2, r1
    2176:	1cbb      	adds	r3, r7, #2
    2178:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    217a:	687b      	ldr	r3, [r7, #4]
    217c:	681b      	ldr	r3, [r3, #0]
    217e:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2180:	687b      	ldr	r3, [r7, #4]
    2182:	79db      	ldrb	r3, [r3, #7]
    2184:	2201      	movs	r2, #1
    2186:	4053      	eors	r3, r2
    2188:	b2db      	uxtb	r3, r3
    218a:	2b00      	cmp	r3, #0
    218c:	d001      	beq.n	2192 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    218e:	231c      	movs	r3, #28
    2190:	e017      	b.n	21c2 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    2192:	687b      	ldr	r3, [r7, #4]
    2194:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    2196:	b29b      	uxth	r3, r3
    2198:	2b00      	cmp	r3, #0
    219a:	d001      	beq.n	21a0 <usart_write_wait+0x34>
		return STATUS_BUSY;
    219c:	2305      	movs	r3, #5
    219e:	e010      	b.n	21c2 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    21a0:	687b      	ldr	r3, [r7, #4]
    21a2:	0018      	movs	r0, r3
    21a4:	4b09      	ldr	r3, [pc, #36]	; (21cc <usart_write_wait+0x60>)
    21a6:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    21a8:	68fb      	ldr	r3, [r7, #12]
    21aa:	1cba      	adds	r2, r7, #2
    21ac:	8812      	ldrh	r2, [r2, #0]
    21ae:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    21b0:	46c0      	nop			; (mov r8, r8)
    21b2:	68fb      	ldr	r3, [r7, #12]
    21b4:	7e1b      	ldrb	r3, [r3, #24]
    21b6:	b2db      	uxtb	r3, r3
    21b8:	001a      	movs	r2, r3
    21ba:	2302      	movs	r3, #2
    21bc:	4013      	ands	r3, r2
    21be:	d0f8      	beq.n	21b2 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    21c0:	2300      	movs	r3, #0
}
    21c2:	0018      	movs	r0, r3
    21c4:	46bd      	mov	sp, r7
    21c6:	b004      	add	sp, #16
    21c8:	bd80      	pop	{r7, pc}
    21ca:	46c0      	nop			; (mov r8, r8)
    21cc:	00001afd 	.word	0x00001afd

000021d0 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    21d0:	b580      	push	{r7, lr}
    21d2:	b084      	sub	sp, #16
    21d4:	af00      	add	r7, sp, #0
    21d6:	6078      	str	r0, [r7, #4]
    21d8:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    21da:	687b      	ldr	r3, [r7, #4]
    21dc:	681b      	ldr	r3, [r3, #0]
    21de:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    21e0:	687b      	ldr	r3, [r7, #4]
    21e2:	799b      	ldrb	r3, [r3, #6]
    21e4:	2201      	movs	r2, #1
    21e6:	4053      	eors	r3, r2
    21e8:	b2db      	uxtb	r3, r3
    21ea:	2b00      	cmp	r3, #0
    21ec:	d001      	beq.n	21f2 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    21ee:	231c      	movs	r3, #28
    21f0:	e05b      	b.n	22aa <usart_read_wait+0xda>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    21f2:	687b      	ldr	r3, [r7, #4]
    21f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    21f6:	b29b      	uxth	r3, r3
    21f8:	2b00      	cmp	r3, #0
    21fa:	d001      	beq.n	2200 <usart_read_wait+0x30>
		return STATUS_BUSY;
    21fc:	2305      	movs	r3, #5
    21fe:	e054      	b.n	22aa <usart_read_wait+0xda>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2200:	68fb      	ldr	r3, [r7, #12]
    2202:	7e1b      	ldrb	r3, [r3, #24]
    2204:	b2db      	uxtb	r3, r3
    2206:	001a      	movs	r2, r3
    2208:	2304      	movs	r3, #4
    220a:	4013      	ands	r3, r2
    220c:	d101      	bne.n	2212 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    220e:	2305      	movs	r3, #5
    2210:	e04b      	b.n	22aa <usart_read_wait+0xda>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    2212:	687b      	ldr	r3, [r7, #4]
    2214:	0018      	movs	r0, r3
    2216:	4b27      	ldr	r3, [pc, #156]	; (22b4 <usart_read_wait+0xe4>)
    2218:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    221a:	68fb      	ldr	r3, [r7, #12]
    221c:	8b5b      	ldrh	r3, [r3, #26]
    221e:	b29a      	uxth	r2, r3
    2220:	230b      	movs	r3, #11
    2222:	18fb      	adds	r3, r7, r3
    2224:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    2226:	230b      	movs	r3, #11
    2228:	18fb      	adds	r3, r7, r3
    222a:	781b      	ldrb	r3, [r3, #0]
    222c:	2b00      	cmp	r3, #0
    222e:	d036      	beq.n	229e <usart_read_wait+0xce>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2230:	230b      	movs	r3, #11
    2232:	18fb      	adds	r3, r7, r3
    2234:	781b      	ldrb	r3, [r3, #0]
    2236:	2202      	movs	r2, #2
    2238:	4013      	ands	r3, r2
    223a:	d004      	beq.n	2246 <usart_read_wait+0x76>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    223c:	68fb      	ldr	r3, [r7, #12]
    223e:	2202      	movs	r2, #2
    2240:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    2242:	231a      	movs	r3, #26
    2244:	e031      	b.n	22aa <usart_read_wait+0xda>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2246:	230b      	movs	r3, #11
    2248:	18fb      	adds	r3, r7, r3
    224a:	781b      	ldrb	r3, [r3, #0]
    224c:	2204      	movs	r2, #4
    224e:	4013      	ands	r3, r2
    2250:	d004      	beq.n	225c <usart_read_wait+0x8c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2252:	68fb      	ldr	r3, [r7, #12]
    2254:	2204      	movs	r2, #4
    2256:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    2258:	231e      	movs	r3, #30
    225a:	e026      	b.n	22aa <usart_read_wait+0xda>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    225c:	230b      	movs	r3, #11
    225e:	18fb      	adds	r3, r7, r3
    2260:	781b      	ldrb	r3, [r3, #0]
    2262:	2201      	movs	r2, #1
    2264:	4013      	ands	r3, r2
    2266:	d004      	beq.n	2272 <usart_read_wait+0xa2>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2268:	68fb      	ldr	r3, [r7, #12]
    226a:	2201      	movs	r2, #1
    226c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    226e:	2313      	movs	r3, #19
    2270:	e01b      	b.n	22aa <usart_read_wait+0xda>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2272:	230b      	movs	r3, #11
    2274:	18fb      	adds	r3, r7, r3
    2276:	781b      	ldrb	r3, [r3, #0]
    2278:	2210      	movs	r2, #16
    227a:	4013      	ands	r3, r2
    227c:	d004      	beq.n	2288 <usart_read_wait+0xb8>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    227e:	68fb      	ldr	r3, [r7, #12]
    2280:	2210      	movs	r2, #16
    2282:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    2284:	2342      	movs	r3, #66	; 0x42
    2286:	e010      	b.n	22aa <usart_read_wait+0xda>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2288:	230b      	movs	r3, #11
    228a:	18fb      	adds	r3, r7, r3
    228c:	781b      	ldrb	r3, [r3, #0]
    228e:	2220      	movs	r2, #32
    2290:	4013      	ands	r3, r2
    2292:	d004      	beq.n	229e <usart_read_wait+0xce>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2294:	68fb      	ldr	r3, [r7, #12]
    2296:	2220      	movs	r2, #32
    2298:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    229a:	2341      	movs	r3, #65	; 0x41
    229c:	e005      	b.n	22aa <usart_read_wait+0xda>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    229e:	68fb      	ldr	r3, [r7, #12]
    22a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    22a2:	b29a      	uxth	r2, r3
    22a4:	683b      	ldr	r3, [r7, #0]
    22a6:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    22a8:	2300      	movs	r3, #0
}
    22aa:	0018      	movs	r0, r3
    22ac:	46bd      	mov	sp, r7
    22ae:	b004      	add	sp, #16
    22b0:	bd80      	pop	{r7, pc}
    22b2:	46c0      	nop			; (mov r8, r8)
    22b4:	00001afd 	.word	0x00001afd

000022b8 <usart_is_syncing>:
{
    22b8:	b580      	push	{r7, lr}
    22ba:	b084      	sub	sp, #16
    22bc:	af00      	add	r7, sp, #0
    22be:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    22c0:	687b      	ldr	r3, [r7, #4]
    22c2:	681b      	ldr	r3, [r3, #0]
    22c4:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    22c6:	68fb      	ldr	r3, [r7, #12]
    22c8:	69db      	ldr	r3, [r3, #28]
    22ca:	1e5a      	subs	r2, r3, #1
    22cc:	4193      	sbcs	r3, r2
    22ce:	b2db      	uxtb	r3, r3
}
    22d0:	0018      	movs	r0, r3
    22d2:	46bd      	mov	sp, r7
    22d4:	b004      	add	sp, #16
    22d6:	bd80      	pop	{r7, pc}

000022d8 <_usart_wait_for_sync>:
{
    22d8:	b580      	push	{r7, lr}
    22da:	b082      	sub	sp, #8
    22dc:	af00      	add	r7, sp, #0
    22de:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    22e0:	46c0      	nop			; (mov r8, r8)
    22e2:	687b      	ldr	r3, [r7, #4]
    22e4:	0018      	movs	r0, r3
    22e6:	4b04      	ldr	r3, [pc, #16]	; (22f8 <_usart_wait_for_sync+0x20>)
    22e8:	4798      	blx	r3
    22ea:	1e03      	subs	r3, r0, #0
    22ec:	d1f9      	bne.n	22e2 <_usart_wait_for_sync+0xa>
}
    22ee:	46c0      	nop			; (mov r8, r8)
    22f0:	46bd      	mov	sp, r7
    22f2:	b002      	add	sp, #8
    22f4:	bd80      	pop	{r7, pc}
    22f6:	46c0      	nop			; (mov r8, r8)
    22f8:	000022b9 	.word	0x000022b9

000022fc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    22fc:	b580      	push	{r7, lr}
    22fe:	b088      	sub	sp, #32
    2300:	af00      	add	r7, sp, #0
    2302:	0002      	movs	r2, r0
    2304:	1dfb      	adds	r3, r7, #7
    2306:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    2308:	1dfb      	adds	r3, r7, #7
    230a:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    230c:	4ba1      	ldr	r3, [pc, #644]	; (2594 <_usart_interrupt_handler+0x298>)
    230e:	0092      	lsls	r2, r2, #2
    2310:	58d3      	ldr	r3, [r2, r3]
    2312:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2314:	69bb      	ldr	r3, [r7, #24]
    2316:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    2318:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    231a:	69bb      	ldr	r3, [r7, #24]
    231c:	0018      	movs	r0, r3
    231e:	4b9e      	ldr	r3, [pc, #632]	; (2598 <_usart_interrupt_handler+0x29c>)
    2320:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2322:	697b      	ldr	r3, [r7, #20]
    2324:	7e1b      	ldrb	r3, [r3, #24]
    2326:	b2da      	uxtb	r2, r3
    2328:	2312      	movs	r3, #18
    232a:	18fb      	adds	r3, r7, r3
    232c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    232e:	697b      	ldr	r3, [r7, #20]
    2330:	7d9b      	ldrb	r3, [r3, #22]
    2332:	b2db      	uxtb	r3, r3
    2334:	b29a      	uxth	r2, r3
    2336:	2312      	movs	r3, #18
    2338:	18fb      	adds	r3, r7, r3
    233a:	2112      	movs	r1, #18
    233c:	1879      	adds	r1, r7, r1
    233e:	8809      	ldrh	r1, [r1, #0]
    2340:	400a      	ands	r2, r1
    2342:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    2344:	69bb      	ldr	r3, [r7, #24]
    2346:	2230      	movs	r2, #48	; 0x30
    2348:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    234a:	69ba      	ldr	r2, [r7, #24]
    234c:	2131      	movs	r1, #49	; 0x31
    234e:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    2350:	4013      	ands	r3, r2
    2352:	b2da      	uxtb	r2, r3
    2354:	2310      	movs	r3, #16
    2356:	18fb      	adds	r3, r7, r3
    2358:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    235a:	2312      	movs	r3, #18
    235c:	18fb      	adds	r3, r7, r3
    235e:	881b      	ldrh	r3, [r3, #0]
    2360:	2201      	movs	r2, #1
    2362:	4013      	ands	r3, r2
    2364:	d044      	beq.n	23f0 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    2366:	69bb      	ldr	r3, [r7, #24]
    2368:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    236a:	b29b      	uxth	r3, r3
    236c:	2b00      	cmp	r3, #0
    236e:	d03c      	beq.n	23ea <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2370:	69bb      	ldr	r3, [r7, #24]
    2372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2374:	781b      	ldrb	r3, [r3, #0]
    2376:	b2da      	uxtb	r2, r3
    2378:	231c      	movs	r3, #28
    237a:	18fb      	adds	r3, r7, r3
    237c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    237e:	69bb      	ldr	r3, [r7, #24]
    2380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2382:	1c5a      	adds	r2, r3, #1
    2384:	69bb      	ldr	r3, [r7, #24]
    2386:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2388:	69bb      	ldr	r3, [r7, #24]
    238a:	795b      	ldrb	r3, [r3, #5]
    238c:	2b01      	cmp	r3, #1
    238e:	d113      	bne.n	23b8 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2390:	69bb      	ldr	r3, [r7, #24]
    2392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2394:	781b      	ldrb	r3, [r3, #0]
    2396:	b2db      	uxtb	r3, r3
    2398:	021b      	lsls	r3, r3, #8
    239a:	b21a      	sxth	r2, r3
    239c:	231c      	movs	r3, #28
    239e:	18fb      	adds	r3, r7, r3
    23a0:	2100      	movs	r1, #0
    23a2:	5e5b      	ldrsh	r3, [r3, r1]
    23a4:	4313      	orrs	r3, r2
    23a6:	b21a      	sxth	r2, r3
    23a8:	231c      	movs	r3, #28
    23aa:	18fb      	adds	r3, r7, r3
    23ac:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    23ae:	69bb      	ldr	r3, [r7, #24]
    23b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    23b2:	1c5a      	adds	r2, r3, #1
    23b4:	69bb      	ldr	r3, [r7, #24]
    23b6:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    23b8:	231c      	movs	r3, #28
    23ba:	18fb      	adds	r3, r7, r3
    23bc:	881b      	ldrh	r3, [r3, #0]
    23be:	05db      	lsls	r3, r3, #23
    23c0:	0ddb      	lsrs	r3, r3, #23
    23c2:	b29a      	uxth	r2, r3
    23c4:	697b      	ldr	r3, [r7, #20]
    23c6:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    23c8:	69bb      	ldr	r3, [r7, #24]
    23ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    23cc:	b29b      	uxth	r3, r3
    23ce:	3b01      	subs	r3, #1
    23d0:	b29b      	uxth	r3, r3
    23d2:	69ba      	ldr	r2, [r7, #24]
    23d4:	1c19      	adds	r1, r3, #0
    23d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
    23d8:	2b00      	cmp	r3, #0
    23da:	d109      	bne.n	23f0 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    23dc:	697b      	ldr	r3, [r7, #20]
    23de:	2201      	movs	r2, #1
    23e0:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    23e2:	697b      	ldr	r3, [r7, #20]
    23e4:	2202      	movs	r2, #2
    23e6:	759a      	strb	r2, [r3, #22]
    23e8:	e002      	b.n	23f0 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    23ea:	697b      	ldr	r3, [r7, #20]
    23ec:	2201      	movs	r2, #1
    23ee:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    23f0:	2312      	movs	r3, #18
    23f2:	18fb      	adds	r3, r7, r3
    23f4:	881b      	ldrh	r3, [r3, #0]
    23f6:	2202      	movs	r2, #2
    23f8:	4013      	ands	r3, r2
    23fa:	d011      	beq.n	2420 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    23fc:	697b      	ldr	r3, [r7, #20]
    23fe:	2202      	movs	r2, #2
    2400:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    2402:	69bb      	ldr	r3, [r7, #24]
    2404:	2233      	movs	r2, #51	; 0x33
    2406:	2100      	movs	r1, #0
    2408:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    240a:	2310      	movs	r3, #16
    240c:	18fb      	adds	r3, r7, r3
    240e:	881b      	ldrh	r3, [r3, #0]
    2410:	2201      	movs	r2, #1
    2412:	4013      	ands	r3, r2
    2414:	d004      	beq.n	2420 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2416:	69bb      	ldr	r3, [r7, #24]
    2418:	68db      	ldr	r3, [r3, #12]
    241a:	69ba      	ldr	r2, [r7, #24]
    241c:	0010      	movs	r0, r2
    241e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2420:	2312      	movs	r3, #18
    2422:	18fb      	adds	r3, r7, r3
    2424:	881b      	ldrh	r3, [r3, #0]
    2426:	2204      	movs	r2, #4
    2428:	4013      	ands	r3, r2
    242a:	d100      	bne.n	242e <_usart_interrupt_handler+0x132>
    242c:	e0b9      	b.n	25a2 <_usart_interrupt_handler+0x2a6>

		if (module->remaining_rx_buffer_length) {
    242e:	69bb      	ldr	r3, [r7, #24]
    2430:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    2432:	b29b      	uxth	r3, r3
    2434:	2b00      	cmp	r3, #0
    2436:	d100      	bne.n	243a <_usart_interrupt_handler+0x13e>
    2438:	e0b0      	b.n	259c <_usart_interrupt_handler+0x2a0>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    243a:	697b      	ldr	r3, [r7, #20]
    243c:	8b5b      	ldrh	r3, [r3, #26]
    243e:	b29a      	uxth	r2, r3
    2440:	231f      	movs	r3, #31
    2442:	18fb      	adds	r3, r7, r3
    2444:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2446:	231f      	movs	r3, #31
    2448:	18fb      	adds	r3, r7, r3
    244a:	781b      	ldrb	r3, [r3, #0]
    244c:	2208      	movs	r2, #8
    244e:	4013      	ands	r3, r2
    2450:	d007      	beq.n	2462 <_usart_interrupt_handler+0x166>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2452:	231f      	movs	r3, #31
    2454:	18fb      	adds	r3, r7, r3
    2456:	221f      	movs	r2, #31
    2458:	18ba      	adds	r2, r7, r2
    245a:	7812      	ldrb	r2, [r2, #0]
    245c:	2108      	movs	r1, #8
    245e:	438a      	bics	r2, r1
    2460:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2462:	231f      	movs	r3, #31
    2464:	18fb      	adds	r3, r7, r3
    2466:	781b      	ldrb	r3, [r3, #0]
    2468:	2b00      	cmp	r3, #0
    246a:	d050      	beq.n	250e <_usart_interrupt_handler+0x212>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    246c:	231f      	movs	r3, #31
    246e:	18fb      	adds	r3, r7, r3
    2470:	781b      	ldrb	r3, [r3, #0]
    2472:	2202      	movs	r2, #2
    2474:	4013      	ands	r3, r2
    2476:	d007      	beq.n	2488 <_usart_interrupt_handler+0x18c>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2478:	69bb      	ldr	r3, [r7, #24]
    247a:	2232      	movs	r2, #50	; 0x32
    247c:	211a      	movs	r1, #26
    247e:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2480:	697b      	ldr	r3, [r7, #20]
    2482:	2202      	movs	r2, #2
    2484:	835a      	strh	r2, [r3, #26]
    2486:	e036      	b.n	24f6 <_usart_interrupt_handler+0x1fa>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2488:	231f      	movs	r3, #31
    248a:	18fb      	adds	r3, r7, r3
    248c:	781b      	ldrb	r3, [r3, #0]
    248e:	2204      	movs	r2, #4
    2490:	4013      	ands	r3, r2
    2492:	d007      	beq.n	24a4 <_usart_interrupt_handler+0x1a8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    2494:	69bb      	ldr	r3, [r7, #24]
    2496:	2232      	movs	r2, #50	; 0x32
    2498:	211e      	movs	r1, #30
    249a:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    249c:	697b      	ldr	r3, [r7, #20]
    249e:	2204      	movs	r2, #4
    24a0:	835a      	strh	r2, [r3, #26]
    24a2:	e028      	b.n	24f6 <_usart_interrupt_handler+0x1fa>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    24a4:	231f      	movs	r3, #31
    24a6:	18fb      	adds	r3, r7, r3
    24a8:	781b      	ldrb	r3, [r3, #0]
    24aa:	2201      	movs	r2, #1
    24ac:	4013      	ands	r3, r2
    24ae:	d007      	beq.n	24c0 <_usart_interrupt_handler+0x1c4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    24b0:	69bb      	ldr	r3, [r7, #24]
    24b2:	2232      	movs	r2, #50	; 0x32
    24b4:	2113      	movs	r1, #19
    24b6:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    24b8:	697b      	ldr	r3, [r7, #20]
    24ba:	2201      	movs	r2, #1
    24bc:	835a      	strh	r2, [r3, #26]
    24be:	e01a      	b.n	24f6 <_usart_interrupt_handler+0x1fa>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    24c0:	231f      	movs	r3, #31
    24c2:	18fb      	adds	r3, r7, r3
    24c4:	781b      	ldrb	r3, [r3, #0]
    24c6:	2210      	movs	r2, #16
    24c8:	4013      	ands	r3, r2
    24ca:	d007      	beq.n	24dc <_usart_interrupt_handler+0x1e0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    24cc:	69bb      	ldr	r3, [r7, #24]
    24ce:	2232      	movs	r2, #50	; 0x32
    24d0:	2142      	movs	r1, #66	; 0x42
    24d2:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    24d4:	697b      	ldr	r3, [r7, #20]
    24d6:	2210      	movs	r2, #16
    24d8:	835a      	strh	r2, [r3, #26]
    24da:	e00c      	b.n	24f6 <_usart_interrupt_handler+0x1fa>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    24dc:	231f      	movs	r3, #31
    24de:	18fb      	adds	r3, r7, r3
    24e0:	781b      	ldrb	r3, [r3, #0]
    24e2:	2220      	movs	r2, #32
    24e4:	4013      	ands	r3, r2
    24e6:	d006      	beq.n	24f6 <_usart_interrupt_handler+0x1fa>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    24e8:	69bb      	ldr	r3, [r7, #24]
    24ea:	2232      	movs	r2, #50	; 0x32
    24ec:	2141      	movs	r1, #65	; 0x41
    24ee:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    24f0:	697b      	ldr	r3, [r7, #20]
    24f2:	2220      	movs	r2, #32
    24f4:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    24f6:	2310      	movs	r3, #16
    24f8:	18fb      	adds	r3, r7, r3
    24fa:	881b      	ldrh	r3, [r3, #0]
    24fc:	2204      	movs	r2, #4
    24fe:	4013      	ands	r3, r2
				if (callback_status
    2500:	d04f      	beq.n	25a2 <_usart_interrupt_handler+0x2a6>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2502:	69bb      	ldr	r3, [r7, #24]
    2504:	695b      	ldr	r3, [r3, #20]
    2506:	69ba      	ldr	r2, [r7, #24]
    2508:	0010      	movs	r0, r2
    250a:	4798      	blx	r3
    250c:	e049      	b.n	25a2 <_usart_interrupt_handler+0x2a6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    250e:	697b      	ldr	r3, [r7, #20]
    2510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2512:	b29a      	uxth	r2, r3
    2514:	230e      	movs	r3, #14
    2516:	18fb      	adds	r3, r7, r3
    2518:	05d2      	lsls	r2, r2, #23
    251a:	0dd2      	lsrs	r2, r2, #23
    251c:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    251e:	69bb      	ldr	r3, [r7, #24]
    2520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2522:	220e      	movs	r2, #14
    2524:	18ba      	adds	r2, r7, r2
    2526:	8812      	ldrh	r2, [r2, #0]
    2528:	b2d2      	uxtb	r2, r2
    252a:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    252c:	69bb      	ldr	r3, [r7, #24]
    252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2530:	1c5a      	adds	r2, r3, #1
    2532:	69bb      	ldr	r3, [r7, #24]
    2534:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2536:	69bb      	ldr	r3, [r7, #24]
    2538:	795b      	ldrb	r3, [r3, #5]
    253a:	2b01      	cmp	r3, #1
    253c:	d10d      	bne.n	255a <_usart_interrupt_handler+0x25e>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    253e:	69bb      	ldr	r3, [r7, #24]
    2540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2542:	220e      	movs	r2, #14
    2544:	18ba      	adds	r2, r7, r2
    2546:	8812      	ldrh	r2, [r2, #0]
    2548:	0a12      	lsrs	r2, r2, #8
    254a:	b292      	uxth	r2, r2
    254c:	b2d2      	uxtb	r2, r2
    254e:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    2550:	69bb      	ldr	r3, [r7, #24]
    2552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2554:	1c5a      	adds	r2, r3, #1
    2556:	69bb      	ldr	r3, [r7, #24]
    2558:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    255a:	69bb      	ldr	r3, [r7, #24]
    255c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    255e:	b29b      	uxth	r3, r3
    2560:	3b01      	subs	r3, #1
    2562:	b29b      	uxth	r3, r3
    2564:	69ba      	ldr	r2, [r7, #24]
    2566:	1c19      	adds	r1, r3, #0
    2568:	8591      	strh	r1, [r2, #44]	; 0x2c
    256a:	2b00      	cmp	r3, #0
    256c:	d119      	bne.n	25a2 <_usart_interrupt_handler+0x2a6>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    256e:	697b      	ldr	r3, [r7, #20]
    2570:	2204      	movs	r2, #4
    2572:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    2574:	69bb      	ldr	r3, [r7, #24]
    2576:	2232      	movs	r2, #50	; 0x32
    2578:	2100      	movs	r1, #0
    257a:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    257c:	2310      	movs	r3, #16
    257e:	18fb      	adds	r3, r7, r3
    2580:	881b      	ldrh	r3, [r3, #0]
    2582:	2202      	movs	r2, #2
    2584:	4013      	ands	r3, r2
					if (callback_status
    2586:	d00c      	beq.n	25a2 <_usart_interrupt_handler+0x2a6>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2588:	69bb      	ldr	r3, [r7, #24]
    258a:	691b      	ldr	r3, [r3, #16]
    258c:	69ba      	ldr	r2, [r7, #24]
    258e:	0010      	movs	r0, r2
    2590:	4798      	blx	r3
    2592:	e006      	b.n	25a2 <_usart_interrupt_handler+0x2a6>
    2594:	20003984 	.word	0x20003984
    2598:	000022d9 	.word	0x000022d9
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    259c:	697b      	ldr	r3, [r7, #20]
    259e:	2204      	movs	r2, #4
    25a0:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    25a2:	2312      	movs	r3, #18
    25a4:	18fb      	adds	r3, r7, r3
    25a6:	881b      	ldrh	r3, [r3, #0]
    25a8:	2210      	movs	r2, #16
    25aa:	4013      	ands	r3, r2
    25ac:	d010      	beq.n	25d0 <_usart_interrupt_handler+0x2d4>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    25ae:	697b      	ldr	r3, [r7, #20]
    25b0:	2210      	movs	r2, #16
    25b2:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    25b4:	697b      	ldr	r3, [r7, #20]
    25b6:	2210      	movs	r2, #16
    25b8:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    25ba:	2310      	movs	r3, #16
    25bc:	18fb      	adds	r3, r7, r3
    25be:	881b      	ldrh	r3, [r3, #0]
    25c0:	2210      	movs	r2, #16
    25c2:	4013      	ands	r3, r2
    25c4:	d004      	beq.n	25d0 <_usart_interrupt_handler+0x2d4>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    25c6:	69bb      	ldr	r3, [r7, #24]
    25c8:	69db      	ldr	r3, [r3, #28]
    25ca:	69ba      	ldr	r2, [r7, #24]
    25cc:	0010      	movs	r0, r2
    25ce:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    25d0:	2312      	movs	r3, #18
    25d2:	18fb      	adds	r3, r7, r3
    25d4:	881b      	ldrh	r3, [r3, #0]
    25d6:	2220      	movs	r2, #32
    25d8:	4013      	ands	r3, r2
    25da:	d010      	beq.n	25fe <_usart_interrupt_handler+0x302>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    25dc:	697b      	ldr	r3, [r7, #20]
    25de:	2220      	movs	r2, #32
    25e0:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    25e2:	697b      	ldr	r3, [r7, #20]
    25e4:	2220      	movs	r2, #32
    25e6:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    25e8:	2310      	movs	r3, #16
    25ea:	18fb      	adds	r3, r7, r3
    25ec:	881b      	ldrh	r3, [r3, #0]
    25ee:	2208      	movs	r2, #8
    25f0:	4013      	ands	r3, r2
    25f2:	d004      	beq.n	25fe <_usart_interrupt_handler+0x302>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    25f4:	69bb      	ldr	r3, [r7, #24]
    25f6:	699b      	ldr	r3, [r3, #24]
    25f8:	69ba      	ldr	r2, [r7, #24]
    25fa:	0010      	movs	r0, r2
    25fc:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    25fe:	2312      	movs	r3, #18
    2600:	18fb      	adds	r3, r7, r3
    2602:	881b      	ldrh	r3, [r3, #0]
    2604:	2208      	movs	r2, #8
    2606:	4013      	ands	r3, r2
    2608:	d010      	beq.n	262c <_usart_interrupt_handler+0x330>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    260a:	697b      	ldr	r3, [r7, #20]
    260c:	2208      	movs	r2, #8
    260e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2610:	697b      	ldr	r3, [r7, #20]
    2612:	2208      	movs	r2, #8
    2614:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2616:	2310      	movs	r3, #16
    2618:	18fb      	adds	r3, r7, r3
    261a:	881b      	ldrh	r3, [r3, #0]
    261c:	2220      	movs	r2, #32
    261e:	4013      	ands	r3, r2
    2620:	d004      	beq.n	262c <_usart_interrupt_handler+0x330>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2622:	69bb      	ldr	r3, [r7, #24]
    2624:	6a1b      	ldr	r3, [r3, #32]
    2626:	69ba      	ldr	r2, [r7, #24]
    2628:	0010      	movs	r0, r2
    262a:	4798      	blx	r3
		}
	}
#endif
}
    262c:	46c0      	nop			; (mov r8, r8)
    262e:	46bd      	mov	sp, r7
    2630:	b008      	add	sp, #32
    2632:	bd80      	pop	{r7, pc}

00002634 <TC0_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    2634:	b580      	push	{r7, lr}
    2636:	af00      	add	r7, sp, #0
    2638:	2000      	movs	r0, #0
    263a:	4b02      	ldr	r3, [pc, #8]	; (2644 <TC0_Handler+0x10>)
    263c:	4798      	blx	r3
    263e:	46c0      	nop			; (mov r8, r8)
    2640:	46bd      	mov	sp, r7
    2642:	bd80      	pop	{r7, pc}
    2644:	00002685 	.word	0x00002685

00002648 <TC1_Handler>:
    2648:	b580      	push	{r7, lr}
    264a:	af00      	add	r7, sp, #0
    264c:	2001      	movs	r0, #1
    264e:	4b02      	ldr	r3, [pc, #8]	; (2658 <TC1_Handler+0x10>)
    2650:	4798      	blx	r3
    2652:	46c0      	nop			; (mov r8, r8)
    2654:	46bd      	mov	sp, r7
    2656:	bd80      	pop	{r7, pc}
    2658:	00002685 	.word	0x00002685

0000265c <TC2_Handler>:
    265c:	b580      	push	{r7, lr}
    265e:	af00      	add	r7, sp, #0
    2660:	2002      	movs	r0, #2
    2662:	4b02      	ldr	r3, [pc, #8]	; (266c <TC2_Handler+0x10>)
    2664:	4798      	blx	r3
    2666:	46c0      	nop			; (mov r8, r8)
    2668:	46bd      	mov	sp, r7
    266a:	bd80      	pop	{r7, pc}
    266c:	00002685 	.word	0x00002685

00002670 <TC3_Handler>:
    2670:	b580      	push	{r7, lr}
    2672:	af00      	add	r7, sp, #0
    2674:	2003      	movs	r0, #3
    2676:	4b02      	ldr	r3, [pc, #8]	; (2680 <TC3_Handler+0x10>)
    2678:	4798      	blx	r3
    267a:	46c0      	nop			; (mov r8, r8)
    267c:	46bd      	mov	sp, r7
    267e:	bd80      	pop	{r7, pc}
    2680:	00002685 	.word	0x00002685

00002684 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    2684:	b580      	push	{r7, lr}
    2686:	b084      	sub	sp, #16
    2688:	af00      	add	r7, sp, #0
    268a:	0002      	movs	r2, r0
    268c:	1dfb      	adds	r3, r7, #7
    268e:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    2690:	1dfb      	adds	r3, r7, #7
    2692:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
    2694:	4b28      	ldr	r3, [pc, #160]	; (2738 <_tc_interrupt_handler+0xb4>)
    2696:	0092      	lsls	r2, r2, #2
    2698:	58d3      	ldr	r3, [r2, r3]
    269a:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    269c:	68fb      	ldr	r3, [r7, #12]
    269e:	681b      	ldr	r3, [r3, #0]
    26a0:	7a9b      	ldrb	r3, [r3, #10]
    26a2:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    26a4:	68fa      	ldr	r2, [r7, #12]
    26a6:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    26a8:	4013      	ands	r3, r2
    26aa:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
    26ac:	68fb      	ldr	r3, [r7, #12]
    26ae:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    26b0:	230b      	movs	r3, #11
    26b2:	18fb      	adds	r3, r7, r3
    26b4:	400a      	ands	r2, r1
    26b6:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    26b8:	230b      	movs	r3, #11
    26ba:	18fb      	adds	r3, r7, r3
    26bc:	781b      	ldrb	r3, [r3, #0]
    26be:	2201      	movs	r2, #1
    26c0:	4013      	ands	r3, r2
    26c2:	d008      	beq.n	26d6 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    26c4:	68fb      	ldr	r3, [r7, #12]
    26c6:	689b      	ldr	r3, [r3, #8]
    26c8:	68fa      	ldr	r2, [r7, #12]
    26ca:	0010      	movs	r0, r2
    26cc:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    26ce:	68fb      	ldr	r3, [r7, #12]
    26d0:	681b      	ldr	r3, [r3, #0]
    26d2:	2201      	movs	r2, #1
    26d4:	729a      	strb	r2, [r3, #10]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    26d6:	230b      	movs	r3, #11
    26d8:	18fb      	adds	r3, r7, r3
    26da:	781b      	ldrb	r3, [r3, #0]
    26dc:	2202      	movs	r2, #2
    26de:	4013      	ands	r3, r2
    26e0:	d008      	beq.n	26f4 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    26e2:	68fb      	ldr	r3, [r7, #12]
    26e4:	68db      	ldr	r3, [r3, #12]
    26e6:	68fa      	ldr	r2, [r7, #12]
    26e8:	0010      	movs	r0, r2
    26ea:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    26ec:	68fb      	ldr	r3, [r7, #12]
    26ee:	681b      	ldr	r3, [r3, #0]
    26f0:	2202      	movs	r2, #2
    26f2:	729a      	strb	r2, [r3, #10]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    26f4:	230b      	movs	r3, #11
    26f6:	18fb      	adds	r3, r7, r3
    26f8:	781b      	ldrb	r3, [r3, #0]
    26fa:	2210      	movs	r2, #16
    26fc:	4013      	ands	r3, r2
    26fe:	d008      	beq.n	2712 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    2700:	68fb      	ldr	r3, [r7, #12]
    2702:	691b      	ldr	r3, [r3, #16]
    2704:	68fa      	ldr	r2, [r7, #12]
    2706:	0010      	movs	r0, r2
    2708:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    270a:	68fb      	ldr	r3, [r7, #12]
    270c:	681b      	ldr	r3, [r3, #0]
    270e:	2210      	movs	r2, #16
    2710:	729a      	strb	r2, [r3, #10]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    2712:	230b      	movs	r3, #11
    2714:	18fb      	adds	r3, r7, r3
    2716:	781b      	ldrb	r3, [r3, #0]
    2718:	2220      	movs	r2, #32
    271a:	4013      	ands	r3, r2
    271c:	d008      	beq.n	2730 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    271e:	68fb      	ldr	r3, [r7, #12]
    2720:	695b      	ldr	r3, [r3, #20]
    2722:	68fa      	ldr	r2, [r7, #12]
    2724:	0010      	movs	r0, r2
    2726:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    2728:	68fb      	ldr	r3, [r7, #12]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2220      	movs	r2, #32
    272e:	729a      	strb	r2, [r3, #10]
	}
}
    2730:	46c0      	nop			; (mov r8, r8)
    2732:	46bd      	mov	sp, r7
    2734:	b004      	add	sp, #16
    2736:	bd80      	pop	{r7, pc}
    2738:	2000399c 	.word	0x2000399c

0000273c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    273c:	b580      	push	{r7, lr}
    273e:	b082      	sub	sp, #8
    2740:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    2742:	4b10      	ldr	r3, [pc, #64]	; (2784 <cpu_irq_enter_critical+0x48>)
    2744:	681b      	ldr	r3, [r3, #0]
    2746:	2b00      	cmp	r3, #0
    2748:	d112      	bne.n	2770 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    274a:	f3ef 8310 	mrs	r3, PRIMASK
    274e:	607b      	str	r3, [r7, #4]
  return(result);
    2750:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    2752:	2b00      	cmp	r3, #0
    2754:	d109      	bne.n	276a <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    2756:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2758:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    275c:	4b0a      	ldr	r3, [pc, #40]	; (2788 <cpu_irq_enter_critical+0x4c>)
    275e:	2200      	movs	r2, #0
    2760:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2762:	4b0a      	ldr	r3, [pc, #40]	; (278c <cpu_irq_enter_critical+0x50>)
    2764:	2201      	movs	r2, #1
    2766:	701a      	strb	r2, [r3, #0]
    2768:	e002      	b.n	2770 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    276a:	4b08      	ldr	r3, [pc, #32]	; (278c <cpu_irq_enter_critical+0x50>)
    276c:	2200      	movs	r2, #0
    276e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2770:	4b04      	ldr	r3, [pc, #16]	; (2784 <cpu_irq_enter_critical+0x48>)
    2772:	681b      	ldr	r3, [r3, #0]
    2774:	1c5a      	adds	r2, r3, #1
    2776:	4b03      	ldr	r3, [pc, #12]	; (2784 <cpu_irq_enter_critical+0x48>)
    2778:	601a      	str	r2, [r3, #0]
}
    277a:	46c0      	nop			; (mov r8, r8)
    277c:	46bd      	mov	sp, r7
    277e:	b002      	add	sp, #8
    2780:	bd80      	pop	{r7, pc}
    2782:	46c0      	nop			; (mov r8, r8)
    2784:	20003944 	.word	0x20003944
    2788:	20000004 	.word	0x20000004
    278c:	20003948 	.word	0x20003948

00002790 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    2790:	b580      	push	{r7, lr}
    2792:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2794:	4b0b      	ldr	r3, [pc, #44]	; (27c4 <cpu_irq_leave_critical+0x34>)
    2796:	681b      	ldr	r3, [r3, #0]
    2798:	1e5a      	subs	r2, r3, #1
    279a:	4b0a      	ldr	r3, [pc, #40]	; (27c4 <cpu_irq_leave_critical+0x34>)
    279c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    279e:	4b09      	ldr	r3, [pc, #36]	; (27c4 <cpu_irq_leave_critical+0x34>)
    27a0:	681b      	ldr	r3, [r3, #0]
    27a2:	2b00      	cmp	r3, #0
    27a4:	d10a      	bne.n	27bc <cpu_irq_leave_critical+0x2c>
    27a6:	4b08      	ldr	r3, [pc, #32]	; (27c8 <cpu_irq_leave_critical+0x38>)
    27a8:	781b      	ldrb	r3, [r3, #0]
    27aa:	b2db      	uxtb	r3, r3
    27ac:	2b00      	cmp	r3, #0
    27ae:	d005      	beq.n	27bc <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    27b0:	4b06      	ldr	r3, [pc, #24]	; (27cc <cpu_irq_leave_critical+0x3c>)
    27b2:	2201      	movs	r2, #1
    27b4:	701a      	strb	r2, [r3, #0]
    27b6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    27ba:	b662      	cpsie	i
	}
}
    27bc:	46c0      	nop			; (mov r8, r8)
    27be:	46bd      	mov	sp, r7
    27c0:	bd80      	pop	{r7, pc}
    27c2:	46c0      	nop			; (mov r8, r8)
    27c4:	20003944 	.word	0x20003944
    27c8:	20003948 	.word	0x20003948
    27cc:	20000004 	.word	0x20000004

000027d0 <system_pinmux_get_group_from_gpio_pin>:
{
    27d0:	b580      	push	{r7, lr}
    27d2:	b084      	sub	sp, #16
    27d4:	af00      	add	r7, sp, #0
    27d6:	0002      	movs	r2, r0
    27d8:	1dfb      	adds	r3, r7, #7
    27da:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    27dc:	230f      	movs	r3, #15
    27de:	18fb      	adds	r3, r7, r3
    27e0:	1dfa      	adds	r2, r7, #7
    27e2:	7812      	ldrb	r2, [r2, #0]
    27e4:	09d2      	lsrs	r2, r2, #7
    27e6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    27e8:	230e      	movs	r3, #14
    27ea:	18fb      	adds	r3, r7, r3
    27ec:	1dfa      	adds	r2, r7, #7
    27ee:	7812      	ldrb	r2, [r2, #0]
    27f0:	0952      	lsrs	r2, r2, #5
    27f2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    27f4:	4b0d      	ldr	r3, [pc, #52]	; (282c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    27f6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    27f8:	230f      	movs	r3, #15
    27fa:	18fb      	adds	r3, r7, r3
    27fc:	781b      	ldrb	r3, [r3, #0]
    27fe:	2b00      	cmp	r3, #0
    2800:	d10f      	bne.n	2822 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    2802:	230f      	movs	r3, #15
    2804:	18fb      	adds	r3, r7, r3
    2806:	781b      	ldrb	r3, [r3, #0]
    2808:	009b      	lsls	r3, r3, #2
    280a:	2210      	movs	r2, #16
    280c:	4694      	mov	ip, r2
    280e:	44bc      	add	ip, r7
    2810:	4463      	add	r3, ip
    2812:	3b08      	subs	r3, #8
    2814:	681a      	ldr	r2, [r3, #0]
    2816:	230e      	movs	r3, #14
    2818:	18fb      	adds	r3, r7, r3
    281a:	781b      	ldrb	r3, [r3, #0]
    281c:	01db      	lsls	r3, r3, #7
    281e:	18d3      	adds	r3, r2, r3
    2820:	e000      	b.n	2824 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    2822:	2300      	movs	r3, #0
}
    2824:	0018      	movs	r0, r3
    2826:	46bd      	mov	sp, r7
    2828:	b004      	add	sp, #16
    282a:	bd80      	pop	{r7, pc}
    282c:	41006000 	.word	0x41006000

00002830 <port_get_group_from_gpio_pin>:
{
    2830:	b580      	push	{r7, lr}
    2832:	b082      	sub	sp, #8
    2834:	af00      	add	r7, sp, #0
    2836:	0002      	movs	r2, r0
    2838:	1dfb      	adds	r3, r7, #7
    283a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    283c:	1dfb      	adds	r3, r7, #7
    283e:	781b      	ldrb	r3, [r3, #0]
    2840:	0018      	movs	r0, r3
    2842:	4b03      	ldr	r3, [pc, #12]	; (2850 <port_get_group_from_gpio_pin+0x20>)
    2844:	4798      	blx	r3
    2846:	0003      	movs	r3, r0
}
    2848:	0018      	movs	r0, r3
    284a:	46bd      	mov	sp, r7
    284c:	b002      	add	sp, #8
    284e:	bd80      	pop	{r7, pc}
    2850:	000027d1 	.word	0x000027d1

00002854 <port_get_config_defaults>:
{
    2854:	b580      	push	{r7, lr}
    2856:	b082      	sub	sp, #8
    2858:	af00      	add	r7, sp, #0
    285a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    285c:	687b      	ldr	r3, [r7, #4]
    285e:	2200      	movs	r2, #0
    2860:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    2862:	687b      	ldr	r3, [r7, #4]
    2864:	2201      	movs	r2, #1
    2866:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    2868:	687b      	ldr	r3, [r7, #4]
    286a:	2200      	movs	r2, #0
    286c:	709a      	strb	r2, [r3, #2]
}
    286e:	46c0      	nop			; (mov r8, r8)
    2870:	46bd      	mov	sp, r7
    2872:	b002      	add	sp, #8
    2874:	bd80      	pop	{r7, pc}
	...

00002878 <port_pin_set_output_level>:
{
    2878:	b580      	push	{r7, lr}
    287a:	b084      	sub	sp, #16
    287c:	af00      	add	r7, sp, #0
    287e:	0002      	movs	r2, r0
    2880:	1dfb      	adds	r3, r7, #7
    2882:	701a      	strb	r2, [r3, #0]
    2884:	1dbb      	adds	r3, r7, #6
    2886:	1c0a      	adds	r2, r1, #0
    2888:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    288a:	1dfb      	adds	r3, r7, #7
    288c:	781b      	ldrb	r3, [r3, #0]
    288e:	0018      	movs	r0, r3
    2890:	4b0d      	ldr	r3, [pc, #52]	; (28c8 <port_pin_set_output_level+0x50>)
    2892:	4798      	blx	r3
    2894:	0003      	movs	r3, r0
    2896:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2898:	1dfb      	adds	r3, r7, #7
    289a:	781b      	ldrb	r3, [r3, #0]
    289c:	221f      	movs	r2, #31
    289e:	4013      	ands	r3, r2
    28a0:	2201      	movs	r2, #1
    28a2:	409a      	lsls	r2, r3
    28a4:	0013      	movs	r3, r2
    28a6:	60bb      	str	r3, [r7, #8]
	if (level) {
    28a8:	1dbb      	adds	r3, r7, #6
    28aa:	781b      	ldrb	r3, [r3, #0]
    28ac:	2b00      	cmp	r3, #0
    28ae:	d003      	beq.n	28b8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    28b0:	68fb      	ldr	r3, [r7, #12]
    28b2:	68ba      	ldr	r2, [r7, #8]
    28b4:	619a      	str	r2, [r3, #24]
}
    28b6:	e002      	b.n	28be <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    28b8:	68fb      	ldr	r3, [r7, #12]
    28ba:	68ba      	ldr	r2, [r7, #8]
    28bc:	615a      	str	r2, [r3, #20]
}
    28be:	46c0      	nop			; (mov r8, r8)
    28c0:	46bd      	mov	sp, r7
    28c2:	b004      	add	sp, #16
    28c4:	bd80      	pop	{r7, pc}
    28c6:	46c0      	nop			; (mov r8, r8)
    28c8:	00002831 	.word	0x00002831

000028cc <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    28cc:	b580      	push	{r7, lr}
    28ce:	b082      	sub	sp, #8
    28d0:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    28d2:	1d3b      	adds	r3, r7, #4
    28d4:	0018      	movs	r0, r3
    28d6:	4b0e      	ldr	r3, [pc, #56]	; (2910 <system_board_init+0x44>)
    28d8:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    28da:	1d3b      	adds	r3, r7, #4
    28dc:	2201      	movs	r2, #1
    28de:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    28e0:	1d3b      	adds	r3, r7, #4
    28e2:	0019      	movs	r1, r3
    28e4:	205b      	movs	r0, #91	; 0x5b
    28e6:	4b0b      	ldr	r3, [pc, #44]	; (2914 <system_board_init+0x48>)
    28e8:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    28ea:	2101      	movs	r1, #1
    28ec:	205b      	movs	r0, #91	; 0x5b
    28ee:	4b0a      	ldr	r3, [pc, #40]	; (2918 <system_board_init+0x4c>)
    28f0:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    28f2:	1d3b      	adds	r3, r7, #4
    28f4:	2200      	movs	r2, #0
    28f6:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    28f8:	1d3b      	adds	r3, r7, #4
    28fa:	2201      	movs	r2, #1
    28fc:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    28fe:	1d3b      	adds	r3, r7, #4
    2900:	0019      	movs	r1, r3
    2902:	2041      	movs	r0, #65	; 0x41
    2904:	4b03      	ldr	r3, [pc, #12]	; (2914 <system_board_init+0x48>)
    2906:	4798      	blx	r3
}
    2908:	46c0      	nop			; (mov r8, r8)
    290a:	46bd      	mov	sp, r7
    290c:	b002      	add	sp, #8
    290e:	bd80      	pop	{r7, pc}
    2910:	00002855 	.word	0x00002855
    2914:	00002945 	.word	0x00002945
    2918:	00002879 	.word	0x00002879

0000291c <system_pinmux_get_config_defaults>:
{
    291c:	b580      	push	{r7, lr}
    291e:	b082      	sub	sp, #8
    2920:	af00      	add	r7, sp, #0
    2922:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2924:	687b      	ldr	r3, [r7, #4]
    2926:	2280      	movs	r2, #128	; 0x80
    2928:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    292a:	687b      	ldr	r3, [r7, #4]
    292c:	2200      	movs	r2, #0
    292e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2930:	687b      	ldr	r3, [r7, #4]
    2932:	2201      	movs	r2, #1
    2934:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2936:	687b      	ldr	r3, [r7, #4]
    2938:	2200      	movs	r2, #0
    293a:	70da      	strb	r2, [r3, #3]
}
    293c:	46c0      	nop			; (mov r8, r8)
    293e:	46bd      	mov	sp, r7
    2940:	b002      	add	sp, #8
    2942:	bd80      	pop	{r7, pc}

00002944 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2944:	b580      	push	{r7, lr}
    2946:	b084      	sub	sp, #16
    2948:	af00      	add	r7, sp, #0
    294a:	0002      	movs	r2, r0
    294c:	6039      	str	r1, [r7, #0]
    294e:	1dfb      	adds	r3, r7, #7
    2950:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    2952:	230c      	movs	r3, #12
    2954:	18fb      	adds	r3, r7, r3
    2956:	0018      	movs	r0, r3
    2958:	4b10      	ldr	r3, [pc, #64]	; (299c <port_pin_set_config+0x58>)
    295a:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    295c:	230c      	movs	r3, #12
    295e:	18fb      	adds	r3, r7, r3
    2960:	2280      	movs	r2, #128	; 0x80
    2962:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    2964:	683b      	ldr	r3, [r7, #0]
    2966:	781a      	ldrb	r2, [r3, #0]
    2968:	230c      	movs	r3, #12
    296a:	18fb      	adds	r3, r7, r3
    296c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    296e:	683b      	ldr	r3, [r7, #0]
    2970:	785a      	ldrb	r2, [r3, #1]
    2972:	230c      	movs	r3, #12
    2974:	18fb      	adds	r3, r7, r3
    2976:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    2978:	683b      	ldr	r3, [r7, #0]
    297a:	789a      	ldrb	r2, [r3, #2]
    297c:	230c      	movs	r3, #12
    297e:	18fb      	adds	r3, r7, r3
    2980:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    2982:	230c      	movs	r3, #12
    2984:	18fa      	adds	r2, r7, r3
    2986:	1dfb      	adds	r3, r7, #7
    2988:	781b      	ldrb	r3, [r3, #0]
    298a:	0011      	movs	r1, r2
    298c:	0018      	movs	r0, r3
    298e:	4b04      	ldr	r3, [pc, #16]	; (29a0 <port_pin_set_config+0x5c>)
    2990:	4798      	blx	r3
}
    2992:	46c0      	nop			; (mov r8, r8)
    2994:	46bd      	mov	sp, r7
    2996:	b004      	add	sp, #16
    2998:	bd80      	pop	{r7, pc}
    299a:	46c0      	nop			; (mov r8, r8)
    299c:	0000291d 	.word	0x0000291d
    29a0:	00003261 	.word	0x00003261

000029a4 <system_gclk_gen_get_config_defaults>:
{
    29a4:	b580      	push	{r7, lr}
    29a6:	b082      	sub	sp, #8
    29a8:	af00      	add	r7, sp, #0
    29aa:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    29ac:	687b      	ldr	r3, [r7, #4]
    29ae:	2201      	movs	r2, #1
    29b0:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    29b2:	687b      	ldr	r3, [r7, #4]
    29b4:	2200      	movs	r2, #0
    29b6:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    29b8:	687b      	ldr	r3, [r7, #4]
    29ba:	2205      	movs	r2, #5
    29bc:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    29be:	687b      	ldr	r3, [r7, #4]
    29c0:	2200      	movs	r2, #0
    29c2:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    29c4:	687b      	ldr	r3, [r7, #4]
    29c6:	2200      	movs	r2, #0
    29c8:	725a      	strb	r2, [r3, #9]
}
    29ca:	46c0      	nop			; (mov r8, r8)
    29cc:	46bd      	mov	sp, r7
    29ce:	b002      	add	sp, #8
    29d0:	bd80      	pop	{r7, pc}
	...

000029d4 <system_cpu_clock_set_divider>:
{
    29d4:	b580      	push	{r7, lr}
    29d6:	b082      	sub	sp, #8
    29d8:	af00      	add	r7, sp, #0
    29da:	0002      	movs	r2, r0
    29dc:	1dfb      	adds	r3, r7, #7
    29de:	701a      	strb	r2, [r3, #0]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    29e0:	4a05      	ldr	r2, [pc, #20]	; (29f8 <system_cpu_clock_set_divider+0x24>)
    29e2:	1dfb      	adds	r3, r7, #7
    29e4:	781b      	ldrb	r3, [r3, #0]
    29e6:	2101      	movs	r1, #1
    29e8:	4099      	lsls	r1, r3
    29ea:	000b      	movs	r3, r1
    29ec:	b2db      	uxtb	r3, r3
    29ee:	7113      	strb	r3, [r2, #4]
}
    29f0:	46c0      	nop			; (mov r8, r8)
    29f2:	46bd      	mov	sp, r7
    29f4:	b002      	add	sp, #8
    29f6:	bd80      	pop	{r7, pc}
    29f8:	40000800 	.word	0x40000800

000029fc <system_backup_clock_set_divider>:
{
    29fc:	b580      	push	{r7, lr}
    29fe:	b082      	sub	sp, #8
    2a00:	af00      	add	r7, sp, #0
    2a02:	0002      	movs	r2, r0
    2a04:	1dfb      	adds	r3, r7, #7
    2a06:	701a      	strb	r2, [r3, #0]
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    2a08:	4a05      	ldr	r2, [pc, #20]	; (2a20 <system_backup_clock_set_divider+0x24>)
    2a0a:	1dfb      	adds	r3, r7, #7
    2a0c:	781b      	ldrb	r3, [r3, #0]
    2a0e:	2101      	movs	r1, #1
    2a10:	4099      	lsls	r1, r3
    2a12:	000b      	movs	r3, r1
    2a14:	b2db      	uxtb	r3, r3
    2a16:	7193      	strb	r3, [r2, #6]
}
    2a18:	46c0      	nop			; (mov r8, r8)
    2a1a:	46bd      	mov	sp, r7
    2a1c:	b002      	add	sp, #8
    2a1e:	bd80      	pop	{r7, pc}
    2a20:	40000800 	.word	0x40000800

00002a24 <system_cpu_clock_get_hz>:
{
    2a24:	b580      	push	{r7, lr}
    2a26:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    2a28:	2000      	movs	r0, #0
    2a2a:	4b07      	ldr	r3, [pc, #28]	; (2a48 <system_cpu_clock_get_hz+0x24>)
    2a2c:	4798      	blx	r3
    2a2e:	0002      	movs	r2, r0
    2a30:	4b06      	ldr	r3, [pc, #24]	; (2a4c <system_cpu_clock_get_hz+0x28>)
    2a32:	791b      	ldrb	r3, [r3, #4]
    2a34:	b2db      	uxtb	r3, r3
    2a36:	0019      	movs	r1, r3
    2a38:	4b05      	ldr	r3, [pc, #20]	; (2a50 <system_cpu_clock_get_hz+0x2c>)
    2a3a:	0010      	movs	r0, r2
    2a3c:	4798      	blx	r3
    2a3e:	0003      	movs	r3, r0
}
    2a40:	0018      	movs	r0, r3
    2a42:	46bd      	mov	sp, r7
    2a44:	bd80      	pop	{r7, pc}
    2a46:	46c0      	nop			; (mov r8, r8)
    2a48:	00002eed 	.word	0x00002eed
    2a4c:	40000800 	.word	0x40000800
    2a50:	000036bd 	.word	0x000036bd

00002a54 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    2a54:	b580      	push	{r7, lr}
    2a56:	b082      	sub	sp, #8
    2a58:	af00      	add	r7, sp, #0
    2a5a:	0002      	movs	r2, r0
    2a5c:	1dfb      	adds	r3, r7, #7
    2a5e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2a60:	4a08      	ldr	r2, [pc, #32]	; (2a84 <system_flash_set_waitstates+0x30>)
    2a62:	1dfb      	adds	r3, r7, #7
    2a64:	781b      	ldrb	r3, [r3, #0]
    2a66:	210f      	movs	r1, #15
    2a68:	400b      	ands	r3, r1
    2a6a:	b2d9      	uxtb	r1, r3
    2a6c:	6853      	ldr	r3, [r2, #4]
    2a6e:	200f      	movs	r0, #15
    2a70:	4001      	ands	r1, r0
    2a72:	0049      	lsls	r1, r1, #1
    2a74:	201e      	movs	r0, #30
    2a76:	4383      	bics	r3, r0
    2a78:	430b      	orrs	r3, r1
    2a7a:	6053      	str	r3, [r2, #4]
}
    2a7c:	46c0      	nop			; (mov r8, r8)
    2a7e:	46bd      	mov	sp, r7
    2a80:	b002      	add	sp, #8
    2a82:	bd80      	pop	{r7, pc}
    2a84:	41004000 	.word	0x41004000

00002a88 <system_switch_performance_level>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid parameter
 * \retval STATUS_OK               Successfully
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{
    2a88:	b580      	push	{r7, lr}
    2a8a:	b082      	sub	sp, #8
    2a8c:	af00      	add	r7, sp, #0
    2a8e:	0002      	movs	r2, r0
    2a90:	1dfb      	adds	r3, r7, #7
    2a92:	701a      	strb	r2, [r3, #0]

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    2a94:	4b11      	ldr	r3, [pc, #68]	; (2adc <system_switch_performance_level+0x54>)
    2a96:	789b      	ldrb	r3, [r3, #2]
    2a98:	b2db      	uxtb	r3, r3
    2a9a:	1dfa      	adds	r2, r7, #7
    2a9c:	7812      	ldrb	r2, [r2, #0]
    2a9e:	429a      	cmp	r2, r3
    2aa0:	d101      	bne.n	2aa6 <system_switch_performance_level+0x1e>
		return STATUS_OK;
    2aa2:	2300      	movs	r3, #0
    2aa4:	e015      	b.n	2ad2 <system_switch_performance_level+0x4a>
	}

#if SAML22 || SAML21XXXB
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    2aa6:	4b0d      	ldr	r3, [pc, #52]	; (2adc <system_switch_performance_level+0x54>)
    2aa8:	789b      	ldrb	r3, [r3, #2]
    2aaa:	b2db      	uxtb	r3, r3
    2aac:	b25b      	sxtb	r3, r3
    2aae:	2b00      	cmp	r3, #0
    2ab0:	da01      	bge.n	2ab6 <system_switch_performance_level+0x2e>
		return STATUS_ERR_INVALID_ARG;
    2ab2:	2317      	movs	r3, #23
    2ab4:	e00d      	b.n	2ad2 <system_switch_performance_level+0x4a>
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    2ab6:	4b09      	ldr	r3, [pc, #36]	; (2adc <system_switch_performance_level+0x54>)
    2ab8:	2201      	movs	r2, #1
    2aba:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    2abc:	4a07      	ldr	r2, [pc, #28]	; (2adc <system_switch_performance_level+0x54>)
    2abe:	1dfb      	adds	r3, r7, #7
    2ac0:	781b      	ldrb	r3, [r3, #0]
    2ac2:	7093      	strb	r3, [r2, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    2ac4:	46c0      	nop			; (mov r8, r8)
    2ac6:	4b05      	ldr	r3, [pc, #20]	; (2adc <system_switch_performance_level+0x54>)
    2ac8:	799b      	ldrb	r3, [r3, #6]
    2aca:	b2db      	uxtb	r3, r3
    2acc:	2b00      	cmp	r3, #0
    2ace:	d0fa      	beq.n	2ac6 <system_switch_performance_level+0x3e>
		;
	}
	return STATUS_OK;
    2ad0:	2300      	movs	r3, #0
}
    2ad2:	0018      	movs	r0, r3
    2ad4:	46bd      	mov	sp, r7
    2ad6:	b002      	add	sp, #8
    2ad8:	bd80      	pop	{r7, pc}
    2ada:	46c0      	nop			; (mov r8, r8)
    2adc:	40000400 	.word	0x40000400

00002ae0 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    2ae0:	b580      	push	{r7, lr}
    2ae2:	af00      	add	r7, sp, #0
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    2ae4:	46c0      	nop			; (mov r8, r8)
    2ae6:	4b04      	ldr	r3, [pc, #16]	; (2af8 <_system_dfll_wait_for_sync+0x18>)
    2ae8:	68da      	ldr	r2, [r3, #12]
    2aea:	2380      	movs	r3, #128	; 0x80
    2aec:	005b      	lsls	r3, r3, #1
    2aee:	4013      	ands	r3, r2
    2af0:	d0f9      	beq.n	2ae6 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    2af2:	46c0      	nop			; (mov r8, r8)
    2af4:	46bd      	mov	sp, r7
    2af6:	bd80      	pop	{r7, pc}
    2af8:	40001000 	.word	0x40001000

00002afc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2afc:	b580      	push	{r7, lr}
    2afe:	b082      	sub	sp, #8
    2b00:	af00      	add	r7, sp, #0
    2b02:	0002      	movs	r2, r0
    2b04:	1dfb      	adds	r3, r7, #7
    2b06:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    2b08:	1dfb      	adds	r3, r7, #7
    2b0a:	781b      	ldrb	r3, [r3, #0]
    2b0c:	2b07      	cmp	r3, #7
    2b0e:	d83f      	bhi.n	2b90 <system_clock_source_get_hz+0x94>
    2b10:	009a      	lsls	r2, r3, #2
    2b12:	4b22      	ldr	r3, [pc, #136]	; (2b9c <system_clock_source_get_hz+0xa0>)
    2b14:	18d3      	adds	r3, r2, r3
    2b16:	681b      	ldr	r3, [r3, #0]
    2b18:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    2b1a:	4b21      	ldr	r3, [pc, #132]	; (2ba0 <system_clock_source_get_hz+0xa4>)
    2b1c:	691b      	ldr	r3, [r3, #16]
    2b1e:	e038      	b.n	2b92 <system_clock_source_get_hz+0x96>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    2b20:	4b20      	ldr	r3, [pc, #128]	; (2ba4 <system_clock_source_get_hz+0xa8>)
    2b22:	7d1b      	ldrb	r3, [r3, #20]
    2b24:	071b      	lsls	r3, r3, #28
    2b26:	0f9b      	lsrs	r3, r3, #30
    2b28:	b2db      	uxtb	r3, r3
    2b2a:	3301      	adds	r3, #1
    2b2c:	001a      	movs	r2, r3
    2b2e:	4b1e      	ldr	r3, [pc, #120]	; (2ba8 <system_clock_source_get_hz+0xac>)
    2b30:	4353      	muls	r3, r2
    2b32:	e02e      	b.n	2b92 <system_clock_source_get_hz+0x96>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    2b34:	2380      	movs	r3, #128	; 0x80
    2b36:	021b      	lsls	r3, r3, #8
    2b38:	e02b      	b.n	2b92 <system_clock_source_get_hz+0x96>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    2b3a:	4b19      	ldr	r3, [pc, #100]	; (2ba0 <system_clock_source_get_hz+0xa4>)
    2b3c:	695b      	ldr	r3, [r3, #20]
    2b3e:	e028      	b.n	2b92 <system_clock_source_get_hz+0x96>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    2b40:	4b17      	ldr	r3, [pc, #92]	; (2ba0 <system_clock_source_get_hz+0xa4>)
    2b42:	681b      	ldr	r3, [r3, #0]
    2b44:	2202      	movs	r2, #2
    2b46:	4013      	ands	r3, r2
    2b48:	d101      	bne.n	2b4e <system_clock_source_get_hz+0x52>
			return 0;
    2b4a:	2300      	movs	r3, #0
    2b4c:	e021      	b.n	2b92 <system_clock_source_get_hz+0x96>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    2b4e:	4b17      	ldr	r3, [pc, #92]	; (2bac <system_clock_source_get_hz+0xb0>)
    2b50:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    2b52:	4b13      	ldr	r3, [pc, #76]	; (2ba0 <system_clock_source_get_hz+0xa4>)
    2b54:	681b      	ldr	r3, [r3, #0]
    2b56:	2224      	movs	r2, #36	; 0x24
    2b58:	4013      	ands	r3, r2
    2b5a:	2b04      	cmp	r3, #4
    2b5c:	d109      	bne.n	2b72 <system_clock_source_get_hz+0x76>
				(OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_USBCRM)) {
		case OSCCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    2b5e:	2000      	movs	r0, #0
    2b60:	4b13      	ldr	r3, [pc, #76]	; (2bb0 <system_clock_source_get_hz+0xb4>)
    2b62:	4798      	blx	r3
    2b64:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    2b66:	4b0e      	ldr	r3, [pc, #56]	; (2ba0 <system_clock_source_get_hz+0xa4>)
    2b68:	689b      	ldr	r3, [r3, #8]
    2b6a:	041b      	lsls	r3, r3, #16
    2b6c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    2b6e:	4353      	muls	r3, r2
    2b70:	e00f      	b.n	2b92 <system_clock_source_get_hz+0x96>
		default:
			return 48000000UL;
    2b72:	4b10      	ldr	r3, [pc, #64]	; (2bb4 <system_clock_source_get_hz+0xb8>)
    2b74:	e00d      	b.n	2b92 <system_clock_source_get_hz+0x96>
		}

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    2b76:	4a0b      	ldr	r2, [pc, #44]	; (2ba4 <system_clock_source_get_hz+0xa8>)
    2b78:	2328      	movs	r3, #40	; 0x28
    2b7a:	5cd3      	ldrb	r3, [r2, r3]
    2b7c:	b2db      	uxtb	r3, r3
    2b7e:	001a      	movs	r2, r3
    2b80:	2302      	movs	r3, #2
    2b82:	4013      	ands	r3, r2
    2b84:	d101      	bne.n	2b8a <system_clock_source_get_hz+0x8e>
			return 0;
    2b86:	2300      	movs	r3, #0
    2b88:	e003      	b.n	2b92 <system_clock_source_get_hz+0x96>
		}

		return _system_clock_inst.dpll.frequency;
    2b8a:	4b05      	ldr	r3, [pc, #20]	; (2ba0 <system_clock_source_get_hz+0xa4>)
    2b8c:	68db      	ldr	r3, [r3, #12]
    2b8e:	e000      	b.n	2b92 <system_clock_source_get_hz+0x96>

	default:
		return 0;
    2b90:	2300      	movs	r3, #0
	}
}
    2b92:	0018      	movs	r0, r3
    2b94:	46bd      	mov	sp, r7
    2b96:	b002      	add	sp, #8
    2b98:	bd80      	pop	{r7, pc}
    2b9a:	46c0      	nop			; (mov r8, r8)
    2b9c:	0000438c 	.word	0x0000438c
    2ba0:	2000394c 	.word	0x2000394c
    2ba4:	40001000 	.word	0x40001000
    2ba8:	003d0900 	.word	0x003d0900
    2bac:	00002ae1 	.word	0x00002ae1
    2bb0:	0000309d 	.word	0x0000309d
    2bb4:	02dc6c00 	.word	0x02dc6c00

00002bb8 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2bb8:	b580      	push	{r7, lr}
    2bba:	b094      	sub	sp, #80	; 0x50
    2bbc:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    2bbe:	4b28      	ldr	r3, [pc, #160]	; (2c60 <system_clock_init+0xa8>)
    2bc0:	2280      	movs	r2, #128	; 0x80
    2bc2:	0052      	lsls	r2, r2, #1
    2bc4:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    2bc6:	4b27      	ldr	r3, [pc, #156]	; (2c64 <system_clock_init+0xac>)
    2bc8:	2203      	movs	r2, #3
    2bca:	609a      	str	r2, [r3, #8]

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    2bcc:	2000      	movs	r0, #0
    2bce:	4b26      	ldr	r3, [pc, #152]	; (2c68 <system_clock_init+0xb0>)
    2bd0:	4798      	blx	r3

	/*  Switch to PL2 to be sure configuration of GCLK0 is safe */
	system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_2);
    2bd2:	2002      	movs	r0, #2
    2bd4:	4b25      	ldr	r3, [pc, #148]	; (2c6c <system_clock_init+0xb4>)
    2bd6:	4798      	blx	r3
	}
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
    2bd8:	4a21      	ldr	r2, [pc, #132]	; (2c60 <system_clock_init+0xa8>)
    2bda:	7d13      	ldrb	r3, [r2, #20]
    2bdc:	2180      	movs	r1, #128	; 0x80
    2bde:	4249      	negs	r1, r1
    2be0:	430b      	orrs	r3, r1
    2be2:	7513      	strb	r3, [r2, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
    2be4:	4a1e      	ldr	r2, [pc, #120]	; (2c60 <system_clock_init+0xa8>)
    2be6:	7d13      	ldrb	r3, [r2, #20]
    2be8:	2140      	movs	r1, #64	; 0x40
    2bea:	438b      	bics	r3, r1
    2bec:	7513      	strb	r3, [r2, #20]
	} else {
		_system_clock_source_osc16m_freq_sel();
	}

	uint32_t mask = OSC32KCTRL->OSCULP32K.reg & (~(OSC32KCTRL_OSCULP32K_EN32K | OSC32KCTRL_OSCULP32K_EN1K));
    2bee:	4b20      	ldr	r3, [pc, #128]	; (2c70 <system_clock_init+0xb8>)
    2bf0:	69db      	ldr	r3, [r3, #28]
    2bf2:	2206      	movs	r2, #6
    2bf4:	4393      	bics	r3, r2
    2bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
	OSC32KCTRL->OSCULP32K.reg = mask | (CONF_CLOCK_OSCULP32K_ENABLE_1KHZ_OUTPUT << OSC32KCTRL_OSCULP32K_EN1K_Pos)
    2bf8:	4b1d      	ldr	r3, [pc, #116]	; (2c70 <system_clock_init+0xb8>)
									 | (CONF_CLOCK_OSCULP32K_ENABLE_32KHZ_OUTPUT << OSC32KCTRL_OSCULP32K_EN32K_Pos);
    2bfa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    2bfc:	2106      	movs	r1, #6
    2bfe:	430a      	orrs	r2, r1
	OSC32KCTRL->OSCULP32K.reg = mask | (CONF_CLOCK_OSCULP32K_ENABLE_1KHZ_OUTPUT << OSC32KCTRL_OSCULP32K_EN1K_Pos)
    2c00:	61da      	str	r2, [r3, #28]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2c02:	4b1c      	ldr	r3, [pc, #112]	; (2c74 <system_clock_init+0xbc>)
    2c04:	4798      	blx	r3
	}

#  endif

	/* CPU and BUS clocks */
	system_backup_clock_set_divider(CONF_CLOCK_BACKUP_DIVIDER);
    2c06:	2000      	movs	r0, #0
    2c08:	4b1b      	ldr	r3, [pc, #108]	; (2c78 <system_clock_init+0xc0>)
    2c0a:	4798      	blx	r3
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    2c0c:	2000      	movs	r0, #0
    2c0e:	4b1b      	ldr	r3, [pc, #108]	; (2c7c <system_clock_init+0xc4>)
    2c10:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2c12:	003b      	movs	r3, r7
    2c14:	0018      	movs	r0, r3
    2c16:	4b1a      	ldr	r3, [pc, #104]	; (2c80 <system_clock_init+0xc8>)
    2c18:	4798      	blx	r3
    2c1a:	003b      	movs	r3, r7
    2c1c:	2205      	movs	r2, #5
    2c1e:	701a      	strb	r2, [r3, #0]
    2c20:	003b      	movs	r3, r7
    2c22:	2201      	movs	r2, #1
    2c24:	605a      	str	r2, [r3, #4]
    2c26:	003b      	movs	r3, r7
    2c28:	2200      	movs	r2, #0
    2c2a:	721a      	strb	r2, [r3, #8]
    2c2c:	003b      	movs	r3, r7
    2c2e:	2200      	movs	r2, #0
    2c30:	725a      	strb	r2, [r3, #9]
    2c32:	003b      	movs	r3, r7
    2c34:	0019      	movs	r1, r3
    2c36:	2000      	movs	r0, #0
    2c38:	4b12      	ldr	r3, [pc, #72]	; (2c84 <system_clock_init+0xcc>)
    2c3a:	4798      	blx	r3
    2c3c:	2000      	movs	r0, #0
    2c3e:	4b12      	ldr	r3, [pc, #72]	; (2c88 <system_clock_init+0xd0>)
    2c40:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 8MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
    2c42:	4b12      	ldr	r3, [pc, #72]	; (2c8c <system_clock_init+0xd4>)
    2c44:	4798      	blx	r3
    2c46:	0003      	movs	r3, r0
    2c48:	64bb      	str	r3, [r7, #72]	; 0x48
	if (cpu_freq <= 8000000) {
    2c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2c4c:	4a10      	ldr	r2, [pc, #64]	; (2c90 <system_clock_init+0xd8>)
    2c4e:	4293      	cmp	r3, r2
    2c50:	d802      	bhi.n	2c58 <system_clock_init+0xa0>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
    2c52:	2000      	movs	r0, #0
    2c54:	4b05      	ldr	r3, [pc, #20]	; (2c6c <system_clock_init+0xb4>)
    2c56:	4798      	blx	r3
	}
}
    2c58:	46c0      	nop			; (mov r8, r8)
    2c5a:	46bd      	mov	sp, r7
    2c5c:	b014      	add	sp, #80	; 0x50
    2c5e:	bd80      	pop	{r7, pc}
    2c60:	40001000 	.word	0x40001000
    2c64:	40001800 	.word	0x40001800
    2c68:	00002a55 	.word	0x00002a55
    2c6c:	00002a89 	.word	0x00002a89
    2c70:	40001400 	.word	0x40001400
    2c74:	00002d51 	.word	0x00002d51
    2c78:	000029fd 	.word	0x000029fd
    2c7c:	000029d5 	.word	0x000029d5
    2c80:	000029a5 	.word	0x000029a5
    2c84:	00002d81 	.word	0x00002d81
    2c88:	00002e91 	.word	0x00002e91
    2c8c:	00002a25 	.word	0x00002a25
    2c90:	007a1200 	.word	0x007a1200

00002c94 <system_apb_clock_set_mask>:
{
    2c94:	b580      	push	{r7, lr}
    2c96:	b082      	sub	sp, #8
    2c98:	af00      	add	r7, sp, #0
    2c9a:	0002      	movs	r2, r0
    2c9c:	6039      	str	r1, [r7, #0]
    2c9e:	1dfb      	adds	r3, r7, #7
    2ca0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2ca2:	1dfb      	adds	r3, r7, #7
    2ca4:	781b      	ldrb	r3, [r3, #0]
    2ca6:	2b01      	cmp	r3, #1
    2ca8:	d00a      	beq.n	2cc0 <system_apb_clock_set_mask+0x2c>
    2caa:	2b02      	cmp	r3, #2
    2cac:	d00f      	beq.n	2cce <system_apb_clock_set_mask+0x3a>
    2cae:	2b00      	cmp	r3, #0
    2cb0:	d114      	bne.n	2cdc <system_apb_clock_set_mask+0x48>
			MCLK->APBAMASK.reg |= mask;
    2cb2:	4b0e      	ldr	r3, [pc, #56]	; (2cec <system_apb_clock_set_mask+0x58>)
    2cb4:	4a0d      	ldr	r2, [pc, #52]	; (2cec <system_apb_clock_set_mask+0x58>)
    2cb6:	6951      	ldr	r1, [r2, #20]
    2cb8:	683a      	ldr	r2, [r7, #0]
    2cba:	430a      	orrs	r2, r1
    2cbc:	615a      	str	r2, [r3, #20]
			break;
    2cbe:	e00f      	b.n	2ce0 <system_apb_clock_set_mask+0x4c>
			MCLK->APBBMASK.reg |= mask;
    2cc0:	4b0a      	ldr	r3, [pc, #40]	; (2cec <system_apb_clock_set_mask+0x58>)
    2cc2:	4a0a      	ldr	r2, [pc, #40]	; (2cec <system_apb_clock_set_mask+0x58>)
    2cc4:	6991      	ldr	r1, [r2, #24]
    2cc6:	683a      	ldr	r2, [r7, #0]
    2cc8:	430a      	orrs	r2, r1
    2cca:	619a      	str	r2, [r3, #24]
			break;
    2ccc:	e008      	b.n	2ce0 <system_apb_clock_set_mask+0x4c>
			MCLK->APBCMASK.reg |= mask;
    2cce:	4b07      	ldr	r3, [pc, #28]	; (2cec <system_apb_clock_set_mask+0x58>)
    2cd0:	4a06      	ldr	r2, [pc, #24]	; (2cec <system_apb_clock_set_mask+0x58>)
    2cd2:	69d1      	ldr	r1, [r2, #28]
    2cd4:	683a      	ldr	r2, [r7, #0]
    2cd6:	430a      	orrs	r2, r1
    2cd8:	61da      	str	r2, [r3, #28]
			break;
    2cda:	e001      	b.n	2ce0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    2cdc:	2317      	movs	r3, #23
    2cde:	e000      	b.n	2ce2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    2ce0:	2300      	movs	r3, #0
}
    2ce2:	0018      	movs	r0, r3
    2ce4:	46bd      	mov	sp, r7
    2ce6:	b002      	add	sp, #8
    2ce8:	bd80      	pop	{r7, pc}
    2cea:	46c0      	nop			; (mov r8, r8)
    2cec:	40000800 	.word	0x40000800

00002cf0 <system_interrupt_enter_critical_section>:
{
    2cf0:	b580      	push	{r7, lr}
    2cf2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    2cf4:	4b02      	ldr	r3, [pc, #8]	; (2d00 <system_interrupt_enter_critical_section+0x10>)
    2cf6:	4798      	blx	r3
}
    2cf8:	46c0      	nop			; (mov r8, r8)
    2cfa:	46bd      	mov	sp, r7
    2cfc:	bd80      	pop	{r7, pc}
    2cfe:	46c0      	nop			; (mov r8, r8)
    2d00:	0000273d 	.word	0x0000273d

00002d04 <system_interrupt_leave_critical_section>:
{
    2d04:	b580      	push	{r7, lr}
    2d06:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    2d08:	4b02      	ldr	r3, [pc, #8]	; (2d14 <system_interrupt_leave_critical_section+0x10>)
    2d0a:	4798      	blx	r3
}
    2d0c:	46c0      	nop			; (mov r8, r8)
    2d0e:	46bd      	mov	sp, r7
    2d10:	bd80      	pop	{r7, pc}
    2d12:	46c0      	nop			; (mov r8, r8)
    2d14:	00002791 	.word	0x00002791

00002d18 <system_gclk_is_syncing>:
  *
  * \retval false if the module has completed synchronization
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{
    2d18:	b580      	push	{r7, lr}
    2d1a:	b082      	sub	sp, #8
    2d1c:	af00      	add	r7, sp, #0
    2d1e:	0002      	movs	r2, r0
    2d20:	1dfb      	adds	r3, r7, #7
    2d22:	701a      	strb	r2, [r3, #0]

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    2d24:	4b09      	ldr	r3, [pc, #36]	; (2d4c <system_gclk_is_syncing+0x34>)
    2d26:	685b      	ldr	r3, [r3, #4]
    2d28:	1dfa      	adds	r2, r7, #7
    2d2a:	7812      	ldrb	r2, [r2, #0]
    2d2c:	2101      	movs	r1, #1
    2d2e:	4091      	lsls	r1, r2
    2d30:	000a      	movs	r2, r1
    2d32:	0092      	lsls	r2, r2, #2
    2d34:	4013      	ands	r3, r2
    2d36:	227c      	movs	r2, #124	; 0x7c
    2d38:	4013      	ands	r3, r2
    2d3a:	d001      	beq.n	2d40 <system_gclk_is_syncing+0x28>
		 return true;
    2d3c:	2301      	movs	r3, #1
    2d3e:	e000      	b.n	2d42 <system_gclk_is_syncing+0x2a>
	}

	 return false;
    2d40:	2300      	movs	r3, #0
}
    2d42:	0018      	movs	r0, r3
    2d44:	46bd      	mov	sp, r7
    2d46:	b002      	add	sp, #8
    2d48:	bd80      	pop	{r7, pc}
    2d4a:	46c0      	nop			; (mov r8, r8)
    2d4c:	40001c00 	.word	0x40001c00

00002d50 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    2d50:	b580      	push	{r7, lr}
    2d52:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);
    2d54:	2180      	movs	r1, #128	; 0x80
    2d56:	2000      	movs	r0, #0
    2d58:	4b07      	ldr	r3, [pc, #28]	; (2d78 <system_gclk_init+0x28>)
    2d5a:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    2d5c:	4b07      	ldr	r3, [pc, #28]	; (2d7c <system_gclk_init+0x2c>)
    2d5e:	2201      	movs	r2, #1
    2d60:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    2d62:	46c0      	nop			; (mov r8, r8)
    2d64:	4b05      	ldr	r3, [pc, #20]	; (2d7c <system_gclk_init+0x2c>)
    2d66:	781b      	ldrb	r3, [r3, #0]
    2d68:	b2db      	uxtb	r3, r3
    2d6a:	001a      	movs	r2, r3
    2d6c:	2301      	movs	r3, #1
    2d6e:	4013      	ands	r3, r2
    2d70:	d1f8      	bne.n	2d64 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    2d72:	46c0      	nop			; (mov r8, r8)
    2d74:	46bd      	mov	sp, r7
    2d76:	bd80      	pop	{r7, pc}
    2d78:	00002c95 	.word	0x00002c95
    2d7c:	40001c00 	.word	0x40001c00

00002d80 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2d80:	b580      	push	{r7, lr}
    2d82:	b086      	sub	sp, #24
    2d84:	af00      	add	r7, sp, #0
    2d86:	0002      	movs	r2, r0
    2d88:	6039      	str	r1, [r7, #0]
    2d8a:	1dfb      	adds	r3, r7, #7
    2d8c:	701a      	strb	r2, [r3, #0]
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2d8e:	683b      	ldr	r3, [r7, #0]
    2d90:	781b      	ldrb	r3, [r3, #0]
    2d92:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2d94:	683b      	ldr	r3, [r7, #0]
    2d96:	785b      	ldrb	r3, [r3, #1]
    2d98:	2b00      	cmp	r3, #0
    2d9a:	d004      	beq.n	2da6 <system_gclk_gen_set_config+0x26>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2d9c:	697b      	ldr	r3, [r7, #20]
    2d9e:	2280      	movs	r2, #128	; 0x80
    2da0:	00d2      	lsls	r2, r2, #3
    2da2:	4313      	orrs	r3, r2
    2da4:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2da6:	683b      	ldr	r3, [r7, #0]
    2da8:	7a5b      	ldrb	r3, [r3, #9]
    2daa:	2b00      	cmp	r3, #0
    2dac:	d004      	beq.n	2db8 <system_gclk_gen_set_config+0x38>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2dae:	697b      	ldr	r3, [r7, #20]
    2db0:	2280      	movs	r2, #128	; 0x80
    2db2:	0112      	lsls	r2, r2, #4
    2db4:	4313      	orrs	r3, r2
    2db6:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2db8:	683b      	ldr	r3, [r7, #0]
    2dba:	685b      	ldr	r3, [r3, #4]
    2dbc:	2b01      	cmp	r3, #1
    2dbe:	d92c      	bls.n	2e1a <system_gclk_gen_set_config+0x9a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2dc0:	683b      	ldr	r3, [r7, #0]
    2dc2:	685a      	ldr	r2, [r3, #4]
    2dc4:	683b      	ldr	r3, [r7, #0]
    2dc6:	685b      	ldr	r3, [r3, #4]
    2dc8:	3b01      	subs	r3, #1
    2dca:	4013      	ands	r3, r2
    2dcc:	d11a      	bne.n	2e04 <system_gclk_gen_set_config+0x84>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    2dce:	2300      	movs	r3, #0
    2dd0:	613b      	str	r3, [r7, #16]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2dd2:	2302      	movs	r3, #2
    2dd4:	60fb      	str	r3, [r7, #12]
    2dd6:	e005      	b.n	2de4 <system_gclk_gen_set_config+0x64>
						mask <<= 1) {
				div2_count++;
    2dd8:	693b      	ldr	r3, [r7, #16]
    2dda:	3301      	adds	r3, #1
    2ddc:	613b      	str	r3, [r7, #16]
						mask <<= 1) {
    2dde:	68fb      	ldr	r3, [r7, #12]
    2de0:	005b      	lsls	r3, r3, #1
    2de2:	60fb      	str	r3, [r7, #12]
			for (mask = (1UL << 1); mask < config->division_factor;
    2de4:	683b      	ldr	r3, [r7, #0]
    2de6:	685a      	ldr	r2, [r3, #4]
    2de8:	68fb      	ldr	r3, [r7, #12]
    2dea:	429a      	cmp	r2, r3
    2dec:	d8f4      	bhi.n	2dd8 <system_gclk_gen_set_config+0x58>
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    2dee:	693b      	ldr	r3, [r7, #16]
    2df0:	041b      	lsls	r3, r3, #16
    2df2:	697a      	ldr	r2, [r7, #20]
    2df4:	4313      	orrs	r3, r2
    2df6:	617b      	str	r3, [r7, #20]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2df8:	697b      	ldr	r3, [r7, #20]
    2dfa:	2280      	movs	r2, #128	; 0x80
    2dfc:	0152      	lsls	r2, r2, #5
    2dfe:	4313      	orrs	r3, r2
    2e00:	617b      	str	r3, [r7, #20]
    2e02:	e00a      	b.n	2e1a <system_gclk_gen_set_config+0x9a>
		} else {
			/* Set integer division factor */

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    2e04:	683b      	ldr	r3, [r7, #0]
    2e06:	685b      	ldr	r3, [r3, #4]
    2e08:	041b      	lsls	r3, r3, #16
			new_genctrl_config  |=
    2e0a:	697a      	ldr	r2, [r7, #20]
    2e0c:	4313      	orrs	r3, r2
    2e0e:	617b      	str	r3, [r7, #20]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2e10:	697b      	ldr	r3, [r7, #20]
    2e12:	2280      	movs	r2, #128	; 0x80
    2e14:	0092      	lsls	r2, r2, #2
    2e16:	4313      	orrs	r3, r2
    2e18:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2e1a:	683b      	ldr	r3, [r7, #0]
    2e1c:	7a1b      	ldrb	r3, [r3, #8]
    2e1e:	2b00      	cmp	r3, #0
    2e20:	d004      	beq.n	2e2c <system_gclk_gen_set_config+0xac>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2e22:	697b      	ldr	r3, [r7, #20]
    2e24:	2280      	movs	r2, #128	; 0x80
    2e26:	0192      	lsls	r2, r2, #6
    2e28:	4313      	orrs	r3, r2
    2e2a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing(generator)) {
    2e2c:	46c0      	nop			; (mov r8, r8)
    2e2e:	1dfb      	adds	r3, r7, #7
    2e30:	781b      	ldrb	r3, [r3, #0]
    2e32:	0018      	movs	r0, r3
    2e34:	4b12      	ldr	r3, [pc, #72]	; (2e80 <system_gclk_gen_set_config+0x100>)
    2e36:	4798      	blx	r3
    2e38:	1e03      	subs	r3, r0, #0
    2e3a:	d1f8      	bne.n	2e2e <system_gclk_gen_set_config+0xae>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    2e3c:	4b11      	ldr	r3, [pc, #68]	; (2e84 <system_gclk_gen_set_config+0x104>)
    2e3e:	4798      	blx	r3

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    2e40:	4811      	ldr	r0, [pc, #68]	; (2e88 <system_gclk_gen_set_config+0x108>)
    2e42:	1dfb      	adds	r3, r7, #7
    2e44:	781b      	ldrb	r3, [r3, #0]
    2e46:	4910      	ldr	r1, [pc, #64]	; (2e88 <system_gclk_gen_set_config+0x108>)
    2e48:	1dfa      	adds	r2, r7, #7
    2e4a:	7812      	ldrb	r2, [r2, #0]
    2e4c:	3208      	adds	r2, #8
    2e4e:	0092      	lsls	r2, r2, #2
    2e50:	5851      	ldr	r1, [r2, r1]
    2e52:	2280      	movs	r2, #128	; 0x80
    2e54:	0052      	lsls	r2, r2, #1
    2e56:	4011      	ands	r1, r2
    2e58:	697a      	ldr	r2, [r7, #20]
    2e5a:	430a      	orrs	r2, r1
    2e5c:	3308      	adds	r3, #8
    2e5e:	009b      	lsls	r3, r3, #2
    2e60:	501a      	str	r2, [r3, r0]

	while (system_gclk_is_syncing(generator)) {
    2e62:	46c0      	nop			; (mov r8, r8)
    2e64:	1dfb      	adds	r3, r7, #7
    2e66:	781b      	ldrb	r3, [r3, #0]
    2e68:	0018      	movs	r0, r3
    2e6a:	4b05      	ldr	r3, [pc, #20]	; (2e80 <system_gclk_gen_set_config+0x100>)
    2e6c:	4798      	blx	r3
    2e6e:	1e03      	subs	r3, r0, #0
    2e70:	d1f8      	bne.n	2e64 <system_gclk_gen_set_config+0xe4>
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
    2e72:	4b06      	ldr	r3, [pc, #24]	; (2e8c <system_gclk_gen_set_config+0x10c>)
    2e74:	4798      	blx	r3
}
    2e76:	46c0      	nop			; (mov r8, r8)
    2e78:	46bd      	mov	sp, r7
    2e7a:	b006      	add	sp, #24
    2e7c:	bd80      	pop	{r7, pc}
    2e7e:	46c0      	nop			; (mov r8, r8)
    2e80:	00002d19 	.word	0x00002d19
    2e84:	00002cf1 	.word	0x00002cf1
    2e88:	40001c00 	.word	0x40001c00
    2e8c:	00002d05 	.word	0x00002d05

00002e90 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2e90:	b580      	push	{r7, lr}
    2e92:	b082      	sub	sp, #8
    2e94:	af00      	add	r7, sp, #0
    2e96:	0002      	movs	r2, r0
    2e98:	1dfb      	adds	r3, r7, #7
    2e9a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing(generator)) {
    2e9c:	46c0      	nop			; (mov r8, r8)
    2e9e:	1dfb      	adds	r3, r7, #7
    2ea0:	781b      	ldrb	r3, [r3, #0]
    2ea2:	0018      	movs	r0, r3
    2ea4:	4b0d      	ldr	r3, [pc, #52]	; (2edc <system_gclk_gen_enable+0x4c>)
    2ea6:	4798      	blx	r3
    2ea8:	1e03      	subs	r3, r0, #0
    2eaa:	d1f8      	bne.n	2e9e <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    2eac:	4b0c      	ldr	r3, [pc, #48]	; (2ee0 <system_gclk_gen_enable+0x50>)
    2eae:	4798      	blx	r3

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    2eb0:	480c      	ldr	r0, [pc, #48]	; (2ee4 <system_gclk_gen_enable+0x54>)
    2eb2:	1dfb      	adds	r3, r7, #7
    2eb4:	781b      	ldrb	r3, [r3, #0]
    2eb6:	490b      	ldr	r1, [pc, #44]	; (2ee4 <system_gclk_gen_enable+0x54>)
    2eb8:	1dfa      	adds	r2, r7, #7
    2eba:	7812      	ldrb	r2, [r2, #0]
    2ebc:	3208      	adds	r2, #8
    2ebe:	0092      	lsls	r2, r2, #2
    2ec0:	5852      	ldr	r2, [r2, r1]
    2ec2:	2180      	movs	r1, #128	; 0x80
    2ec4:	0049      	lsls	r1, r1, #1
    2ec6:	430a      	orrs	r2, r1
    2ec8:	3308      	adds	r3, #8
    2eca:	009b      	lsls	r3, r3, #2
    2ecc:	501a      	str	r2, [r3, r0]

	system_interrupt_leave_critical_section();
    2ece:	4b06      	ldr	r3, [pc, #24]	; (2ee8 <system_gclk_gen_enable+0x58>)
    2ed0:	4798      	blx	r3
}
    2ed2:	46c0      	nop			; (mov r8, r8)
    2ed4:	46bd      	mov	sp, r7
    2ed6:	b002      	add	sp, #8
    2ed8:	bd80      	pop	{r7, pc}
    2eda:	46c0      	nop			; (mov r8, r8)
    2edc:	00002d19 	.word	0x00002d19
    2ee0:	00002cf1 	.word	0x00002cf1
    2ee4:	40001c00 	.word	0x40001c00
    2ee8:	00002d05 	.word	0x00002d05

00002eec <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2eec:	b580      	push	{r7, lr}
    2eee:	b086      	sub	sp, #24
    2ef0:	af00      	add	r7, sp, #0
    2ef2:	0002      	movs	r2, r0
    2ef4:	1dfb      	adds	r3, r7, #7
    2ef6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing(generator)) {
    2ef8:	46c0      	nop			; (mov r8, r8)
    2efa:	1dfb      	adds	r3, r7, #7
    2efc:	781b      	ldrb	r3, [r3, #0]
    2efe:	0018      	movs	r0, r3
    2f00:	4b24      	ldr	r3, [pc, #144]	; (2f94 <system_gclk_gen_get_hz+0xa8>)
    2f02:	4798      	blx	r3
    2f04:	1e03      	subs	r3, r0, #0
    2f06:	d1f8      	bne.n	2efa <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    2f08:	4b23      	ldr	r3, [pc, #140]	; (2f98 <system_gclk_gen_get_hz+0xac>)
    2f0a:	4798      	blx	r3

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    2f0c:	4a23      	ldr	r2, [pc, #140]	; (2f9c <system_gclk_gen_get_hz+0xb0>)
    2f0e:	1dfb      	adds	r3, r7, #7
    2f10:	781b      	ldrb	r3, [r3, #0]
    2f12:	3308      	adds	r3, #8
    2f14:	009b      	lsls	r3, r3, #2
    2f16:	589b      	ldr	r3, [r3, r2]
    2f18:	075b      	lsls	r3, r3, #29
    2f1a:	0f5b      	lsrs	r3, r3, #29
    2f1c:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2f1e:	0018      	movs	r0, r3
    2f20:	4b1f      	ldr	r3, [pc, #124]	; (2fa0 <system_gclk_gen_get_hz+0xb4>)
    2f22:	4798      	blx	r3
    2f24:	0003      	movs	r3, r0
    2f26:	617b      	str	r3, [r7, #20]

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    2f28:	4a1c      	ldr	r2, [pc, #112]	; (2f9c <system_gclk_gen_get_hz+0xb0>)
    2f2a:	1dfb      	adds	r3, r7, #7
    2f2c:	781b      	ldrb	r3, [r3, #0]
    2f2e:	3308      	adds	r3, #8
    2f30:	009b      	lsls	r3, r3, #2
    2f32:	589b      	ldr	r3, [r3, r2]
    2f34:	04db      	lsls	r3, r3, #19
    2f36:	0fdb      	lsrs	r3, r3, #31
    2f38:	b2da      	uxtb	r2, r3
    2f3a:	2313      	movs	r3, #19
    2f3c:	18fb      	adds	r3, r7, r3
    2f3e:	701a      	strb	r2, [r3, #0]
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    2f40:	4a16      	ldr	r2, [pc, #88]	; (2f9c <system_gclk_gen_get_hz+0xb0>)
    2f42:	1dfb      	adds	r3, r7, #7
    2f44:	781b      	ldrb	r3, [r3, #0]
    2f46:	3308      	adds	r3, #8
    2f48:	009b      	lsls	r3, r3, #2
    2f4a:	589b      	ldr	r3, [r3, r2]
    2f4c:	0c1b      	lsrs	r3, r3, #16
    2f4e:	b29b      	uxth	r3, r3
    2f50:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    2f52:	4b14      	ldr	r3, [pc, #80]	; (2fa4 <system_gclk_gen_get_hz+0xb8>)
    2f54:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2f56:	2313      	movs	r3, #19
    2f58:	18fb      	adds	r3, r7, r3
    2f5a:	781b      	ldrb	r3, [r3, #0]
    2f5c:	2b00      	cmp	r3, #0
    2f5e:	d109      	bne.n	2f74 <system_gclk_gen_get_hz+0x88>
    2f60:	68fb      	ldr	r3, [r7, #12]
    2f62:	2b01      	cmp	r3, #1
    2f64:	d906      	bls.n	2f74 <system_gclk_gen_get_hz+0x88>
		gen_input_hz /= divider;
    2f66:	4b10      	ldr	r3, [pc, #64]	; (2fa8 <system_gclk_gen_get_hz+0xbc>)
    2f68:	68f9      	ldr	r1, [r7, #12]
    2f6a:	6978      	ldr	r0, [r7, #20]
    2f6c:	4798      	blx	r3
    2f6e:	0003      	movs	r3, r0
    2f70:	617b      	str	r3, [r7, #20]
    2f72:	e00a      	b.n	2f8a <system_gclk_gen_get_hz+0x9e>
	} else if (divsel) {
    2f74:	2313      	movs	r3, #19
    2f76:	18fb      	adds	r3, r7, r3
    2f78:	781b      	ldrb	r3, [r3, #0]
    2f7a:	2b00      	cmp	r3, #0
    2f7c:	d005      	beq.n	2f8a <system_gclk_gen_get_hz+0x9e>
		gen_input_hz >>= (divider+1);
    2f7e:	68fb      	ldr	r3, [r7, #12]
    2f80:	3301      	adds	r3, #1
    2f82:	697a      	ldr	r2, [r7, #20]
    2f84:	40da      	lsrs	r2, r3
    2f86:	0013      	movs	r3, r2
    2f88:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    2f8a:	697b      	ldr	r3, [r7, #20]
}
    2f8c:	0018      	movs	r0, r3
    2f8e:	46bd      	mov	sp, r7
    2f90:	b006      	add	sp, #24
    2f92:	bd80      	pop	{r7, pc}
    2f94:	00002d19 	.word	0x00002d19
    2f98:	00002cf1 	.word	0x00002cf1
    2f9c:	40001c00 	.word	0x40001c00
    2fa0:	00002afd 	.word	0x00002afd
    2fa4:	00002d05 	.word	0x00002d05
    2fa8:	000036bd 	.word	0x000036bd

00002fac <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    2fac:	b580      	push	{r7, lr}
    2fae:	b082      	sub	sp, #8
    2fb0:	af00      	add	r7, sp, #0
    2fb2:	0002      	movs	r2, r0
    2fb4:	6039      	str	r1, [r7, #0]
    2fb6:	1dfb      	adds	r3, r7, #7
    2fb8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    2fba:	1dfb      	adds	r3, r7, #7
    2fbc:	781b      	ldrb	r3, [r3, #0]
    2fbe:	0018      	movs	r0, r3
    2fc0:	4b08      	ldr	r3, [pc, #32]	; (2fe4 <system_gclk_chan_set_config+0x38>)
    2fc2:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    2fc4:	4908      	ldr	r1, [pc, #32]	; (2fe8 <system_gclk_chan_set_config+0x3c>)
    2fc6:	1dfb      	adds	r3, r7, #7
    2fc8:	781b      	ldrb	r3, [r3, #0]
    2fca:	683a      	ldr	r2, [r7, #0]
    2fcc:	7812      	ldrb	r2, [r2, #0]
    2fce:	0010      	movs	r0, r2
    2fd0:	2207      	movs	r2, #7
    2fd2:	4002      	ands	r2, r0
    2fd4:	3320      	adds	r3, #32
    2fd6:	009b      	lsls	r3, r3, #2
    2fd8:	505a      	str	r2, [r3, r1]


}
    2fda:	46c0      	nop			; (mov r8, r8)
    2fdc:	46bd      	mov	sp, r7
    2fde:	b002      	add	sp, #8
    2fe0:	bd80      	pop	{r7, pc}
    2fe2:	46c0      	nop			; (mov r8, r8)
    2fe4:	00003045 	.word	0x00003045
    2fe8:	40001c00 	.word	0x40001c00

00002fec <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2fec:	b580      	push	{r7, lr}
    2fee:	b082      	sub	sp, #8
    2ff0:	af00      	add	r7, sp, #0
    2ff2:	0002      	movs	r2, r0
    2ff4:	1dfb      	adds	r3, r7, #7
    2ff6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    2ff8:	4b0f      	ldr	r3, [pc, #60]	; (3038 <system_gclk_chan_enable+0x4c>)
    2ffa:	4798      	blx	r3

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    2ffc:	490f      	ldr	r1, [pc, #60]	; (303c <system_gclk_chan_enable+0x50>)
    2ffe:	1dfb      	adds	r3, r7, #7
    3000:	781b      	ldrb	r3, [r3, #0]
    3002:	480e      	ldr	r0, [pc, #56]	; (303c <system_gclk_chan_enable+0x50>)
    3004:	1dfa      	adds	r2, r7, #7
    3006:	7812      	ldrb	r2, [r2, #0]
    3008:	3220      	adds	r2, #32
    300a:	0092      	lsls	r2, r2, #2
    300c:	5812      	ldr	r2, [r2, r0]
    300e:	2040      	movs	r0, #64	; 0x40
    3010:	4302      	orrs	r2, r0
    3012:	3320      	adds	r3, #32
    3014:	009b      	lsls	r3, r3, #2
    3016:	505a      	str	r2, [r3, r1]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    3018:	46c0      	nop			; (mov r8, r8)
    301a:	4a08      	ldr	r2, [pc, #32]	; (303c <system_gclk_chan_enable+0x50>)
    301c:	1dfb      	adds	r3, r7, #7
    301e:	781b      	ldrb	r3, [r3, #0]
    3020:	3320      	adds	r3, #32
    3022:	009b      	lsls	r3, r3, #2
    3024:	589b      	ldr	r3, [r3, r2]
    3026:	2240      	movs	r2, #64	; 0x40
    3028:	4013      	ands	r3, r2
    302a:	d0f6      	beq.n	301a <system_gclk_chan_enable+0x2e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
    302c:	4b04      	ldr	r3, [pc, #16]	; (3040 <system_gclk_chan_enable+0x54>)
    302e:	4798      	blx	r3
}
    3030:	46c0      	nop			; (mov r8, r8)
    3032:	46bd      	mov	sp, r7
    3034:	b002      	add	sp, #8
    3036:	bd80      	pop	{r7, pc}
    3038:	00002cf1 	.word	0x00002cf1
    303c:	40001c00 	.word	0x40001c00
    3040:	00002d05 	.word	0x00002d05

00003044 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3044:	b580      	push	{r7, lr}
    3046:	b082      	sub	sp, #8
    3048:	af00      	add	r7, sp, #0
    304a:	0002      	movs	r2, r0
    304c:	1dfb      	adds	r3, r7, #7
    304e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    3050:	4b0f      	ldr	r3, [pc, #60]	; (3090 <system_gclk_chan_disable+0x4c>)
    3052:	4798      	blx	r3

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    3054:	490f      	ldr	r1, [pc, #60]	; (3094 <system_gclk_chan_disable+0x50>)
    3056:	1dfb      	adds	r3, r7, #7
    3058:	781b      	ldrb	r3, [r3, #0]
    305a:	480e      	ldr	r0, [pc, #56]	; (3094 <system_gclk_chan_disable+0x50>)
    305c:	1dfa      	adds	r2, r7, #7
    305e:	7812      	ldrb	r2, [r2, #0]
    3060:	3220      	adds	r2, #32
    3062:	0092      	lsls	r2, r2, #2
    3064:	5812      	ldr	r2, [r2, r0]
    3066:	2040      	movs	r0, #64	; 0x40
    3068:	4382      	bics	r2, r0
    306a:	3320      	adds	r3, #32
    306c:	009b      	lsls	r3, r3, #2
    306e:	505a      	str	r2, [r3, r1]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    3070:	46c0      	nop			; (mov r8, r8)
    3072:	4a08      	ldr	r2, [pc, #32]	; (3094 <system_gclk_chan_disable+0x50>)
    3074:	1dfb      	adds	r3, r7, #7
    3076:	781b      	ldrb	r3, [r3, #0]
    3078:	3320      	adds	r3, #32
    307a:	009b      	lsls	r3, r3, #2
    307c:	589b      	ldr	r3, [r3, r2]
    307e:	2240      	movs	r2, #64	; 0x40
    3080:	4013      	ands	r3, r2
    3082:	d1f6      	bne.n	3072 <system_gclk_chan_disable+0x2e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
    3084:	4b04      	ldr	r3, [pc, #16]	; (3098 <system_gclk_chan_disable+0x54>)
    3086:	4798      	blx	r3
}
    3088:	46c0      	nop			; (mov r8, r8)
    308a:	46bd      	mov	sp, r7
    308c:	b002      	add	sp, #8
    308e:	bd80      	pop	{r7, pc}
    3090:	00002cf1 	.word	0x00002cf1
    3094:	40001c00 	.word	0x40001c00
    3098:	00002d05 	.word	0x00002d05

0000309c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    309c:	b580      	push	{r7, lr}
    309e:	b084      	sub	sp, #16
    30a0:	af00      	add	r7, sp, #0
    30a2:	0002      	movs	r2, r0
    30a4:	1dfb      	adds	r3, r7, #7
    30a6:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    30a8:	4b0d      	ldr	r3, [pc, #52]	; (30e0 <system_gclk_chan_get_hz+0x44>)
    30aa:	4798      	blx	r3
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    30ac:	4a0d      	ldr	r2, [pc, #52]	; (30e4 <system_gclk_chan_get_hz+0x48>)
    30ae:	1dfb      	adds	r3, r7, #7
    30b0:	781b      	ldrb	r3, [r3, #0]
    30b2:	3320      	adds	r3, #32
    30b4:	009b      	lsls	r3, r3, #2
    30b6:	589b      	ldr	r3, [r3, r2]
    30b8:	075b      	lsls	r3, r3, #29
    30ba:	0f5b      	lsrs	r3, r3, #29
    30bc:	b2da      	uxtb	r2, r3
    30be:	230f      	movs	r3, #15
    30c0:	18fb      	adds	r3, r7, r3
    30c2:	701a      	strb	r2, [r3, #0]
	system_interrupt_leave_critical_section();
    30c4:	4b08      	ldr	r3, [pc, #32]	; (30e8 <system_gclk_chan_get_hz+0x4c>)
    30c6:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    30c8:	230f      	movs	r3, #15
    30ca:	18fb      	adds	r3, r7, r3
    30cc:	781b      	ldrb	r3, [r3, #0]
    30ce:	0018      	movs	r0, r3
    30d0:	4b06      	ldr	r3, [pc, #24]	; (30ec <system_gclk_chan_get_hz+0x50>)
    30d2:	4798      	blx	r3
    30d4:	0003      	movs	r3, r0
}
    30d6:	0018      	movs	r0, r3
    30d8:	46bd      	mov	sp, r7
    30da:	b004      	add	sp, #16
    30dc:	bd80      	pop	{r7, pc}
    30de:	46c0      	nop			; (mov r8, r8)
    30e0:	00002cf1 	.word	0x00002cf1
    30e4:	40001c00 	.word	0x40001c00
    30e8:	00002d05 	.word	0x00002d05
    30ec:	00002eed 	.word	0x00002eed

000030f0 <system_pinmux_get_group_from_gpio_pin>:
{
    30f0:	b580      	push	{r7, lr}
    30f2:	b084      	sub	sp, #16
    30f4:	af00      	add	r7, sp, #0
    30f6:	0002      	movs	r2, r0
    30f8:	1dfb      	adds	r3, r7, #7
    30fa:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    30fc:	230f      	movs	r3, #15
    30fe:	18fb      	adds	r3, r7, r3
    3100:	1dfa      	adds	r2, r7, #7
    3102:	7812      	ldrb	r2, [r2, #0]
    3104:	09d2      	lsrs	r2, r2, #7
    3106:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3108:	230e      	movs	r3, #14
    310a:	18fb      	adds	r3, r7, r3
    310c:	1dfa      	adds	r2, r7, #7
    310e:	7812      	ldrb	r2, [r2, #0]
    3110:	0952      	lsrs	r2, r2, #5
    3112:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3114:	4b0d      	ldr	r3, [pc, #52]	; (314c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3116:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    3118:	230f      	movs	r3, #15
    311a:	18fb      	adds	r3, r7, r3
    311c:	781b      	ldrb	r3, [r3, #0]
    311e:	2b00      	cmp	r3, #0
    3120:	d10f      	bne.n	3142 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3122:	230f      	movs	r3, #15
    3124:	18fb      	adds	r3, r7, r3
    3126:	781b      	ldrb	r3, [r3, #0]
    3128:	009b      	lsls	r3, r3, #2
    312a:	2210      	movs	r2, #16
    312c:	4694      	mov	ip, r2
    312e:	44bc      	add	ip, r7
    3130:	4463      	add	r3, ip
    3132:	3b08      	subs	r3, #8
    3134:	681a      	ldr	r2, [r3, #0]
    3136:	230e      	movs	r3, #14
    3138:	18fb      	adds	r3, r7, r3
    313a:	781b      	ldrb	r3, [r3, #0]
    313c:	01db      	lsls	r3, r3, #7
    313e:	18d3      	adds	r3, r2, r3
    3140:	e000      	b.n	3144 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    3142:	2300      	movs	r3, #0
}
    3144:	0018      	movs	r0, r3
    3146:	46bd      	mov	sp, r7
    3148:	b004      	add	sp, #16
    314a:	bd80      	pop	{r7, pc}
    314c:	41006000 	.word	0x41006000

00003150 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3150:	b580      	push	{r7, lr}
    3152:	b088      	sub	sp, #32
    3154:	af00      	add	r7, sp, #0
    3156:	60f8      	str	r0, [r7, #12]
    3158:	60b9      	str	r1, [r7, #8]
    315a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    315c:	2300      	movs	r3, #0
    315e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    3160:	687b      	ldr	r3, [r7, #4]
    3162:	78db      	ldrb	r3, [r3, #3]
    3164:	2201      	movs	r2, #1
    3166:	4053      	eors	r3, r2
    3168:	b2db      	uxtb	r3, r3
    316a:	2b00      	cmp	r3, #0
    316c:	d035      	beq.n	31da <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    316e:	687b      	ldr	r3, [r7, #4]
    3170:	781b      	ldrb	r3, [r3, #0]
    3172:	2b80      	cmp	r3, #128	; 0x80
    3174:	d00b      	beq.n	318e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    3176:	69fb      	ldr	r3, [r7, #28]
    3178:	2280      	movs	r2, #128	; 0x80
    317a:	0252      	lsls	r2, r2, #9
    317c:	4313      	orrs	r3, r2
    317e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    3180:	687b      	ldr	r3, [r7, #4]
    3182:	781b      	ldrb	r3, [r3, #0]
    3184:	061b      	lsls	r3, r3, #24
    3186:	001a      	movs	r2, r3
    3188:	69fb      	ldr	r3, [r7, #28]
    318a:	4313      	orrs	r3, r2
    318c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    318e:	687b      	ldr	r3, [r7, #4]
    3190:	785b      	ldrb	r3, [r3, #1]
    3192:	2b00      	cmp	r3, #0
    3194:	d003      	beq.n	319e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3196:	687b      	ldr	r3, [r7, #4]
    3198:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    319a:	2b02      	cmp	r3, #2
    319c:	d110      	bne.n	31c0 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    319e:	69fb      	ldr	r3, [r7, #28]
    31a0:	2280      	movs	r2, #128	; 0x80
    31a2:	0292      	lsls	r2, r2, #10
    31a4:	4313      	orrs	r3, r2
    31a6:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    31a8:	687b      	ldr	r3, [r7, #4]
    31aa:	789b      	ldrb	r3, [r3, #2]
    31ac:	2b00      	cmp	r3, #0
    31ae:	d004      	beq.n	31ba <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    31b0:	69fb      	ldr	r3, [r7, #28]
    31b2:	2280      	movs	r2, #128	; 0x80
    31b4:	02d2      	lsls	r2, r2, #11
    31b6:	4313      	orrs	r3, r2
    31b8:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    31ba:	68fb      	ldr	r3, [r7, #12]
    31bc:	68ba      	ldr	r2, [r7, #8]
    31be:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    31c0:	687b      	ldr	r3, [r7, #4]
    31c2:	785b      	ldrb	r3, [r3, #1]
    31c4:	2b01      	cmp	r3, #1
    31c6:	d003      	beq.n	31d0 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    31c8:	687b      	ldr	r3, [r7, #4]
    31ca:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    31cc:	2b02      	cmp	r3, #2
    31ce:	d107      	bne.n	31e0 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    31d0:	69fb      	ldr	r3, [r7, #28]
    31d2:	4a22      	ldr	r2, [pc, #136]	; (325c <_system_pinmux_config+0x10c>)
    31d4:	4013      	ands	r3, r2
    31d6:	61fb      	str	r3, [r7, #28]
    31d8:	e002      	b.n	31e0 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    31da:	68fb      	ldr	r3, [r7, #12]
    31dc:	68ba      	ldr	r2, [r7, #8]
    31de:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    31e0:	68bb      	ldr	r3, [r7, #8]
    31e2:	041b      	lsls	r3, r3, #16
    31e4:	0c1b      	lsrs	r3, r3, #16
    31e6:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    31e8:	68bb      	ldr	r3, [r7, #8]
    31ea:	0c1b      	lsrs	r3, r3, #16
    31ec:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    31ee:	69ba      	ldr	r2, [r7, #24]
    31f0:	69fb      	ldr	r3, [r7, #28]
    31f2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    31f4:	22a0      	movs	r2, #160	; 0xa0
    31f6:	05d2      	lsls	r2, r2, #23
    31f8:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    31fa:	68fb      	ldr	r3, [r7, #12]
    31fc:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    31fe:	697a      	ldr	r2, [r7, #20]
    3200:	69fb      	ldr	r3, [r7, #28]
    3202:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3204:	22d0      	movs	r2, #208	; 0xd0
    3206:	0612      	lsls	r2, r2, #24
    3208:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    320a:	68fb      	ldr	r3, [r7, #12]
    320c:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    320e:	687b      	ldr	r3, [r7, #4]
    3210:	78db      	ldrb	r3, [r3, #3]
    3212:	2201      	movs	r2, #1
    3214:	4053      	eors	r3, r2
    3216:	b2db      	uxtb	r3, r3
    3218:	2b00      	cmp	r3, #0
    321a:	d01a      	beq.n	3252 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    321c:	69fa      	ldr	r2, [r7, #28]
    321e:	2380      	movs	r3, #128	; 0x80
    3220:	02db      	lsls	r3, r3, #11
    3222:	4013      	ands	r3, r2
    3224:	d00a      	beq.n	323c <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3226:	687b      	ldr	r3, [r7, #4]
    3228:	789b      	ldrb	r3, [r3, #2]
    322a:	2b01      	cmp	r3, #1
    322c:	d103      	bne.n	3236 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    322e:	68fb      	ldr	r3, [r7, #12]
    3230:	68ba      	ldr	r2, [r7, #8]
    3232:	619a      	str	r2, [r3, #24]
    3234:	e002      	b.n	323c <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    3236:	68fb      	ldr	r3, [r7, #12]
    3238:	68ba      	ldr	r2, [r7, #8]
    323a:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    323c:	687b      	ldr	r3, [r7, #4]
    323e:	785b      	ldrb	r3, [r3, #1]
    3240:	2b01      	cmp	r3, #1
    3242:	d003      	beq.n	324c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3244:	687b      	ldr	r3, [r7, #4]
    3246:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3248:	2b02      	cmp	r3, #2
    324a:	d102      	bne.n	3252 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    324c:	68fb      	ldr	r3, [r7, #12]
    324e:	68ba      	ldr	r2, [r7, #8]
    3250:	609a      	str	r2, [r3, #8]
		}
	}
}
    3252:	46c0      	nop			; (mov r8, r8)
    3254:	46bd      	mov	sp, r7
    3256:	b008      	add	sp, #32
    3258:	bd80      	pop	{r7, pc}
    325a:	46c0      	nop			; (mov r8, r8)
    325c:	fffbffff 	.word	0xfffbffff

00003260 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3260:	b580      	push	{r7, lr}
    3262:	b084      	sub	sp, #16
    3264:	af00      	add	r7, sp, #0
    3266:	0002      	movs	r2, r0
    3268:	6039      	str	r1, [r7, #0]
    326a:	1dfb      	adds	r3, r7, #7
    326c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    326e:	1dfb      	adds	r3, r7, #7
    3270:	781b      	ldrb	r3, [r3, #0]
    3272:	0018      	movs	r0, r3
    3274:	4b0a      	ldr	r3, [pc, #40]	; (32a0 <system_pinmux_pin_set_config+0x40>)
    3276:	4798      	blx	r3
    3278:	0003      	movs	r3, r0
    327a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    327c:	1dfb      	adds	r3, r7, #7
    327e:	781b      	ldrb	r3, [r3, #0]
    3280:	221f      	movs	r2, #31
    3282:	4013      	ands	r3, r2
    3284:	2201      	movs	r2, #1
    3286:	409a      	lsls	r2, r3
    3288:	0013      	movs	r3, r2
    328a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    328c:	683a      	ldr	r2, [r7, #0]
    328e:	68b9      	ldr	r1, [r7, #8]
    3290:	68fb      	ldr	r3, [r7, #12]
    3292:	0018      	movs	r0, r3
    3294:	4b03      	ldr	r3, [pc, #12]	; (32a4 <system_pinmux_pin_set_config+0x44>)
    3296:	4798      	blx	r3
}
    3298:	46c0      	nop			; (mov r8, r8)
    329a:	46bd      	mov	sp, r7
    329c:	b004      	add	sp, #16
    329e:	bd80      	pop	{r7, pc}
    32a0:	000030f1 	.word	0x000030f1
    32a4:	00003151 	.word	0x00003151

000032a8 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    32a8:	b580      	push	{r7, lr}
    32aa:	af00      	add	r7, sp, #0
	return;
    32ac:	46c0      	nop			; (mov r8, r8)
}
    32ae:	46bd      	mov	sp, r7
    32b0:	bd80      	pop	{r7, pc}
	...

000032b4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    32b4:	b580      	push	{r7, lr}
    32b6:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    32b8:	4b06      	ldr	r3, [pc, #24]	; (32d4 <system_init+0x20>)
    32ba:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    32bc:	4b06      	ldr	r3, [pc, #24]	; (32d8 <system_init+0x24>)
    32be:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    32c0:	4b06      	ldr	r3, [pc, #24]	; (32dc <system_init+0x28>)
    32c2:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    32c4:	4b06      	ldr	r3, [pc, #24]	; (32e0 <system_init+0x2c>)
    32c6:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    32c8:	4b06      	ldr	r3, [pc, #24]	; (32e4 <system_init+0x30>)
    32ca:	4798      	blx	r3
}
    32cc:	46c0      	nop			; (mov r8, r8)
    32ce:	46bd      	mov	sp, r7
    32d0:	bd80      	pop	{r7, pc}
    32d2:	46c0      	nop			; (mov r8, r8)
    32d4:	00002bb9 	.word	0x00002bb9
    32d8:	000028cd 	.word	0x000028cd
    32dc:	000032a9 	.word	0x000032a9
    32e0:	000032a9 	.word	0x000032a9
    32e4:	000032a9 	.word	0x000032a9

000032e8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    32e8:	b580      	push	{r7, lr}
    32ea:	b082      	sub	sp, #8
    32ec:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    32ee:	4b16      	ldr	r3, [pc, #88]	; (3348 <Reset_Handler+0x60>)
    32f0:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    32f2:	4b16      	ldr	r3, [pc, #88]	; (334c <Reset_Handler+0x64>)
    32f4:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    32f6:	687a      	ldr	r2, [r7, #4]
    32f8:	683b      	ldr	r3, [r7, #0]
    32fa:	429a      	cmp	r2, r3
    32fc:	d00c      	beq.n	3318 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    32fe:	e007      	b.n	3310 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    3300:	683b      	ldr	r3, [r7, #0]
    3302:	1d1a      	adds	r2, r3, #4
    3304:	603a      	str	r2, [r7, #0]
    3306:	687a      	ldr	r2, [r7, #4]
    3308:	1d11      	adds	r1, r2, #4
    330a:	6079      	str	r1, [r7, #4]
    330c:	6812      	ldr	r2, [r2, #0]
    330e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    3310:	683a      	ldr	r2, [r7, #0]
    3312:	4b0f      	ldr	r3, [pc, #60]	; (3350 <Reset_Handler+0x68>)
    3314:	429a      	cmp	r2, r3
    3316:	d3f3      	bcc.n	3300 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3318:	4b0e      	ldr	r3, [pc, #56]	; (3354 <Reset_Handler+0x6c>)
    331a:	603b      	str	r3, [r7, #0]
    331c:	e004      	b.n	3328 <Reset_Handler+0x40>
                *pDest++ = 0;
    331e:	683b      	ldr	r3, [r7, #0]
    3320:	1d1a      	adds	r2, r3, #4
    3322:	603a      	str	r2, [r7, #0]
    3324:	2200      	movs	r2, #0
    3326:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    3328:	683a      	ldr	r2, [r7, #0]
    332a:	4b0b      	ldr	r3, [pc, #44]	; (3358 <Reset_Handler+0x70>)
    332c:	429a      	cmp	r2, r3
    332e:	d3f6      	bcc.n	331e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    3330:	4b0a      	ldr	r3, [pc, #40]	; (335c <Reset_Handler+0x74>)
    3332:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3334:	4b0a      	ldr	r3, [pc, #40]	; (3360 <Reset_Handler+0x78>)
    3336:	687a      	ldr	r2, [r7, #4]
    3338:	21ff      	movs	r1, #255	; 0xff
    333a:	438a      	bics	r2, r1
    333c:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    333e:	4b09      	ldr	r3, [pc, #36]	; (3364 <Reset_Handler+0x7c>)
    3340:	4798      	blx	r3

        /* Branch to main function */
        main();
    3342:	4b09      	ldr	r3, [pc, #36]	; (3368 <Reset_Handler+0x80>)
    3344:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    3346:	e7fe      	b.n	3346 <Reset_Handler+0x5e>
    3348:	00004448 	.word	0x00004448
    334c:	20000000 	.word	0x20000000
    3350:	2000006c 	.word	0x2000006c
    3354:	2000006c 	.word	0x2000006c
    3358:	200039b0 	.word	0x200039b0
    335c:	00000000 	.word	0x00000000
    3360:	e000ed00 	.word	0xe000ed00
    3364:	00003829 	.word	0x00003829
    3368:	00003669 	.word	0x00003669

0000336c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    336c:	b580      	push	{r7, lr}
    336e:	af00      	add	r7, sp, #0
        while (1) {
    3370:	e7fe      	b.n	3370 <Dummy_Handler+0x4>
	...

00003374 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3374:	b580      	push	{r7, lr}
    3376:	b084      	sub	sp, #16
    3378:	af00      	add	r7, sp, #0
    337a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    337c:	4b0a      	ldr	r3, [pc, #40]	; (33a8 <_sbrk+0x34>)
    337e:	681b      	ldr	r3, [r3, #0]
    3380:	2b00      	cmp	r3, #0
    3382:	d102      	bne.n	338a <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    3384:	4b08      	ldr	r3, [pc, #32]	; (33a8 <_sbrk+0x34>)
    3386:	4a09      	ldr	r2, [pc, #36]	; (33ac <_sbrk+0x38>)
    3388:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    338a:	4b07      	ldr	r3, [pc, #28]	; (33a8 <_sbrk+0x34>)
    338c:	681b      	ldr	r3, [r3, #0]
    338e:	60fb      	str	r3, [r7, #12]

	heap += incr;
    3390:	4b05      	ldr	r3, [pc, #20]	; (33a8 <_sbrk+0x34>)
    3392:	681a      	ldr	r2, [r3, #0]
    3394:	687b      	ldr	r3, [r7, #4]
    3396:	18d2      	adds	r2, r2, r3
    3398:	4b03      	ldr	r3, [pc, #12]	; (33a8 <_sbrk+0x34>)
    339a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    339c:	68fb      	ldr	r3, [r7, #12]
}
    339e:	0018      	movs	r0, r3
    33a0:	46bd      	mov	sp, r7
    33a2:	b004      	add	sp, #16
    33a4:	bd80      	pop	{r7, pc}
    33a6:	46c0      	nop			; (mov r8, r8)
    33a8:	20003964 	.word	0x20003964
    33ac:	200059b0 	.word	0x200059b0

000033b0 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    33b0:	b580      	push	{r7, lr}
    33b2:	b082      	sub	sp, #8
    33b4:	af00      	add	r7, sp, #0
    33b6:	6078      	str	r0, [r7, #4]
	return -1;
    33b8:	2301      	movs	r3, #1
    33ba:	425b      	negs	r3, r3
}
    33bc:	0018      	movs	r0, r3
    33be:	46bd      	mov	sp, r7
    33c0:	b002      	add	sp, #8
    33c2:	bd80      	pop	{r7, pc}

000033c4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    33c4:	b580      	push	{r7, lr}
    33c6:	b082      	sub	sp, #8
    33c8:	af00      	add	r7, sp, #0
    33ca:	6078      	str	r0, [r7, #4]
    33cc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    33ce:	683b      	ldr	r3, [r7, #0]
    33d0:	2280      	movs	r2, #128	; 0x80
    33d2:	0192      	lsls	r2, r2, #6
    33d4:	605a      	str	r2, [r3, #4]

	return 0;
    33d6:	2300      	movs	r3, #0
}
    33d8:	0018      	movs	r0, r3
    33da:	46bd      	mov	sp, r7
    33dc:	b002      	add	sp, #8
    33de:	bd80      	pop	{r7, pc}

000033e0 <_isatty>:

extern int _isatty(int file)
{
    33e0:	b580      	push	{r7, lr}
    33e2:	b082      	sub	sp, #8
    33e4:	af00      	add	r7, sp, #0
    33e6:	6078      	str	r0, [r7, #4]
	return 1;
    33e8:	2301      	movs	r3, #1
}
    33ea:	0018      	movs	r0, r3
    33ec:	46bd      	mov	sp, r7
    33ee:	b002      	add	sp, #8
    33f0:	bd80      	pop	{r7, pc}

000033f2 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    33f2:	b580      	push	{r7, lr}
    33f4:	b084      	sub	sp, #16
    33f6:	af00      	add	r7, sp, #0
    33f8:	60f8      	str	r0, [r7, #12]
    33fa:	60b9      	str	r1, [r7, #8]
    33fc:	607a      	str	r2, [r7, #4]
	return 0;
    33fe:	2300      	movs	r3, #0
}
    3400:	0018      	movs	r0, r3
    3402:	46bd      	mov	sp, r7
    3404:	b004      	add	sp, #16
    3406:	bd80      	pop	{r7, pc}

00003408 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    3408:	b5b0      	push	{r4, r5, r7, lr}
    340a:	b082      	sub	sp, #8
    340c:	af00      	add	r7, sp, #0
    340e:	0002      	movs	r2, r0
    3410:	6039      	str	r1, [r7, #0]
    3412:	1dfb      	adds	r3, r7, #7
    3414:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
    3416:	1dfb      	adds	r3, r7, #7
    3418:	781b      	ldrb	r3, [r3, #0]
    341a:	2b7f      	cmp	r3, #127	; 0x7f
    341c:	d932      	bls.n	3484 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    341e:	4c2f      	ldr	r4, [pc, #188]	; (34dc <NVIC_SetPriority+0xd4>)
    3420:	1dfb      	adds	r3, r7, #7
    3422:	781b      	ldrb	r3, [r3, #0]
    3424:	001a      	movs	r2, r3
    3426:	230f      	movs	r3, #15
    3428:	4013      	ands	r3, r2
    342a:	3b08      	subs	r3, #8
    342c:	0899      	lsrs	r1, r3, #2
    342e:	4a2b      	ldr	r2, [pc, #172]	; (34dc <NVIC_SetPriority+0xd4>)
    3430:	1dfb      	adds	r3, r7, #7
    3432:	781b      	ldrb	r3, [r3, #0]
    3434:	0018      	movs	r0, r3
    3436:	230f      	movs	r3, #15
    3438:	4003      	ands	r3, r0
    343a:	3b08      	subs	r3, #8
    343c:	089b      	lsrs	r3, r3, #2
    343e:	3306      	adds	r3, #6
    3440:	009b      	lsls	r3, r3, #2
    3442:	18d3      	adds	r3, r2, r3
    3444:	3304      	adds	r3, #4
    3446:	681b      	ldr	r3, [r3, #0]
    3448:	1dfa      	adds	r2, r7, #7
    344a:	7812      	ldrb	r2, [r2, #0]
    344c:	0010      	movs	r0, r2
    344e:	2203      	movs	r2, #3
    3450:	4002      	ands	r2, r0
    3452:	00d2      	lsls	r2, r2, #3
    3454:	20ff      	movs	r0, #255	; 0xff
    3456:	4090      	lsls	r0, r2
    3458:	0002      	movs	r2, r0
    345a:	43d2      	mvns	r2, r2
    345c:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    345e:	683b      	ldr	r3, [r7, #0]
    3460:	019b      	lsls	r3, r3, #6
    3462:	20ff      	movs	r0, #255	; 0xff
    3464:	4018      	ands	r0, r3
    3466:	1dfb      	adds	r3, r7, #7
    3468:	781b      	ldrb	r3, [r3, #0]
    346a:	001d      	movs	r5, r3
    346c:	2303      	movs	r3, #3
    346e:	402b      	ands	r3, r5
    3470:	00db      	lsls	r3, r3, #3
    3472:	4098      	lsls	r0, r3
    3474:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    3476:	431a      	orrs	r2, r3
    3478:	1d8b      	adds	r3, r1, #6
    347a:	009b      	lsls	r3, r3, #2
    347c:	18e3      	adds	r3, r4, r3
    347e:	3304      	adds	r3, #4
    3480:	601a      	str	r2, [r3, #0]
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
    3482:	e027      	b.n	34d4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    3484:	4c16      	ldr	r4, [pc, #88]	; (34e0 <NVIC_SetPriority+0xd8>)
    3486:	1dfb      	adds	r3, r7, #7
    3488:	781b      	ldrb	r3, [r3, #0]
    348a:	b25b      	sxtb	r3, r3
    348c:	089b      	lsrs	r3, r3, #2
    348e:	4914      	ldr	r1, [pc, #80]	; (34e0 <NVIC_SetPriority+0xd8>)
    3490:	1dfa      	adds	r2, r7, #7
    3492:	7812      	ldrb	r2, [r2, #0]
    3494:	b252      	sxtb	r2, r2
    3496:	0892      	lsrs	r2, r2, #2
    3498:	32c0      	adds	r2, #192	; 0xc0
    349a:	0092      	lsls	r2, r2, #2
    349c:	5852      	ldr	r2, [r2, r1]
    349e:	1df9      	adds	r1, r7, #7
    34a0:	7809      	ldrb	r1, [r1, #0]
    34a2:	0008      	movs	r0, r1
    34a4:	2103      	movs	r1, #3
    34a6:	4001      	ands	r1, r0
    34a8:	00c9      	lsls	r1, r1, #3
    34aa:	20ff      	movs	r0, #255	; 0xff
    34ac:	4088      	lsls	r0, r1
    34ae:	0001      	movs	r1, r0
    34b0:	43c9      	mvns	r1, r1
    34b2:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    34b4:	683a      	ldr	r2, [r7, #0]
    34b6:	0192      	lsls	r2, r2, #6
    34b8:	20ff      	movs	r0, #255	; 0xff
    34ba:	4010      	ands	r0, r2
    34bc:	1dfa      	adds	r2, r7, #7
    34be:	7812      	ldrb	r2, [r2, #0]
    34c0:	0015      	movs	r5, r2
    34c2:	2203      	movs	r2, #3
    34c4:	402a      	ands	r2, r5
    34c6:	00d2      	lsls	r2, r2, #3
    34c8:	4090      	lsls	r0, r2
    34ca:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    34cc:	430a      	orrs	r2, r1
    34ce:	33c0      	adds	r3, #192	; 0xc0
    34d0:	009b      	lsls	r3, r3, #2
    34d2:	511a      	str	r2, [r3, r4]
}
    34d4:	46c0      	nop			; (mov r8, r8)
    34d6:	46bd      	mov	sp, r7
    34d8:	b002      	add	sp, #8
    34da:	bdb0      	pop	{r4, r5, r7, pc}
    34dc:	e000ed00 	.word	0xe000ed00
    34e0:	e000e100 	.word	0xe000e100

000034e4 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
    34e4:	b580      	push	{r7, lr}
    34e6:	b082      	sub	sp, #8
    34e8:	af00      	add	r7, sp, #0
    34ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
    34ec:	687b      	ldr	r3, [r7, #4]
    34ee:	3b01      	subs	r3, #1
    34f0:	4a0c      	ldr	r2, [pc, #48]	; (3524 <SysTick_Config+0x40>)
    34f2:	4293      	cmp	r3, r2
    34f4:	d901      	bls.n	34fa <SysTick_Config+0x16>
    34f6:	2301      	movs	r3, #1
    34f8:	e010      	b.n	351c <SysTick_Config+0x38>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
    34fa:	4b0b      	ldr	r3, [pc, #44]	; (3528 <SysTick_Config+0x44>)
    34fc:	687a      	ldr	r2, [r7, #4]
    34fe:	3a01      	subs	r2, #1
    3500:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
    3502:	2301      	movs	r3, #1
    3504:	425b      	negs	r3, r3
    3506:	2103      	movs	r1, #3
    3508:	0018      	movs	r0, r3
    350a:	4b08      	ldr	r3, [pc, #32]	; (352c <SysTick_Config+0x48>)
    350c:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    350e:	4b06      	ldr	r3, [pc, #24]	; (3528 <SysTick_Config+0x44>)
    3510:	2200      	movs	r2, #0
    3512:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    3514:	4b04      	ldr	r3, [pc, #16]	; (3528 <SysTick_Config+0x44>)
    3516:	2207      	movs	r2, #7
    3518:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
    351a:	2300      	movs	r3, #0
}
    351c:	0018      	movs	r0, r3
    351e:	46bd      	mov	sp, r7
    3520:	b002      	add	sp, #8
    3522:	bd80      	pop	{r7, pc}
    3524:	00ffffff 	.word	0x00ffffff
    3528:	e000e010 	.word	0xe000e010
    352c:	00003409 	.word	0x00003409

00003530 <system_pinmux_get_group_from_gpio_pin>:
{
    3530:	b580      	push	{r7, lr}
    3532:	b084      	sub	sp, #16
    3534:	af00      	add	r7, sp, #0
    3536:	0002      	movs	r2, r0
    3538:	1dfb      	adds	r3, r7, #7
    353a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    353c:	230f      	movs	r3, #15
    353e:	18fb      	adds	r3, r7, r3
    3540:	1dfa      	adds	r2, r7, #7
    3542:	7812      	ldrb	r2, [r2, #0]
    3544:	09d2      	lsrs	r2, r2, #7
    3546:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3548:	230e      	movs	r3, #14
    354a:	18fb      	adds	r3, r7, r3
    354c:	1dfa      	adds	r2, r7, #7
    354e:	7812      	ldrb	r2, [r2, #0]
    3550:	0952      	lsrs	r2, r2, #5
    3552:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3554:	4b0d      	ldr	r3, [pc, #52]	; (358c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3556:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    3558:	230f      	movs	r3, #15
    355a:	18fb      	adds	r3, r7, r3
    355c:	781b      	ldrb	r3, [r3, #0]
    355e:	2b00      	cmp	r3, #0
    3560:	d10f      	bne.n	3582 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3562:	230f      	movs	r3, #15
    3564:	18fb      	adds	r3, r7, r3
    3566:	781b      	ldrb	r3, [r3, #0]
    3568:	009b      	lsls	r3, r3, #2
    356a:	2210      	movs	r2, #16
    356c:	4694      	mov	ip, r2
    356e:	44bc      	add	ip, r7
    3570:	4463      	add	r3, ip
    3572:	3b08      	subs	r3, #8
    3574:	681a      	ldr	r2, [r3, #0]
    3576:	230e      	movs	r3, #14
    3578:	18fb      	adds	r3, r7, r3
    357a:	781b      	ldrb	r3, [r3, #0]
    357c:	01db      	lsls	r3, r3, #7
    357e:	18d3      	adds	r3, r2, r3
    3580:	e000      	b.n	3584 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    3582:	2300      	movs	r3, #0
}
    3584:	0018      	movs	r0, r3
    3586:	46bd      	mov	sp, r7
    3588:	b004      	add	sp, #16
    358a:	bd80      	pop	{r7, pc}
    358c:	41006000 	.word	0x41006000

00003590 <port_get_group_from_gpio_pin>:
{
    3590:	b580      	push	{r7, lr}
    3592:	b082      	sub	sp, #8
    3594:	af00      	add	r7, sp, #0
    3596:	0002      	movs	r2, r0
    3598:	1dfb      	adds	r3, r7, #7
    359a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    359c:	1dfb      	adds	r3, r7, #7
    359e:	781b      	ldrb	r3, [r3, #0]
    35a0:	0018      	movs	r0, r3
    35a2:	4b03      	ldr	r3, [pc, #12]	; (35b0 <port_get_group_from_gpio_pin+0x20>)
    35a4:	4798      	blx	r3
    35a6:	0003      	movs	r3, r0
}
    35a8:	0018      	movs	r0, r3
    35aa:	46bd      	mov	sp, r7
    35ac:	b002      	add	sp, #8
    35ae:	bd80      	pop	{r7, pc}
    35b0:	00003531 	.word	0x00003531

000035b4 <port_get_config_defaults>:
{
    35b4:	b580      	push	{r7, lr}
    35b6:	b082      	sub	sp, #8
    35b8:	af00      	add	r7, sp, #0
    35ba:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    35bc:	687b      	ldr	r3, [r7, #4]
    35be:	2200      	movs	r2, #0
    35c0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    35c2:	687b      	ldr	r3, [r7, #4]
    35c4:	2201      	movs	r2, #1
    35c6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    35c8:	687b      	ldr	r3, [r7, #4]
    35ca:	2200      	movs	r2, #0
    35cc:	709a      	strb	r2, [r3, #2]
}
    35ce:	46c0      	nop			; (mov r8, r8)
    35d0:	46bd      	mov	sp, r7
    35d2:	b002      	add	sp, #8
    35d4:	bd80      	pop	{r7, pc}
	...

000035d8 <port_pin_set_output_level>:
{
    35d8:	b580      	push	{r7, lr}
    35da:	b084      	sub	sp, #16
    35dc:	af00      	add	r7, sp, #0
    35de:	0002      	movs	r2, r0
    35e0:	1dfb      	adds	r3, r7, #7
    35e2:	701a      	strb	r2, [r3, #0]
    35e4:	1dbb      	adds	r3, r7, #6
    35e6:	1c0a      	adds	r2, r1, #0
    35e8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    35ea:	1dfb      	adds	r3, r7, #7
    35ec:	781b      	ldrb	r3, [r3, #0]
    35ee:	0018      	movs	r0, r3
    35f0:	4b0d      	ldr	r3, [pc, #52]	; (3628 <port_pin_set_output_level+0x50>)
    35f2:	4798      	blx	r3
    35f4:	0003      	movs	r3, r0
    35f6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    35f8:	1dfb      	adds	r3, r7, #7
    35fa:	781b      	ldrb	r3, [r3, #0]
    35fc:	221f      	movs	r2, #31
    35fe:	4013      	ands	r3, r2
    3600:	2201      	movs	r2, #1
    3602:	409a      	lsls	r2, r3
    3604:	0013      	movs	r3, r2
    3606:	60bb      	str	r3, [r7, #8]
	if (level) {
    3608:	1dbb      	adds	r3, r7, #6
    360a:	781b      	ldrb	r3, [r3, #0]
    360c:	2b00      	cmp	r3, #0
    360e:	d003      	beq.n	3618 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3610:	68fb      	ldr	r3, [r7, #12]
    3612:	68ba      	ldr	r2, [r7, #8]
    3614:	619a      	str	r2, [r3, #24]
}
    3616:	e002      	b.n	361e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    3618:	68fb      	ldr	r3, [r7, #12]
    361a:	68ba      	ldr	r2, [r7, #8]
    361c:	615a      	str	r2, [r3, #20]
}
    361e:	46c0      	nop			; (mov r8, r8)
    3620:	46bd      	mov	sp, r7
    3622:	b004      	add	sp, #16
    3624:	bd80      	pop	{r7, pc}
    3626:	46c0      	nop			; (mov r8, r8)
    3628:	00003591 	.word	0x00003591

0000362c <config_led>:
}
#endif

/** Configure LED0, turn it off*/
static void config_led(void)
{
    362c:	b580      	push	{r7, lr}
    362e:	b082      	sub	sp, #8
    3630:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    3632:	1d3b      	adds	r3, r7, #4
    3634:	0018      	movs	r0, r3
    3636:	4b09      	ldr	r3, [pc, #36]	; (365c <config_led+0x30>)
    3638:	4798      	blx	r3

	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    363a:	1d3b      	adds	r3, r7, #4
    363c:	2201      	movs	r2, #1
    363e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    3640:	1d3b      	adds	r3, r7, #4
    3642:	0019      	movs	r1, r3
    3644:	205b      	movs	r0, #91	; 0x5b
    3646:	4b06      	ldr	r3, [pc, #24]	; (3660 <config_led+0x34>)
    3648:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    364a:	2101      	movs	r1, #1
    364c:	205b      	movs	r0, #91	; 0x5b
    364e:	4b05      	ldr	r3, [pc, #20]	; (3664 <config_led+0x38>)
    3650:	4798      	blx	r3
}
    3652:	46c0      	nop			; (mov r8, r8)
    3654:	46bd      	mov	sp, r7
    3656:	b002      	add	sp, #8
    3658:	bd80      	pop	{r7, pc}
    365a:	46c0      	nop			; (mov r8, r8)
    365c:	000035b5 	.word	0x000035b5
    3660:	00002945 	.word	0x00002945
    3664:	000035d9 	.word	0x000035d9

00003668 <main>:

int main(void)
{
    3668:	b580      	push	{r7, lr}
    366a:	af00      	add	r7, sp, #0
	system_init();
    366c:	4b0a      	ldr	r3, [pc, #40]	; (3698 <main+0x30>)
    366e:	4798      	blx	r3
	
	/*Configure UART console.*/
	configure_console();
    3670:	4b0a      	ldr	r3, [pc, #40]	; (369c <main+0x34>)
    3672:	4798      	blx	r3

	/*Configure system tick to generate periodic interrupts */
	SysTick_Config(system_gclk_gen_get_hz(GCLK_GENERATOR_0));
    3674:	2000      	movs	r0, #0
    3676:	4b0a      	ldr	r3, [pc, #40]	; (36a0 <main+0x38>)
    3678:	4798      	blx	r3
    367a:	0003      	movs	r3, r0
    367c:	0018      	movs	r0, r3
    367e:	4b09      	ldr	r3, [pc, #36]	; (36a4 <main+0x3c>)
    3680:	4798      	blx	r3
	//! [enable_global_interrupts]
	/*system_interrupt_enable_global();*/
	//! [enable_global_interrupts]
	
	/* Output example information */
	puts("scheduler started..\r\n");
    3682:	4b09      	ldr	r3, [pc, #36]	; (36a8 <main+0x40>)
    3684:	0018      	movs	r0, r3
    3686:	4b09      	ldr	r3, [pc, #36]	; (36ac <main+0x44>)
    3688:	4798      	blx	r3

	config_led();
    368a:	4b09      	ldr	r3, [pc, #36]	; (36b0 <main+0x48>)
    368c:	4798      	blx	r3

	FreeRtosTasks();
    368e:	4b09      	ldr	r3, [pc, #36]	; (36b4 <main+0x4c>)
    3690:	4798      	blx	r3
	
	vTaskStartScheduler();
    3692:	4b09      	ldr	r3, [pc, #36]	; (36b8 <main+0x50>)
    3694:	4798      	blx	r3

	while (true) {
    3696:	e7fe      	b.n	3696 <main+0x2e>
    3698:	000032b5 	.word	0x000032b5
    369c:	00001289 	.word	0x00001289
    36a0:	00002eed 	.word	0x00002eed
    36a4:	000034e5 	.word	0x000034e5
    36a8:	000043ac 	.word	0x000043ac
    36ac:	00003941 	.word	0x00003941
    36b0:	0000362d 	.word	0x0000362d
    36b4:	00000115 	.word	0x00000115
    36b8:	0000099d 	.word	0x0000099d

000036bc <__udivsi3>:
    36bc:	2200      	movs	r2, #0
    36be:	0843      	lsrs	r3, r0, #1
    36c0:	428b      	cmp	r3, r1
    36c2:	d374      	bcc.n	37ae <__udivsi3+0xf2>
    36c4:	0903      	lsrs	r3, r0, #4
    36c6:	428b      	cmp	r3, r1
    36c8:	d35f      	bcc.n	378a <__udivsi3+0xce>
    36ca:	0a03      	lsrs	r3, r0, #8
    36cc:	428b      	cmp	r3, r1
    36ce:	d344      	bcc.n	375a <__udivsi3+0x9e>
    36d0:	0b03      	lsrs	r3, r0, #12
    36d2:	428b      	cmp	r3, r1
    36d4:	d328      	bcc.n	3728 <__udivsi3+0x6c>
    36d6:	0c03      	lsrs	r3, r0, #16
    36d8:	428b      	cmp	r3, r1
    36da:	d30d      	bcc.n	36f8 <__udivsi3+0x3c>
    36dc:	22ff      	movs	r2, #255	; 0xff
    36de:	0209      	lsls	r1, r1, #8
    36e0:	ba12      	rev	r2, r2
    36e2:	0c03      	lsrs	r3, r0, #16
    36e4:	428b      	cmp	r3, r1
    36e6:	d302      	bcc.n	36ee <__udivsi3+0x32>
    36e8:	1212      	asrs	r2, r2, #8
    36ea:	0209      	lsls	r1, r1, #8
    36ec:	d065      	beq.n	37ba <__udivsi3+0xfe>
    36ee:	0b03      	lsrs	r3, r0, #12
    36f0:	428b      	cmp	r3, r1
    36f2:	d319      	bcc.n	3728 <__udivsi3+0x6c>
    36f4:	e000      	b.n	36f8 <__udivsi3+0x3c>
    36f6:	0a09      	lsrs	r1, r1, #8
    36f8:	0bc3      	lsrs	r3, r0, #15
    36fa:	428b      	cmp	r3, r1
    36fc:	d301      	bcc.n	3702 <__udivsi3+0x46>
    36fe:	03cb      	lsls	r3, r1, #15
    3700:	1ac0      	subs	r0, r0, r3
    3702:	4152      	adcs	r2, r2
    3704:	0b83      	lsrs	r3, r0, #14
    3706:	428b      	cmp	r3, r1
    3708:	d301      	bcc.n	370e <__udivsi3+0x52>
    370a:	038b      	lsls	r3, r1, #14
    370c:	1ac0      	subs	r0, r0, r3
    370e:	4152      	adcs	r2, r2
    3710:	0b43      	lsrs	r3, r0, #13
    3712:	428b      	cmp	r3, r1
    3714:	d301      	bcc.n	371a <__udivsi3+0x5e>
    3716:	034b      	lsls	r3, r1, #13
    3718:	1ac0      	subs	r0, r0, r3
    371a:	4152      	adcs	r2, r2
    371c:	0b03      	lsrs	r3, r0, #12
    371e:	428b      	cmp	r3, r1
    3720:	d301      	bcc.n	3726 <__udivsi3+0x6a>
    3722:	030b      	lsls	r3, r1, #12
    3724:	1ac0      	subs	r0, r0, r3
    3726:	4152      	adcs	r2, r2
    3728:	0ac3      	lsrs	r3, r0, #11
    372a:	428b      	cmp	r3, r1
    372c:	d301      	bcc.n	3732 <__udivsi3+0x76>
    372e:	02cb      	lsls	r3, r1, #11
    3730:	1ac0      	subs	r0, r0, r3
    3732:	4152      	adcs	r2, r2
    3734:	0a83      	lsrs	r3, r0, #10
    3736:	428b      	cmp	r3, r1
    3738:	d301      	bcc.n	373e <__udivsi3+0x82>
    373a:	028b      	lsls	r3, r1, #10
    373c:	1ac0      	subs	r0, r0, r3
    373e:	4152      	adcs	r2, r2
    3740:	0a43      	lsrs	r3, r0, #9
    3742:	428b      	cmp	r3, r1
    3744:	d301      	bcc.n	374a <__udivsi3+0x8e>
    3746:	024b      	lsls	r3, r1, #9
    3748:	1ac0      	subs	r0, r0, r3
    374a:	4152      	adcs	r2, r2
    374c:	0a03      	lsrs	r3, r0, #8
    374e:	428b      	cmp	r3, r1
    3750:	d301      	bcc.n	3756 <__udivsi3+0x9a>
    3752:	020b      	lsls	r3, r1, #8
    3754:	1ac0      	subs	r0, r0, r3
    3756:	4152      	adcs	r2, r2
    3758:	d2cd      	bcs.n	36f6 <__udivsi3+0x3a>
    375a:	09c3      	lsrs	r3, r0, #7
    375c:	428b      	cmp	r3, r1
    375e:	d301      	bcc.n	3764 <__udivsi3+0xa8>
    3760:	01cb      	lsls	r3, r1, #7
    3762:	1ac0      	subs	r0, r0, r3
    3764:	4152      	adcs	r2, r2
    3766:	0983      	lsrs	r3, r0, #6
    3768:	428b      	cmp	r3, r1
    376a:	d301      	bcc.n	3770 <__udivsi3+0xb4>
    376c:	018b      	lsls	r3, r1, #6
    376e:	1ac0      	subs	r0, r0, r3
    3770:	4152      	adcs	r2, r2
    3772:	0943      	lsrs	r3, r0, #5
    3774:	428b      	cmp	r3, r1
    3776:	d301      	bcc.n	377c <__udivsi3+0xc0>
    3778:	014b      	lsls	r3, r1, #5
    377a:	1ac0      	subs	r0, r0, r3
    377c:	4152      	adcs	r2, r2
    377e:	0903      	lsrs	r3, r0, #4
    3780:	428b      	cmp	r3, r1
    3782:	d301      	bcc.n	3788 <__udivsi3+0xcc>
    3784:	010b      	lsls	r3, r1, #4
    3786:	1ac0      	subs	r0, r0, r3
    3788:	4152      	adcs	r2, r2
    378a:	08c3      	lsrs	r3, r0, #3
    378c:	428b      	cmp	r3, r1
    378e:	d301      	bcc.n	3794 <__udivsi3+0xd8>
    3790:	00cb      	lsls	r3, r1, #3
    3792:	1ac0      	subs	r0, r0, r3
    3794:	4152      	adcs	r2, r2
    3796:	0883      	lsrs	r3, r0, #2
    3798:	428b      	cmp	r3, r1
    379a:	d301      	bcc.n	37a0 <__udivsi3+0xe4>
    379c:	008b      	lsls	r3, r1, #2
    379e:	1ac0      	subs	r0, r0, r3
    37a0:	4152      	adcs	r2, r2
    37a2:	0843      	lsrs	r3, r0, #1
    37a4:	428b      	cmp	r3, r1
    37a6:	d301      	bcc.n	37ac <__udivsi3+0xf0>
    37a8:	004b      	lsls	r3, r1, #1
    37aa:	1ac0      	subs	r0, r0, r3
    37ac:	4152      	adcs	r2, r2
    37ae:	1a41      	subs	r1, r0, r1
    37b0:	d200      	bcs.n	37b4 <__udivsi3+0xf8>
    37b2:	4601      	mov	r1, r0
    37b4:	4152      	adcs	r2, r2
    37b6:	4610      	mov	r0, r2
    37b8:	4770      	bx	lr
    37ba:	e7ff      	b.n	37bc <__udivsi3+0x100>
    37bc:	b501      	push	{r0, lr}
    37be:	2000      	movs	r0, #0
    37c0:	f000 f806 	bl	37d0 <__aeabi_idiv0>
    37c4:	bd02      	pop	{r1, pc}
    37c6:	46c0      	nop			; (mov r8, r8)

000037c8 <__aeabi_uidivmod>:
    37c8:	2900      	cmp	r1, #0
    37ca:	d0f7      	beq.n	37bc <__udivsi3+0x100>
    37cc:	e776      	b.n	36bc <__udivsi3>
    37ce:	4770      	bx	lr

000037d0 <__aeabi_idiv0>:
    37d0:	4770      	bx	lr
    37d2:	46c0      	nop			; (mov r8, r8)

000037d4 <__aeabi_lmul>:
    37d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    37d6:	46ce      	mov	lr, r9
    37d8:	4647      	mov	r7, r8
    37da:	0415      	lsls	r5, r2, #16
    37dc:	0c2d      	lsrs	r5, r5, #16
    37de:	002e      	movs	r6, r5
    37e0:	b580      	push	{r7, lr}
    37e2:	0407      	lsls	r7, r0, #16
    37e4:	0c14      	lsrs	r4, r2, #16
    37e6:	0c3f      	lsrs	r7, r7, #16
    37e8:	4699      	mov	r9, r3
    37ea:	0c03      	lsrs	r3, r0, #16
    37ec:	437e      	muls	r6, r7
    37ee:	435d      	muls	r5, r3
    37f0:	4367      	muls	r7, r4
    37f2:	4363      	muls	r3, r4
    37f4:	197f      	adds	r7, r7, r5
    37f6:	0c34      	lsrs	r4, r6, #16
    37f8:	19e4      	adds	r4, r4, r7
    37fa:	469c      	mov	ip, r3
    37fc:	42a5      	cmp	r5, r4
    37fe:	d903      	bls.n	3808 <__aeabi_lmul+0x34>
    3800:	2380      	movs	r3, #128	; 0x80
    3802:	025b      	lsls	r3, r3, #9
    3804:	4698      	mov	r8, r3
    3806:	44c4      	add	ip, r8
    3808:	464b      	mov	r3, r9
    380a:	4351      	muls	r1, r2
    380c:	4343      	muls	r3, r0
    380e:	0436      	lsls	r6, r6, #16
    3810:	0c36      	lsrs	r6, r6, #16
    3812:	0c25      	lsrs	r5, r4, #16
    3814:	0424      	lsls	r4, r4, #16
    3816:	4465      	add	r5, ip
    3818:	19a4      	adds	r4, r4, r6
    381a:	1859      	adds	r1, r3, r1
    381c:	1949      	adds	r1, r1, r5
    381e:	0020      	movs	r0, r4
    3820:	bc0c      	pop	{r2, r3}
    3822:	4690      	mov	r8, r2
    3824:	4699      	mov	r9, r3
    3826:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003828 <__libc_init_array>:
    3828:	b570      	push	{r4, r5, r6, lr}
    382a:	2600      	movs	r6, #0
    382c:	4d0c      	ldr	r5, [pc, #48]	; (3860 <__libc_init_array+0x38>)
    382e:	4c0d      	ldr	r4, [pc, #52]	; (3864 <__libc_init_array+0x3c>)
    3830:	1b64      	subs	r4, r4, r5
    3832:	10a4      	asrs	r4, r4, #2
    3834:	42a6      	cmp	r6, r4
    3836:	d109      	bne.n	384c <__libc_init_array+0x24>
    3838:	2600      	movs	r6, #0
    383a:	f000 fdf5 	bl	4428 <_init>
    383e:	4d0a      	ldr	r5, [pc, #40]	; (3868 <__libc_init_array+0x40>)
    3840:	4c0a      	ldr	r4, [pc, #40]	; (386c <__libc_init_array+0x44>)
    3842:	1b64      	subs	r4, r4, r5
    3844:	10a4      	asrs	r4, r4, #2
    3846:	42a6      	cmp	r6, r4
    3848:	d105      	bne.n	3856 <__libc_init_array+0x2e>
    384a:	bd70      	pop	{r4, r5, r6, pc}
    384c:	00b3      	lsls	r3, r6, #2
    384e:	58eb      	ldr	r3, [r5, r3]
    3850:	4798      	blx	r3
    3852:	3601      	adds	r6, #1
    3854:	e7ee      	b.n	3834 <__libc_init_array+0xc>
    3856:	00b3      	lsls	r3, r6, #2
    3858:	58eb      	ldr	r3, [r5, r3]
    385a:	4798      	blx	r3
    385c:	3601      	adds	r6, #1
    385e:	e7f2      	b.n	3846 <__libc_init_array+0x1e>
    3860:	00004434 	.word	0x00004434
    3864:	00004434 	.word	0x00004434
    3868:	00004434 	.word	0x00004434
    386c:	00004438 	.word	0x00004438

00003870 <memset>:
    3870:	0003      	movs	r3, r0
    3872:	1882      	adds	r2, r0, r2
    3874:	4293      	cmp	r3, r2
    3876:	d100      	bne.n	387a <memset+0xa>
    3878:	4770      	bx	lr
    387a:	7019      	strb	r1, [r3, #0]
    387c:	3301      	adds	r3, #1
    387e:	e7f9      	b.n	3874 <memset+0x4>

00003880 <_puts_r>:
    3880:	b570      	push	{r4, r5, r6, lr}
    3882:	0005      	movs	r5, r0
    3884:	000e      	movs	r6, r1
    3886:	2800      	cmp	r0, #0
    3888:	d004      	beq.n	3894 <_puts_r+0x14>
    388a:	6983      	ldr	r3, [r0, #24]
    388c:	2b00      	cmp	r3, #0
    388e:	d101      	bne.n	3894 <_puts_r+0x14>
    3890:	f000 fada 	bl	3e48 <__sinit>
    3894:	69ab      	ldr	r3, [r5, #24]
    3896:	68ac      	ldr	r4, [r5, #8]
    3898:	2b00      	cmp	r3, #0
    389a:	d102      	bne.n	38a2 <_puts_r+0x22>
    389c:	0028      	movs	r0, r5
    389e:	f000 fad3 	bl	3e48 <__sinit>
    38a2:	4b24      	ldr	r3, [pc, #144]	; (3934 <_puts_r+0xb4>)
    38a4:	429c      	cmp	r4, r3
    38a6:	d10f      	bne.n	38c8 <_puts_r+0x48>
    38a8:	686c      	ldr	r4, [r5, #4]
    38aa:	89a3      	ldrh	r3, [r4, #12]
    38ac:	071b      	lsls	r3, r3, #28
    38ae:	d502      	bpl.n	38b6 <_puts_r+0x36>
    38b0:	6923      	ldr	r3, [r4, #16]
    38b2:	2b00      	cmp	r3, #0
    38b4:	d120      	bne.n	38f8 <_puts_r+0x78>
    38b6:	0021      	movs	r1, r4
    38b8:	0028      	movs	r0, r5
    38ba:	f000 f957 	bl	3b6c <__swsetup_r>
    38be:	2800      	cmp	r0, #0
    38c0:	d01a      	beq.n	38f8 <_puts_r+0x78>
    38c2:	2001      	movs	r0, #1
    38c4:	4240      	negs	r0, r0
    38c6:	bd70      	pop	{r4, r5, r6, pc}
    38c8:	4b1b      	ldr	r3, [pc, #108]	; (3938 <_puts_r+0xb8>)
    38ca:	429c      	cmp	r4, r3
    38cc:	d101      	bne.n	38d2 <_puts_r+0x52>
    38ce:	68ac      	ldr	r4, [r5, #8]
    38d0:	e7eb      	b.n	38aa <_puts_r+0x2a>
    38d2:	4b1a      	ldr	r3, [pc, #104]	; (393c <_puts_r+0xbc>)
    38d4:	429c      	cmp	r4, r3
    38d6:	d1e8      	bne.n	38aa <_puts_r+0x2a>
    38d8:	68ec      	ldr	r4, [r5, #12]
    38da:	e7e6      	b.n	38aa <_puts_r+0x2a>
    38dc:	3b01      	subs	r3, #1
    38de:	3601      	adds	r6, #1
    38e0:	60a3      	str	r3, [r4, #8]
    38e2:	2b00      	cmp	r3, #0
    38e4:	da04      	bge.n	38f0 <_puts_r+0x70>
    38e6:	69a2      	ldr	r2, [r4, #24]
    38e8:	4293      	cmp	r3, r2
    38ea:	db16      	blt.n	391a <_puts_r+0x9a>
    38ec:	290a      	cmp	r1, #10
    38ee:	d014      	beq.n	391a <_puts_r+0x9a>
    38f0:	6823      	ldr	r3, [r4, #0]
    38f2:	1c5a      	adds	r2, r3, #1
    38f4:	6022      	str	r2, [r4, #0]
    38f6:	7019      	strb	r1, [r3, #0]
    38f8:	7831      	ldrb	r1, [r6, #0]
    38fa:	68a3      	ldr	r3, [r4, #8]
    38fc:	2900      	cmp	r1, #0
    38fe:	d1ed      	bne.n	38dc <_puts_r+0x5c>
    3900:	3b01      	subs	r3, #1
    3902:	60a3      	str	r3, [r4, #8]
    3904:	2b00      	cmp	r3, #0
    3906:	da0f      	bge.n	3928 <_puts_r+0xa8>
    3908:	0022      	movs	r2, r4
    390a:	310a      	adds	r1, #10
    390c:	0028      	movs	r0, r5
    390e:	f000 f8d7 	bl	3ac0 <__swbuf_r>
    3912:	1c43      	adds	r3, r0, #1
    3914:	d0d5      	beq.n	38c2 <_puts_r+0x42>
    3916:	200a      	movs	r0, #10
    3918:	e7d5      	b.n	38c6 <_puts_r+0x46>
    391a:	0022      	movs	r2, r4
    391c:	0028      	movs	r0, r5
    391e:	f000 f8cf 	bl	3ac0 <__swbuf_r>
    3922:	1c43      	adds	r3, r0, #1
    3924:	d1e8      	bne.n	38f8 <_puts_r+0x78>
    3926:	e7cc      	b.n	38c2 <_puts_r+0x42>
    3928:	200a      	movs	r0, #10
    392a:	6823      	ldr	r3, [r4, #0]
    392c:	1c5a      	adds	r2, r3, #1
    392e:	6022      	str	r2, [r4, #0]
    3930:	7018      	strb	r0, [r3, #0]
    3932:	e7c8      	b.n	38c6 <_puts_r+0x46>
    3934:	000043e8 	.word	0x000043e8
    3938:	00004408 	.word	0x00004408
    393c:	000043c8 	.word	0x000043c8

00003940 <puts>:
    3940:	b510      	push	{r4, lr}
    3942:	4b03      	ldr	r3, [pc, #12]	; (3950 <puts+0x10>)
    3944:	0001      	movs	r1, r0
    3946:	6818      	ldr	r0, [r3, #0]
    3948:	f7ff ff9a 	bl	3880 <_puts_r>
    394c:	bd10      	pop	{r4, pc}
    394e:	46c0      	nop			; (mov r8, r8)
    3950:	20000008 	.word	0x20000008

00003954 <setbuf>:
    3954:	424a      	negs	r2, r1
    3956:	414a      	adcs	r2, r1
    3958:	2380      	movs	r3, #128	; 0x80
    395a:	b510      	push	{r4, lr}
    395c:	0052      	lsls	r2, r2, #1
    395e:	00db      	lsls	r3, r3, #3
    3960:	f000 f802 	bl	3968 <setvbuf>
    3964:	bd10      	pop	{r4, pc}
	...

00003968 <setvbuf>:
    3968:	b5f0      	push	{r4, r5, r6, r7, lr}
    396a:	001d      	movs	r5, r3
    396c:	4b4f      	ldr	r3, [pc, #316]	; (3aac <setvbuf+0x144>)
    396e:	b085      	sub	sp, #20
    3970:	681e      	ldr	r6, [r3, #0]
    3972:	0004      	movs	r4, r0
    3974:	000f      	movs	r7, r1
    3976:	9200      	str	r2, [sp, #0]
    3978:	2e00      	cmp	r6, #0
    397a:	d005      	beq.n	3988 <setvbuf+0x20>
    397c:	69b3      	ldr	r3, [r6, #24]
    397e:	2b00      	cmp	r3, #0
    3980:	d102      	bne.n	3988 <setvbuf+0x20>
    3982:	0030      	movs	r0, r6
    3984:	f000 fa60 	bl	3e48 <__sinit>
    3988:	4b49      	ldr	r3, [pc, #292]	; (3ab0 <setvbuf+0x148>)
    398a:	429c      	cmp	r4, r3
    398c:	d150      	bne.n	3a30 <setvbuf+0xc8>
    398e:	6874      	ldr	r4, [r6, #4]
    3990:	9b00      	ldr	r3, [sp, #0]
    3992:	2b02      	cmp	r3, #2
    3994:	d005      	beq.n	39a2 <setvbuf+0x3a>
    3996:	2b01      	cmp	r3, #1
    3998:	d900      	bls.n	399c <setvbuf+0x34>
    399a:	e084      	b.n	3aa6 <setvbuf+0x13e>
    399c:	2d00      	cmp	r5, #0
    399e:	da00      	bge.n	39a2 <setvbuf+0x3a>
    39a0:	e081      	b.n	3aa6 <setvbuf+0x13e>
    39a2:	0021      	movs	r1, r4
    39a4:	0030      	movs	r0, r6
    39a6:	f000 f9e1 	bl	3d6c <_fflush_r>
    39aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
    39ac:	2900      	cmp	r1, #0
    39ae:	d008      	beq.n	39c2 <setvbuf+0x5a>
    39b0:	0023      	movs	r3, r4
    39b2:	3344      	adds	r3, #68	; 0x44
    39b4:	4299      	cmp	r1, r3
    39b6:	d002      	beq.n	39be <setvbuf+0x56>
    39b8:	0030      	movs	r0, r6
    39ba:	f000 fb51 	bl	4060 <_free_r>
    39be:	2300      	movs	r3, #0
    39c0:	6363      	str	r3, [r4, #52]	; 0x34
    39c2:	2300      	movs	r3, #0
    39c4:	61a3      	str	r3, [r4, #24]
    39c6:	6063      	str	r3, [r4, #4]
    39c8:	89a3      	ldrh	r3, [r4, #12]
    39ca:	061b      	lsls	r3, r3, #24
    39cc:	d503      	bpl.n	39d6 <setvbuf+0x6e>
    39ce:	6921      	ldr	r1, [r4, #16]
    39d0:	0030      	movs	r0, r6
    39d2:	f000 fb45 	bl	4060 <_free_r>
    39d6:	89a3      	ldrh	r3, [r4, #12]
    39d8:	4a36      	ldr	r2, [pc, #216]	; (3ab4 <setvbuf+0x14c>)
    39da:	4013      	ands	r3, r2
    39dc:	81a3      	strh	r3, [r4, #12]
    39de:	9b00      	ldr	r3, [sp, #0]
    39e0:	2b02      	cmp	r3, #2
    39e2:	d05a      	beq.n	3a9a <setvbuf+0x132>
    39e4:	ab03      	add	r3, sp, #12
    39e6:	aa02      	add	r2, sp, #8
    39e8:	0021      	movs	r1, r4
    39ea:	0030      	movs	r0, r6
    39ec:	f000 fac2 	bl	3f74 <__swhatbuf_r>
    39f0:	89a3      	ldrh	r3, [r4, #12]
    39f2:	4318      	orrs	r0, r3
    39f4:	81a0      	strh	r0, [r4, #12]
    39f6:	2d00      	cmp	r5, #0
    39f8:	d124      	bne.n	3a44 <setvbuf+0xdc>
    39fa:	9d02      	ldr	r5, [sp, #8]
    39fc:	0028      	movs	r0, r5
    39fe:	f000 fb25 	bl	404c <malloc>
    3a02:	9501      	str	r5, [sp, #4]
    3a04:	1e07      	subs	r7, r0, #0
    3a06:	d142      	bne.n	3a8e <setvbuf+0x126>
    3a08:	9b02      	ldr	r3, [sp, #8]
    3a0a:	9301      	str	r3, [sp, #4]
    3a0c:	42ab      	cmp	r3, r5
    3a0e:	d139      	bne.n	3a84 <setvbuf+0x11c>
    3a10:	2001      	movs	r0, #1
    3a12:	4240      	negs	r0, r0
    3a14:	2302      	movs	r3, #2
    3a16:	89a2      	ldrh	r2, [r4, #12]
    3a18:	4313      	orrs	r3, r2
    3a1a:	81a3      	strh	r3, [r4, #12]
    3a1c:	2300      	movs	r3, #0
    3a1e:	60a3      	str	r3, [r4, #8]
    3a20:	0023      	movs	r3, r4
    3a22:	3347      	adds	r3, #71	; 0x47
    3a24:	6023      	str	r3, [r4, #0]
    3a26:	6123      	str	r3, [r4, #16]
    3a28:	2301      	movs	r3, #1
    3a2a:	6163      	str	r3, [r4, #20]
    3a2c:	b005      	add	sp, #20
    3a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a30:	4b21      	ldr	r3, [pc, #132]	; (3ab8 <setvbuf+0x150>)
    3a32:	429c      	cmp	r4, r3
    3a34:	d101      	bne.n	3a3a <setvbuf+0xd2>
    3a36:	68b4      	ldr	r4, [r6, #8]
    3a38:	e7aa      	b.n	3990 <setvbuf+0x28>
    3a3a:	4b20      	ldr	r3, [pc, #128]	; (3abc <setvbuf+0x154>)
    3a3c:	429c      	cmp	r4, r3
    3a3e:	d1a7      	bne.n	3990 <setvbuf+0x28>
    3a40:	68f4      	ldr	r4, [r6, #12]
    3a42:	e7a5      	b.n	3990 <setvbuf+0x28>
    3a44:	2f00      	cmp	r7, #0
    3a46:	d0d9      	beq.n	39fc <setvbuf+0x94>
    3a48:	69b3      	ldr	r3, [r6, #24]
    3a4a:	2b00      	cmp	r3, #0
    3a4c:	d102      	bne.n	3a54 <setvbuf+0xec>
    3a4e:	0030      	movs	r0, r6
    3a50:	f000 f9fa 	bl	3e48 <__sinit>
    3a54:	9b00      	ldr	r3, [sp, #0]
    3a56:	2b01      	cmp	r3, #1
    3a58:	d103      	bne.n	3a62 <setvbuf+0xfa>
    3a5a:	89a3      	ldrh	r3, [r4, #12]
    3a5c:	9a00      	ldr	r2, [sp, #0]
    3a5e:	431a      	orrs	r2, r3
    3a60:	81a2      	strh	r2, [r4, #12]
    3a62:	2008      	movs	r0, #8
    3a64:	89a3      	ldrh	r3, [r4, #12]
    3a66:	6027      	str	r7, [r4, #0]
    3a68:	6127      	str	r7, [r4, #16]
    3a6a:	6165      	str	r5, [r4, #20]
    3a6c:	4018      	ands	r0, r3
    3a6e:	d018      	beq.n	3aa2 <setvbuf+0x13a>
    3a70:	2001      	movs	r0, #1
    3a72:	4018      	ands	r0, r3
    3a74:	2300      	movs	r3, #0
    3a76:	4298      	cmp	r0, r3
    3a78:	d011      	beq.n	3a9e <setvbuf+0x136>
    3a7a:	426d      	negs	r5, r5
    3a7c:	60a3      	str	r3, [r4, #8]
    3a7e:	61a5      	str	r5, [r4, #24]
    3a80:	0018      	movs	r0, r3
    3a82:	e7d3      	b.n	3a2c <setvbuf+0xc4>
    3a84:	9801      	ldr	r0, [sp, #4]
    3a86:	f000 fae1 	bl	404c <malloc>
    3a8a:	1e07      	subs	r7, r0, #0
    3a8c:	d0c0      	beq.n	3a10 <setvbuf+0xa8>
    3a8e:	2380      	movs	r3, #128	; 0x80
    3a90:	89a2      	ldrh	r2, [r4, #12]
    3a92:	9d01      	ldr	r5, [sp, #4]
    3a94:	4313      	orrs	r3, r2
    3a96:	81a3      	strh	r3, [r4, #12]
    3a98:	e7d6      	b.n	3a48 <setvbuf+0xe0>
    3a9a:	2000      	movs	r0, #0
    3a9c:	e7ba      	b.n	3a14 <setvbuf+0xac>
    3a9e:	60a5      	str	r5, [r4, #8]
    3aa0:	e7c4      	b.n	3a2c <setvbuf+0xc4>
    3aa2:	60a0      	str	r0, [r4, #8]
    3aa4:	e7c2      	b.n	3a2c <setvbuf+0xc4>
    3aa6:	2001      	movs	r0, #1
    3aa8:	4240      	negs	r0, r0
    3aaa:	e7bf      	b.n	3a2c <setvbuf+0xc4>
    3aac:	20000008 	.word	0x20000008
    3ab0:	000043e8 	.word	0x000043e8
    3ab4:	fffff35c 	.word	0xfffff35c
    3ab8:	00004408 	.word	0x00004408
    3abc:	000043c8 	.word	0x000043c8

00003ac0 <__swbuf_r>:
    3ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ac2:	0005      	movs	r5, r0
    3ac4:	000e      	movs	r6, r1
    3ac6:	0014      	movs	r4, r2
    3ac8:	2800      	cmp	r0, #0
    3aca:	d004      	beq.n	3ad6 <__swbuf_r+0x16>
    3acc:	6983      	ldr	r3, [r0, #24]
    3ace:	2b00      	cmp	r3, #0
    3ad0:	d101      	bne.n	3ad6 <__swbuf_r+0x16>
    3ad2:	f000 f9b9 	bl	3e48 <__sinit>
    3ad6:	4b22      	ldr	r3, [pc, #136]	; (3b60 <__swbuf_r+0xa0>)
    3ad8:	429c      	cmp	r4, r3
    3ada:	d12d      	bne.n	3b38 <__swbuf_r+0x78>
    3adc:	686c      	ldr	r4, [r5, #4]
    3ade:	69a3      	ldr	r3, [r4, #24]
    3ae0:	60a3      	str	r3, [r4, #8]
    3ae2:	89a3      	ldrh	r3, [r4, #12]
    3ae4:	071b      	lsls	r3, r3, #28
    3ae6:	d531      	bpl.n	3b4c <__swbuf_r+0x8c>
    3ae8:	6923      	ldr	r3, [r4, #16]
    3aea:	2b00      	cmp	r3, #0
    3aec:	d02e      	beq.n	3b4c <__swbuf_r+0x8c>
    3aee:	6823      	ldr	r3, [r4, #0]
    3af0:	6922      	ldr	r2, [r4, #16]
    3af2:	b2f7      	uxtb	r7, r6
    3af4:	1a98      	subs	r0, r3, r2
    3af6:	6963      	ldr	r3, [r4, #20]
    3af8:	b2f6      	uxtb	r6, r6
    3afa:	4298      	cmp	r0, r3
    3afc:	db05      	blt.n	3b0a <__swbuf_r+0x4a>
    3afe:	0021      	movs	r1, r4
    3b00:	0028      	movs	r0, r5
    3b02:	f000 f933 	bl	3d6c <_fflush_r>
    3b06:	2800      	cmp	r0, #0
    3b08:	d126      	bne.n	3b58 <__swbuf_r+0x98>
    3b0a:	68a3      	ldr	r3, [r4, #8]
    3b0c:	3001      	adds	r0, #1
    3b0e:	3b01      	subs	r3, #1
    3b10:	60a3      	str	r3, [r4, #8]
    3b12:	6823      	ldr	r3, [r4, #0]
    3b14:	1c5a      	adds	r2, r3, #1
    3b16:	6022      	str	r2, [r4, #0]
    3b18:	701f      	strb	r7, [r3, #0]
    3b1a:	6963      	ldr	r3, [r4, #20]
    3b1c:	4298      	cmp	r0, r3
    3b1e:	d004      	beq.n	3b2a <__swbuf_r+0x6a>
    3b20:	89a3      	ldrh	r3, [r4, #12]
    3b22:	07db      	lsls	r3, r3, #31
    3b24:	d51a      	bpl.n	3b5c <__swbuf_r+0x9c>
    3b26:	2e0a      	cmp	r6, #10
    3b28:	d118      	bne.n	3b5c <__swbuf_r+0x9c>
    3b2a:	0021      	movs	r1, r4
    3b2c:	0028      	movs	r0, r5
    3b2e:	f000 f91d 	bl	3d6c <_fflush_r>
    3b32:	2800      	cmp	r0, #0
    3b34:	d012      	beq.n	3b5c <__swbuf_r+0x9c>
    3b36:	e00f      	b.n	3b58 <__swbuf_r+0x98>
    3b38:	4b0a      	ldr	r3, [pc, #40]	; (3b64 <__swbuf_r+0xa4>)
    3b3a:	429c      	cmp	r4, r3
    3b3c:	d101      	bne.n	3b42 <__swbuf_r+0x82>
    3b3e:	68ac      	ldr	r4, [r5, #8]
    3b40:	e7cd      	b.n	3ade <__swbuf_r+0x1e>
    3b42:	4b09      	ldr	r3, [pc, #36]	; (3b68 <__swbuf_r+0xa8>)
    3b44:	429c      	cmp	r4, r3
    3b46:	d1ca      	bne.n	3ade <__swbuf_r+0x1e>
    3b48:	68ec      	ldr	r4, [r5, #12]
    3b4a:	e7c8      	b.n	3ade <__swbuf_r+0x1e>
    3b4c:	0021      	movs	r1, r4
    3b4e:	0028      	movs	r0, r5
    3b50:	f000 f80c 	bl	3b6c <__swsetup_r>
    3b54:	2800      	cmp	r0, #0
    3b56:	d0ca      	beq.n	3aee <__swbuf_r+0x2e>
    3b58:	2601      	movs	r6, #1
    3b5a:	4276      	negs	r6, r6
    3b5c:	0030      	movs	r0, r6
    3b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b60:	000043e8 	.word	0x000043e8
    3b64:	00004408 	.word	0x00004408
    3b68:	000043c8 	.word	0x000043c8

00003b6c <__swsetup_r>:
    3b6c:	4b36      	ldr	r3, [pc, #216]	; (3c48 <__swsetup_r+0xdc>)
    3b6e:	b570      	push	{r4, r5, r6, lr}
    3b70:	681d      	ldr	r5, [r3, #0]
    3b72:	0006      	movs	r6, r0
    3b74:	000c      	movs	r4, r1
    3b76:	2d00      	cmp	r5, #0
    3b78:	d005      	beq.n	3b86 <__swsetup_r+0x1a>
    3b7a:	69ab      	ldr	r3, [r5, #24]
    3b7c:	2b00      	cmp	r3, #0
    3b7e:	d102      	bne.n	3b86 <__swsetup_r+0x1a>
    3b80:	0028      	movs	r0, r5
    3b82:	f000 f961 	bl	3e48 <__sinit>
    3b86:	4b31      	ldr	r3, [pc, #196]	; (3c4c <__swsetup_r+0xe0>)
    3b88:	429c      	cmp	r4, r3
    3b8a:	d10f      	bne.n	3bac <__swsetup_r+0x40>
    3b8c:	686c      	ldr	r4, [r5, #4]
    3b8e:	230c      	movs	r3, #12
    3b90:	5ee2      	ldrsh	r2, [r4, r3]
    3b92:	b293      	uxth	r3, r2
    3b94:	0719      	lsls	r1, r3, #28
    3b96:	d42d      	bmi.n	3bf4 <__swsetup_r+0x88>
    3b98:	06d9      	lsls	r1, r3, #27
    3b9a:	d411      	bmi.n	3bc0 <__swsetup_r+0x54>
    3b9c:	2309      	movs	r3, #9
    3b9e:	2001      	movs	r0, #1
    3ba0:	6033      	str	r3, [r6, #0]
    3ba2:	3337      	adds	r3, #55	; 0x37
    3ba4:	4313      	orrs	r3, r2
    3ba6:	81a3      	strh	r3, [r4, #12]
    3ba8:	4240      	negs	r0, r0
    3baa:	bd70      	pop	{r4, r5, r6, pc}
    3bac:	4b28      	ldr	r3, [pc, #160]	; (3c50 <__swsetup_r+0xe4>)
    3bae:	429c      	cmp	r4, r3
    3bb0:	d101      	bne.n	3bb6 <__swsetup_r+0x4a>
    3bb2:	68ac      	ldr	r4, [r5, #8]
    3bb4:	e7eb      	b.n	3b8e <__swsetup_r+0x22>
    3bb6:	4b27      	ldr	r3, [pc, #156]	; (3c54 <__swsetup_r+0xe8>)
    3bb8:	429c      	cmp	r4, r3
    3bba:	d1e8      	bne.n	3b8e <__swsetup_r+0x22>
    3bbc:	68ec      	ldr	r4, [r5, #12]
    3bbe:	e7e6      	b.n	3b8e <__swsetup_r+0x22>
    3bc0:	075b      	lsls	r3, r3, #29
    3bc2:	d513      	bpl.n	3bec <__swsetup_r+0x80>
    3bc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3bc6:	2900      	cmp	r1, #0
    3bc8:	d008      	beq.n	3bdc <__swsetup_r+0x70>
    3bca:	0023      	movs	r3, r4
    3bcc:	3344      	adds	r3, #68	; 0x44
    3bce:	4299      	cmp	r1, r3
    3bd0:	d002      	beq.n	3bd8 <__swsetup_r+0x6c>
    3bd2:	0030      	movs	r0, r6
    3bd4:	f000 fa44 	bl	4060 <_free_r>
    3bd8:	2300      	movs	r3, #0
    3bda:	6363      	str	r3, [r4, #52]	; 0x34
    3bdc:	2224      	movs	r2, #36	; 0x24
    3bde:	89a3      	ldrh	r3, [r4, #12]
    3be0:	4393      	bics	r3, r2
    3be2:	81a3      	strh	r3, [r4, #12]
    3be4:	2300      	movs	r3, #0
    3be6:	6063      	str	r3, [r4, #4]
    3be8:	6923      	ldr	r3, [r4, #16]
    3bea:	6023      	str	r3, [r4, #0]
    3bec:	2308      	movs	r3, #8
    3bee:	89a2      	ldrh	r2, [r4, #12]
    3bf0:	4313      	orrs	r3, r2
    3bf2:	81a3      	strh	r3, [r4, #12]
    3bf4:	6923      	ldr	r3, [r4, #16]
    3bf6:	2b00      	cmp	r3, #0
    3bf8:	d10b      	bne.n	3c12 <__swsetup_r+0xa6>
    3bfa:	21a0      	movs	r1, #160	; 0xa0
    3bfc:	2280      	movs	r2, #128	; 0x80
    3bfe:	89a3      	ldrh	r3, [r4, #12]
    3c00:	0089      	lsls	r1, r1, #2
    3c02:	0092      	lsls	r2, r2, #2
    3c04:	400b      	ands	r3, r1
    3c06:	4293      	cmp	r3, r2
    3c08:	d003      	beq.n	3c12 <__swsetup_r+0xa6>
    3c0a:	0021      	movs	r1, r4
    3c0c:	0030      	movs	r0, r6
    3c0e:	f000 f9d9 	bl	3fc4 <__smakebuf_r>
    3c12:	2301      	movs	r3, #1
    3c14:	89a2      	ldrh	r2, [r4, #12]
    3c16:	4013      	ands	r3, r2
    3c18:	d011      	beq.n	3c3e <__swsetup_r+0xd2>
    3c1a:	2300      	movs	r3, #0
    3c1c:	60a3      	str	r3, [r4, #8]
    3c1e:	6963      	ldr	r3, [r4, #20]
    3c20:	425b      	negs	r3, r3
    3c22:	61a3      	str	r3, [r4, #24]
    3c24:	2000      	movs	r0, #0
    3c26:	6923      	ldr	r3, [r4, #16]
    3c28:	4283      	cmp	r3, r0
    3c2a:	d1be      	bne.n	3baa <__swsetup_r+0x3e>
    3c2c:	230c      	movs	r3, #12
    3c2e:	5ee2      	ldrsh	r2, [r4, r3]
    3c30:	0613      	lsls	r3, r2, #24
    3c32:	d5ba      	bpl.n	3baa <__swsetup_r+0x3e>
    3c34:	2340      	movs	r3, #64	; 0x40
    3c36:	4313      	orrs	r3, r2
    3c38:	81a3      	strh	r3, [r4, #12]
    3c3a:	3801      	subs	r0, #1
    3c3c:	e7b5      	b.n	3baa <__swsetup_r+0x3e>
    3c3e:	0792      	lsls	r2, r2, #30
    3c40:	d400      	bmi.n	3c44 <__swsetup_r+0xd8>
    3c42:	6963      	ldr	r3, [r4, #20]
    3c44:	60a3      	str	r3, [r4, #8]
    3c46:	e7ed      	b.n	3c24 <__swsetup_r+0xb8>
    3c48:	20000008 	.word	0x20000008
    3c4c:	000043e8 	.word	0x000043e8
    3c50:	00004408 	.word	0x00004408
    3c54:	000043c8 	.word	0x000043c8

00003c58 <__sflush_r>:
    3c58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3c5a:	898a      	ldrh	r2, [r1, #12]
    3c5c:	0005      	movs	r5, r0
    3c5e:	000c      	movs	r4, r1
    3c60:	0713      	lsls	r3, r2, #28
    3c62:	d460      	bmi.n	3d26 <__sflush_r+0xce>
    3c64:	684b      	ldr	r3, [r1, #4]
    3c66:	2b00      	cmp	r3, #0
    3c68:	dc04      	bgt.n	3c74 <__sflush_r+0x1c>
    3c6a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3c6c:	2b00      	cmp	r3, #0
    3c6e:	dc01      	bgt.n	3c74 <__sflush_r+0x1c>
    3c70:	2000      	movs	r0, #0
    3c72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3c74:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3c76:	2f00      	cmp	r7, #0
    3c78:	d0fa      	beq.n	3c70 <__sflush_r+0x18>
    3c7a:	2300      	movs	r3, #0
    3c7c:	682e      	ldr	r6, [r5, #0]
    3c7e:	602b      	str	r3, [r5, #0]
    3c80:	2380      	movs	r3, #128	; 0x80
    3c82:	015b      	lsls	r3, r3, #5
    3c84:	401a      	ands	r2, r3
    3c86:	d034      	beq.n	3cf2 <__sflush_r+0x9a>
    3c88:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3c8a:	89a3      	ldrh	r3, [r4, #12]
    3c8c:	075b      	lsls	r3, r3, #29
    3c8e:	d506      	bpl.n	3c9e <__sflush_r+0x46>
    3c90:	6863      	ldr	r3, [r4, #4]
    3c92:	1ac0      	subs	r0, r0, r3
    3c94:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3c96:	2b00      	cmp	r3, #0
    3c98:	d001      	beq.n	3c9e <__sflush_r+0x46>
    3c9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3c9c:	1ac0      	subs	r0, r0, r3
    3c9e:	0002      	movs	r2, r0
    3ca0:	6a21      	ldr	r1, [r4, #32]
    3ca2:	2300      	movs	r3, #0
    3ca4:	0028      	movs	r0, r5
    3ca6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3ca8:	47b8      	blx	r7
    3caa:	89a1      	ldrh	r1, [r4, #12]
    3cac:	1c43      	adds	r3, r0, #1
    3cae:	d106      	bne.n	3cbe <__sflush_r+0x66>
    3cb0:	682b      	ldr	r3, [r5, #0]
    3cb2:	2b1d      	cmp	r3, #29
    3cb4:	d831      	bhi.n	3d1a <__sflush_r+0xc2>
    3cb6:	4a2c      	ldr	r2, [pc, #176]	; (3d68 <__sflush_r+0x110>)
    3cb8:	40da      	lsrs	r2, r3
    3cba:	07d3      	lsls	r3, r2, #31
    3cbc:	d52d      	bpl.n	3d1a <__sflush_r+0xc2>
    3cbe:	2300      	movs	r3, #0
    3cc0:	6063      	str	r3, [r4, #4]
    3cc2:	6923      	ldr	r3, [r4, #16]
    3cc4:	6023      	str	r3, [r4, #0]
    3cc6:	04cb      	lsls	r3, r1, #19
    3cc8:	d505      	bpl.n	3cd6 <__sflush_r+0x7e>
    3cca:	1c43      	adds	r3, r0, #1
    3ccc:	d102      	bne.n	3cd4 <__sflush_r+0x7c>
    3cce:	682b      	ldr	r3, [r5, #0]
    3cd0:	2b00      	cmp	r3, #0
    3cd2:	d100      	bne.n	3cd6 <__sflush_r+0x7e>
    3cd4:	6560      	str	r0, [r4, #84]	; 0x54
    3cd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3cd8:	602e      	str	r6, [r5, #0]
    3cda:	2900      	cmp	r1, #0
    3cdc:	d0c8      	beq.n	3c70 <__sflush_r+0x18>
    3cde:	0023      	movs	r3, r4
    3ce0:	3344      	adds	r3, #68	; 0x44
    3ce2:	4299      	cmp	r1, r3
    3ce4:	d002      	beq.n	3cec <__sflush_r+0x94>
    3ce6:	0028      	movs	r0, r5
    3ce8:	f000 f9ba 	bl	4060 <_free_r>
    3cec:	2000      	movs	r0, #0
    3cee:	6360      	str	r0, [r4, #52]	; 0x34
    3cf0:	e7bf      	b.n	3c72 <__sflush_r+0x1a>
    3cf2:	2301      	movs	r3, #1
    3cf4:	6a21      	ldr	r1, [r4, #32]
    3cf6:	0028      	movs	r0, r5
    3cf8:	47b8      	blx	r7
    3cfa:	1c43      	adds	r3, r0, #1
    3cfc:	d1c5      	bne.n	3c8a <__sflush_r+0x32>
    3cfe:	682b      	ldr	r3, [r5, #0]
    3d00:	2b00      	cmp	r3, #0
    3d02:	d0c2      	beq.n	3c8a <__sflush_r+0x32>
    3d04:	2b1d      	cmp	r3, #29
    3d06:	d001      	beq.n	3d0c <__sflush_r+0xb4>
    3d08:	2b16      	cmp	r3, #22
    3d0a:	d101      	bne.n	3d10 <__sflush_r+0xb8>
    3d0c:	602e      	str	r6, [r5, #0]
    3d0e:	e7af      	b.n	3c70 <__sflush_r+0x18>
    3d10:	2340      	movs	r3, #64	; 0x40
    3d12:	89a2      	ldrh	r2, [r4, #12]
    3d14:	4313      	orrs	r3, r2
    3d16:	81a3      	strh	r3, [r4, #12]
    3d18:	e7ab      	b.n	3c72 <__sflush_r+0x1a>
    3d1a:	2340      	movs	r3, #64	; 0x40
    3d1c:	430b      	orrs	r3, r1
    3d1e:	2001      	movs	r0, #1
    3d20:	81a3      	strh	r3, [r4, #12]
    3d22:	4240      	negs	r0, r0
    3d24:	e7a5      	b.n	3c72 <__sflush_r+0x1a>
    3d26:	690f      	ldr	r7, [r1, #16]
    3d28:	2f00      	cmp	r7, #0
    3d2a:	d0a1      	beq.n	3c70 <__sflush_r+0x18>
    3d2c:	680b      	ldr	r3, [r1, #0]
    3d2e:	600f      	str	r7, [r1, #0]
    3d30:	1bdb      	subs	r3, r3, r7
    3d32:	9301      	str	r3, [sp, #4]
    3d34:	2300      	movs	r3, #0
    3d36:	0792      	lsls	r2, r2, #30
    3d38:	d100      	bne.n	3d3c <__sflush_r+0xe4>
    3d3a:	694b      	ldr	r3, [r1, #20]
    3d3c:	60a3      	str	r3, [r4, #8]
    3d3e:	9b01      	ldr	r3, [sp, #4]
    3d40:	2b00      	cmp	r3, #0
    3d42:	dc00      	bgt.n	3d46 <__sflush_r+0xee>
    3d44:	e794      	b.n	3c70 <__sflush_r+0x18>
    3d46:	9b01      	ldr	r3, [sp, #4]
    3d48:	003a      	movs	r2, r7
    3d4a:	6a21      	ldr	r1, [r4, #32]
    3d4c:	0028      	movs	r0, r5
    3d4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3d50:	47b0      	blx	r6
    3d52:	2800      	cmp	r0, #0
    3d54:	dc03      	bgt.n	3d5e <__sflush_r+0x106>
    3d56:	2340      	movs	r3, #64	; 0x40
    3d58:	89a2      	ldrh	r2, [r4, #12]
    3d5a:	4313      	orrs	r3, r2
    3d5c:	e7df      	b.n	3d1e <__sflush_r+0xc6>
    3d5e:	9b01      	ldr	r3, [sp, #4]
    3d60:	183f      	adds	r7, r7, r0
    3d62:	1a1b      	subs	r3, r3, r0
    3d64:	9301      	str	r3, [sp, #4]
    3d66:	e7ea      	b.n	3d3e <__sflush_r+0xe6>
    3d68:	20400001 	.word	0x20400001

00003d6c <_fflush_r>:
    3d6c:	690b      	ldr	r3, [r1, #16]
    3d6e:	b570      	push	{r4, r5, r6, lr}
    3d70:	0005      	movs	r5, r0
    3d72:	000c      	movs	r4, r1
    3d74:	2b00      	cmp	r3, #0
    3d76:	d101      	bne.n	3d7c <_fflush_r+0x10>
    3d78:	2000      	movs	r0, #0
    3d7a:	bd70      	pop	{r4, r5, r6, pc}
    3d7c:	2800      	cmp	r0, #0
    3d7e:	d004      	beq.n	3d8a <_fflush_r+0x1e>
    3d80:	6983      	ldr	r3, [r0, #24]
    3d82:	2b00      	cmp	r3, #0
    3d84:	d101      	bne.n	3d8a <_fflush_r+0x1e>
    3d86:	f000 f85f 	bl	3e48 <__sinit>
    3d8a:	4b0b      	ldr	r3, [pc, #44]	; (3db8 <_fflush_r+0x4c>)
    3d8c:	429c      	cmp	r4, r3
    3d8e:	d109      	bne.n	3da4 <_fflush_r+0x38>
    3d90:	686c      	ldr	r4, [r5, #4]
    3d92:	220c      	movs	r2, #12
    3d94:	5ea3      	ldrsh	r3, [r4, r2]
    3d96:	2b00      	cmp	r3, #0
    3d98:	d0ee      	beq.n	3d78 <_fflush_r+0xc>
    3d9a:	0021      	movs	r1, r4
    3d9c:	0028      	movs	r0, r5
    3d9e:	f7ff ff5b 	bl	3c58 <__sflush_r>
    3da2:	e7ea      	b.n	3d7a <_fflush_r+0xe>
    3da4:	4b05      	ldr	r3, [pc, #20]	; (3dbc <_fflush_r+0x50>)
    3da6:	429c      	cmp	r4, r3
    3da8:	d101      	bne.n	3dae <_fflush_r+0x42>
    3daa:	68ac      	ldr	r4, [r5, #8]
    3dac:	e7f1      	b.n	3d92 <_fflush_r+0x26>
    3dae:	4b04      	ldr	r3, [pc, #16]	; (3dc0 <_fflush_r+0x54>)
    3db0:	429c      	cmp	r4, r3
    3db2:	d1ee      	bne.n	3d92 <_fflush_r+0x26>
    3db4:	68ec      	ldr	r4, [r5, #12]
    3db6:	e7ec      	b.n	3d92 <_fflush_r+0x26>
    3db8:	000043e8 	.word	0x000043e8
    3dbc:	00004408 	.word	0x00004408
    3dc0:	000043c8 	.word	0x000043c8

00003dc4 <_cleanup_r>:
    3dc4:	b510      	push	{r4, lr}
    3dc6:	4902      	ldr	r1, [pc, #8]	; (3dd0 <_cleanup_r+0xc>)
    3dc8:	f000 f8b2 	bl	3f30 <_fwalk_reent>
    3dcc:	bd10      	pop	{r4, pc}
    3dce:	46c0      	nop			; (mov r8, r8)
    3dd0:	00003d6d 	.word	0x00003d6d

00003dd4 <std.isra.0>:
    3dd4:	2300      	movs	r3, #0
    3dd6:	b510      	push	{r4, lr}
    3dd8:	0004      	movs	r4, r0
    3dda:	6003      	str	r3, [r0, #0]
    3ddc:	6043      	str	r3, [r0, #4]
    3dde:	6083      	str	r3, [r0, #8]
    3de0:	8181      	strh	r1, [r0, #12]
    3de2:	6643      	str	r3, [r0, #100]	; 0x64
    3de4:	81c2      	strh	r2, [r0, #14]
    3de6:	6103      	str	r3, [r0, #16]
    3de8:	6143      	str	r3, [r0, #20]
    3dea:	6183      	str	r3, [r0, #24]
    3dec:	0019      	movs	r1, r3
    3dee:	2208      	movs	r2, #8
    3df0:	305c      	adds	r0, #92	; 0x5c
    3df2:	f7ff fd3d 	bl	3870 <memset>
    3df6:	4b05      	ldr	r3, [pc, #20]	; (3e0c <std.isra.0+0x38>)
    3df8:	6224      	str	r4, [r4, #32]
    3dfa:	6263      	str	r3, [r4, #36]	; 0x24
    3dfc:	4b04      	ldr	r3, [pc, #16]	; (3e10 <std.isra.0+0x3c>)
    3dfe:	62a3      	str	r3, [r4, #40]	; 0x28
    3e00:	4b04      	ldr	r3, [pc, #16]	; (3e14 <std.isra.0+0x40>)
    3e02:	62e3      	str	r3, [r4, #44]	; 0x2c
    3e04:	4b04      	ldr	r3, [pc, #16]	; (3e18 <std.isra.0+0x44>)
    3e06:	6323      	str	r3, [r4, #48]	; 0x30
    3e08:	bd10      	pop	{r4, pc}
    3e0a:	46c0      	nop			; (mov r8, r8)
    3e0c:	000041d5 	.word	0x000041d5
    3e10:	000041fd 	.word	0x000041fd
    3e14:	00004235 	.word	0x00004235
    3e18:	00004261 	.word	0x00004261

00003e1c <__sfmoreglue>:
    3e1c:	b570      	push	{r4, r5, r6, lr}
    3e1e:	2568      	movs	r5, #104	; 0x68
    3e20:	1e4a      	subs	r2, r1, #1
    3e22:	4355      	muls	r5, r2
    3e24:	000e      	movs	r6, r1
    3e26:	0029      	movs	r1, r5
    3e28:	3174      	adds	r1, #116	; 0x74
    3e2a:	f000 f963 	bl	40f4 <_malloc_r>
    3e2e:	1e04      	subs	r4, r0, #0
    3e30:	d008      	beq.n	3e44 <__sfmoreglue+0x28>
    3e32:	2100      	movs	r1, #0
    3e34:	002a      	movs	r2, r5
    3e36:	6001      	str	r1, [r0, #0]
    3e38:	6046      	str	r6, [r0, #4]
    3e3a:	300c      	adds	r0, #12
    3e3c:	60a0      	str	r0, [r4, #8]
    3e3e:	3268      	adds	r2, #104	; 0x68
    3e40:	f7ff fd16 	bl	3870 <memset>
    3e44:	0020      	movs	r0, r4
    3e46:	bd70      	pop	{r4, r5, r6, pc}

00003e48 <__sinit>:
    3e48:	6983      	ldr	r3, [r0, #24]
    3e4a:	b513      	push	{r0, r1, r4, lr}
    3e4c:	0004      	movs	r4, r0
    3e4e:	2b00      	cmp	r3, #0
    3e50:	d128      	bne.n	3ea4 <__sinit+0x5c>
    3e52:	6483      	str	r3, [r0, #72]	; 0x48
    3e54:	64c3      	str	r3, [r0, #76]	; 0x4c
    3e56:	6503      	str	r3, [r0, #80]	; 0x50
    3e58:	4b13      	ldr	r3, [pc, #76]	; (3ea8 <__sinit+0x60>)
    3e5a:	4a14      	ldr	r2, [pc, #80]	; (3eac <__sinit+0x64>)
    3e5c:	681b      	ldr	r3, [r3, #0]
    3e5e:	6282      	str	r2, [r0, #40]	; 0x28
    3e60:	9301      	str	r3, [sp, #4]
    3e62:	4298      	cmp	r0, r3
    3e64:	d101      	bne.n	3e6a <__sinit+0x22>
    3e66:	2301      	movs	r3, #1
    3e68:	6183      	str	r3, [r0, #24]
    3e6a:	0020      	movs	r0, r4
    3e6c:	f000 f820 	bl	3eb0 <__sfp>
    3e70:	6060      	str	r0, [r4, #4]
    3e72:	0020      	movs	r0, r4
    3e74:	f000 f81c 	bl	3eb0 <__sfp>
    3e78:	60a0      	str	r0, [r4, #8]
    3e7a:	0020      	movs	r0, r4
    3e7c:	f000 f818 	bl	3eb0 <__sfp>
    3e80:	2200      	movs	r2, #0
    3e82:	60e0      	str	r0, [r4, #12]
    3e84:	2104      	movs	r1, #4
    3e86:	6860      	ldr	r0, [r4, #4]
    3e88:	f7ff ffa4 	bl	3dd4 <std.isra.0>
    3e8c:	2201      	movs	r2, #1
    3e8e:	2109      	movs	r1, #9
    3e90:	68a0      	ldr	r0, [r4, #8]
    3e92:	f7ff ff9f 	bl	3dd4 <std.isra.0>
    3e96:	2202      	movs	r2, #2
    3e98:	2112      	movs	r1, #18
    3e9a:	68e0      	ldr	r0, [r4, #12]
    3e9c:	f7ff ff9a 	bl	3dd4 <std.isra.0>
    3ea0:	2301      	movs	r3, #1
    3ea2:	61a3      	str	r3, [r4, #24]
    3ea4:	bd13      	pop	{r0, r1, r4, pc}
    3ea6:	46c0      	nop			; (mov r8, r8)
    3ea8:	000043c4 	.word	0x000043c4
    3eac:	00003dc5 	.word	0x00003dc5

00003eb0 <__sfp>:
    3eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3eb2:	4b1e      	ldr	r3, [pc, #120]	; (3f2c <__sfp+0x7c>)
    3eb4:	0007      	movs	r7, r0
    3eb6:	681e      	ldr	r6, [r3, #0]
    3eb8:	69b3      	ldr	r3, [r6, #24]
    3eba:	2b00      	cmp	r3, #0
    3ebc:	d102      	bne.n	3ec4 <__sfp+0x14>
    3ebe:	0030      	movs	r0, r6
    3ec0:	f7ff ffc2 	bl	3e48 <__sinit>
    3ec4:	3648      	adds	r6, #72	; 0x48
    3ec6:	68b4      	ldr	r4, [r6, #8]
    3ec8:	6873      	ldr	r3, [r6, #4]
    3eca:	3b01      	subs	r3, #1
    3ecc:	d504      	bpl.n	3ed8 <__sfp+0x28>
    3ece:	6833      	ldr	r3, [r6, #0]
    3ed0:	2b00      	cmp	r3, #0
    3ed2:	d007      	beq.n	3ee4 <__sfp+0x34>
    3ed4:	6836      	ldr	r6, [r6, #0]
    3ed6:	e7f6      	b.n	3ec6 <__sfp+0x16>
    3ed8:	220c      	movs	r2, #12
    3eda:	5ea5      	ldrsh	r5, [r4, r2]
    3edc:	2d00      	cmp	r5, #0
    3ede:	d00d      	beq.n	3efc <__sfp+0x4c>
    3ee0:	3468      	adds	r4, #104	; 0x68
    3ee2:	e7f2      	b.n	3eca <__sfp+0x1a>
    3ee4:	2104      	movs	r1, #4
    3ee6:	0038      	movs	r0, r7
    3ee8:	f7ff ff98 	bl	3e1c <__sfmoreglue>
    3eec:	6030      	str	r0, [r6, #0]
    3eee:	2800      	cmp	r0, #0
    3ef0:	d1f0      	bne.n	3ed4 <__sfp+0x24>
    3ef2:	230c      	movs	r3, #12
    3ef4:	0004      	movs	r4, r0
    3ef6:	603b      	str	r3, [r7, #0]
    3ef8:	0020      	movs	r0, r4
    3efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3efc:	2301      	movs	r3, #1
    3efe:	0020      	movs	r0, r4
    3f00:	425b      	negs	r3, r3
    3f02:	81e3      	strh	r3, [r4, #14]
    3f04:	3302      	adds	r3, #2
    3f06:	81a3      	strh	r3, [r4, #12]
    3f08:	6665      	str	r5, [r4, #100]	; 0x64
    3f0a:	6025      	str	r5, [r4, #0]
    3f0c:	60a5      	str	r5, [r4, #8]
    3f0e:	6065      	str	r5, [r4, #4]
    3f10:	6125      	str	r5, [r4, #16]
    3f12:	6165      	str	r5, [r4, #20]
    3f14:	61a5      	str	r5, [r4, #24]
    3f16:	2208      	movs	r2, #8
    3f18:	0029      	movs	r1, r5
    3f1a:	305c      	adds	r0, #92	; 0x5c
    3f1c:	f7ff fca8 	bl	3870 <memset>
    3f20:	6365      	str	r5, [r4, #52]	; 0x34
    3f22:	63a5      	str	r5, [r4, #56]	; 0x38
    3f24:	64a5      	str	r5, [r4, #72]	; 0x48
    3f26:	64e5      	str	r5, [r4, #76]	; 0x4c
    3f28:	e7e6      	b.n	3ef8 <__sfp+0x48>
    3f2a:	46c0      	nop			; (mov r8, r8)
    3f2c:	000043c4 	.word	0x000043c4

00003f30 <_fwalk_reent>:
    3f30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3f32:	0004      	movs	r4, r0
    3f34:	0007      	movs	r7, r0
    3f36:	2600      	movs	r6, #0
    3f38:	9101      	str	r1, [sp, #4]
    3f3a:	3448      	adds	r4, #72	; 0x48
    3f3c:	2c00      	cmp	r4, #0
    3f3e:	d101      	bne.n	3f44 <_fwalk_reent+0x14>
    3f40:	0030      	movs	r0, r6
    3f42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3f44:	6863      	ldr	r3, [r4, #4]
    3f46:	68a5      	ldr	r5, [r4, #8]
    3f48:	9300      	str	r3, [sp, #0]
    3f4a:	9b00      	ldr	r3, [sp, #0]
    3f4c:	3b01      	subs	r3, #1
    3f4e:	9300      	str	r3, [sp, #0]
    3f50:	d501      	bpl.n	3f56 <_fwalk_reent+0x26>
    3f52:	6824      	ldr	r4, [r4, #0]
    3f54:	e7f2      	b.n	3f3c <_fwalk_reent+0xc>
    3f56:	89ab      	ldrh	r3, [r5, #12]
    3f58:	2b01      	cmp	r3, #1
    3f5a:	d908      	bls.n	3f6e <_fwalk_reent+0x3e>
    3f5c:	220e      	movs	r2, #14
    3f5e:	5eab      	ldrsh	r3, [r5, r2]
    3f60:	3301      	adds	r3, #1
    3f62:	d004      	beq.n	3f6e <_fwalk_reent+0x3e>
    3f64:	0029      	movs	r1, r5
    3f66:	0038      	movs	r0, r7
    3f68:	9b01      	ldr	r3, [sp, #4]
    3f6a:	4798      	blx	r3
    3f6c:	4306      	orrs	r6, r0
    3f6e:	3568      	adds	r5, #104	; 0x68
    3f70:	e7eb      	b.n	3f4a <_fwalk_reent+0x1a>
	...

00003f74 <__swhatbuf_r>:
    3f74:	b570      	push	{r4, r5, r6, lr}
    3f76:	000e      	movs	r6, r1
    3f78:	001d      	movs	r5, r3
    3f7a:	230e      	movs	r3, #14
    3f7c:	5ec9      	ldrsh	r1, [r1, r3]
    3f7e:	b090      	sub	sp, #64	; 0x40
    3f80:	0014      	movs	r4, r2
    3f82:	2900      	cmp	r1, #0
    3f84:	da07      	bge.n	3f96 <__swhatbuf_r+0x22>
    3f86:	2300      	movs	r3, #0
    3f88:	602b      	str	r3, [r5, #0]
    3f8a:	89b3      	ldrh	r3, [r6, #12]
    3f8c:	061b      	lsls	r3, r3, #24
    3f8e:	d411      	bmi.n	3fb4 <__swhatbuf_r+0x40>
    3f90:	2380      	movs	r3, #128	; 0x80
    3f92:	00db      	lsls	r3, r3, #3
    3f94:	e00f      	b.n	3fb6 <__swhatbuf_r+0x42>
    3f96:	aa01      	add	r2, sp, #4
    3f98:	f000 f98e 	bl	42b8 <_fstat_r>
    3f9c:	2800      	cmp	r0, #0
    3f9e:	dbf2      	blt.n	3f86 <__swhatbuf_r+0x12>
    3fa0:	22f0      	movs	r2, #240	; 0xf0
    3fa2:	9b02      	ldr	r3, [sp, #8]
    3fa4:	0212      	lsls	r2, r2, #8
    3fa6:	4013      	ands	r3, r2
    3fa8:	4a05      	ldr	r2, [pc, #20]	; (3fc0 <__swhatbuf_r+0x4c>)
    3faa:	189b      	adds	r3, r3, r2
    3fac:	425a      	negs	r2, r3
    3fae:	4153      	adcs	r3, r2
    3fb0:	602b      	str	r3, [r5, #0]
    3fb2:	e7ed      	b.n	3f90 <__swhatbuf_r+0x1c>
    3fb4:	2340      	movs	r3, #64	; 0x40
    3fb6:	2000      	movs	r0, #0
    3fb8:	6023      	str	r3, [r4, #0]
    3fba:	b010      	add	sp, #64	; 0x40
    3fbc:	bd70      	pop	{r4, r5, r6, pc}
    3fbe:	46c0      	nop			; (mov r8, r8)
    3fc0:	ffffe000 	.word	0xffffe000

00003fc4 <__smakebuf_r>:
    3fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3fc6:	2602      	movs	r6, #2
    3fc8:	898b      	ldrh	r3, [r1, #12]
    3fca:	0005      	movs	r5, r0
    3fcc:	000c      	movs	r4, r1
    3fce:	4233      	tst	r3, r6
    3fd0:	d006      	beq.n	3fe0 <__smakebuf_r+0x1c>
    3fd2:	0023      	movs	r3, r4
    3fd4:	3347      	adds	r3, #71	; 0x47
    3fd6:	6023      	str	r3, [r4, #0]
    3fd8:	6123      	str	r3, [r4, #16]
    3fda:	2301      	movs	r3, #1
    3fdc:	6163      	str	r3, [r4, #20]
    3fde:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3fe0:	ab01      	add	r3, sp, #4
    3fe2:	466a      	mov	r2, sp
    3fe4:	f7ff ffc6 	bl	3f74 <__swhatbuf_r>
    3fe8:	9900      	ldr	r1, [sp, #0]
    3fea:	0007      	movs	r7, r0
    3fec:	0028      	movs	r0, r5
    3fee:	f000 f881 	bl	40f4 <_malloc_r>
    3ff2:	2800      	cmp	r0, #0
    3ff4:	d108      	bne.n	4008 <__smakebuf_r+0x44>
    3ff6:	220c      	movs	r2, #12
    3ff8:	5ea3      	ldrsh	r3, [r4, r2]
    3ffa:	059a      	lsls	r2, r3, #22
    3ffc:	d4ef      	bmi.n	3fde <__smakebuf_r+0x1a>
    3ffe:	2203      	movs	r2, #3
    4000:	4393      	bics	r3, r2
    4002:	431e      	orrs	r6, r3
    4004:	81a6      	strh	r6, [r4, #12]
    4006:	e7e4      	b.n	3fd2 <__smakebuf_r+0xe>
    4008:	4b0f      	ldr	r3, [pc, #60]	; (4048 <__smakebuf_r+0x84>)
    400a:	62ab      	str	r3, [r5, #40]	; 0x28
    400c:	2380      	movs	r3, #128	; 0x80
    400e:	89a2      	ldrh	r2, [r4, #12]
    4010:	6020      	str	r0, [r4, #0]
    4012:	4313      	orrs	r3, r2
    4014:	81a3      	strh	r3, [r4, #12]
    4016:	9b00      	ldr	r3, [sp, #0]
    4018:	6120      	str	r0, [r4, #16]
    401a:	6163      	str	r3, [r4, #20]
    401c:	9b01      	ldr	r3, [sp, #4]
    401e:	2b00      	cmp	r3, #0
    4020:	d00d      	beq.n	403e <__smakebuf_r+0x7a>
    4022:	230e      	movs	r3, #14
    4024:	5ee1      	ldrsh	r1, [r4, r3]
    4026:	0028      	movs	r0, r5
    4028:	f000 f958 	bl	42dc <_isatty_r>
    402c:	2800      	cmp	r0, #0
    402e:	d006      	beq.n	403e <__smakebuf_r+0x7a>
    4030:	2203      	movs	r2, #3
    4032:	89a3      	ldrh	r3, [r4, #12]
    4034:	4393      	bics	r3, r2
    4036:	001a      	movs	r2, r3
    4038:	2301      	movs	r3, #1
    403a:	4313      	orrs	r3, r2
    403c:	81a3      	strh	r3, [r4, #12]
    403e:	89a0      	ldrh	r0, [r4, #12]
    4040:	4338      	orrs	r0, r7
    4042:	81a0      	strh	r0, [r4, #12]
    4044:	e7cb      	b.n	3fde <__smakebuf_r+0x1a>
    4046:	46c0      	nop			; (mov r8, r8)
    4048:	00003dc5 	.word	0x00003dc5

0000404c <malloc>:
    404c:	b510      	push	{r4, lr}
    404e:	4b03      	ldr	r3, [pc, #12]	; (405c <malloc+0x10>)
    4050:	0001      	movs	r1, r0
    4052:	6818      	ldr	r0, [r3, #0]
    4054:	f000 f84e 	bl	40f4 <_malloc_r>
    4058:	bd10      	pop	{r4, pc}
    405a:	46c0      	nop			; (mov r8, r8)
    405c:	20000008 	.word	0x20000008

00004060 <_free_r>:
    4060:	b570      	push	{r4, r5, r6, lr}
    4062:	0005      	movs	r5, r0
    4064:	2900      	cmp	r1, #0
    4066:	d010      	beq.n	408a <_free_r+0x2a>
    4068:	1f0c      	subs	r4, r1, #4
    406a:	6823      	ldr	r3, [r4, #0]
    406c:	2b00      	cmp	r3, #0
    406e:	da00      	bge.n	4072 <_free_r+0x12>
    4070:	18e4      	adds	r4, r4, r3
    4072:	0028      	movs	r0, r5
    4074:	f000 f958 	bl	4328 <__malloc_lock>
    4078:	4a1d      	ldr	r2, [pc, #116]	; (40f0 <_free_r+0x90>)
    407a:	6813      	ldr	r3, [r2, #0]
    407c:	2b00      	cmp	r3, #0
    407e:	d105      	bne.n	408c <_free_r+0x2c>
    4080:	6063      	str	r3, [r4, #4]
    4082:	6014      	str	r4, [r2, #0]
    4084:	0028      	movs	r0, r5
    4086:	f000 f950 	bl	432a <__malloc_unlock>
    408a:	bd70      	pop	{r4, r5, r6, pc}
    408c:	42a3      	cmp	r3, r4
    408e:	d909      	bls.n	40a4 <_free_r+0x44>
    4090:	6821      	ldr	r1, [r4, #0]
    4092:	1860      	adds	r0, r4, r1
    4094:	4283      	cmp	r3, r0
    4096:	d1f3      	bne.n	4080 <_free_r+0x20>
    4098:	6818      	ldr	r0, [r3, #0]
    409a:	685b      	ldr	r3, [r3, #4]
    409c:	1841      	adds	r1, r0, r1
    409e:	6021      	str	r1, [r4, #0]
    40a0:	e7ee      	b.n	4080 <_free_r+0x20>
    40a2:	0013      	movs	r3, r2
    40a4:	685a      	ldr	r2, [r3, #4]
    40a6:	2a00      	cmp	r2, #0
    40a8:	d001      	beq.n	40ae <_free_r+0x4e>
    40aa:	42a2      	cmp	r2, r4
    40ac:	d9f9      	bls.n	40a2 <_free_r+0x42>
    40ae:	6819      	ldr	r1, [r3, #0]
    40b0:	1858      	adds	r0, r3, r1
    40b2:	42a0      	cmp	r0, r4
    40b4:	d10b      	bne.n	40ce <_free_r+0x6e>
    40b6:	6820      	ldr	r0, [r4, #0]
    40b8:	1809      	adds	r1, r1, r0
    40ba:	1858      	adds	r0, r3, r1
    40bc:	6019      	str	r1, [r3, #0]
    40be:	4282      	cmp	r2, r0
    40c0:	d1e0      	bne.n	4084 <_free_r+0x24>
    40c2:	6810      	ldr	r0, [r2, #0]
    40c4:	6852      	ldr	r2, [r2, #4]
    40c6:	1841      	adds	r1, r0, r1
    40c8:	6019      	str	r1, [r3, #0]
    40ca:	605a      	str	r2, [r3, #4]
    40cc:	e7da      	b.n	4084 <_free_r+0x24>
    40ce:	42a0      	cmp	r0, r4
    40d0:	d902      	bls.n	40d8 <_free_r+0x78>
    40d2:	230c      	movs	r3, #12
    40d4:	602b      	str	r3, [r5, #0]
    40d6:	e7d5      	b.n	4084 <_free_r+0x24>
    40d8:	6821      	ldr	r1, [r4, #0]
    40da:	1860      	adds	r0, r4, r1
    40dc:	4282      	cmp	r2, r0
    40de:	d103      	bne.n	40e8 <_free_r+0x88>
    40e0:	6810      	ldr	r0, [r2, #0]
    40e2:	6852      	ldr	r2, [r2, #4]
    40e4:	1841      	adds	r1, r0, r1
    40e6:	6021      	str	r1, [r4, #0]
    40e8:	6062      	str	r2, [r4, #4]
    40ea:	605c      	str	r4, [r3, #4]
    40ec:	e7ca      	b.n	4084 <_free_r+0x24>
    40ee:	46c0      	nop			; (mov r8, r8)
    40f0:	20003968 	.word	0x20003968

000040f4 <_malloc_r>:
    40f4:	2303      	movs	r3, #3
    40f6:	b570      	push	{r4, r5, r6, lr}
    40f8:	1ccd      	adds	r5, r1, #3
    40fa:	439d      	bics	r5, r3
    40fc:	3508      	adds	r5, #8
    40fe:	0006      	movs	r6, r0
    4100:	2d0c      	cmp	r5, #12
    4102:	d21e      	bcs.n	4142 <_malloc_r+0x4e>
    4104:	250c      	movs	r5, #12
    4106:	42a9      	cmp	r1, r5
    4108:	d81d      	bhi.n	4146 <_malloc_r+0x52>
    410a:	0030      	movs	r0, r6
    410c:	f000 f90c 	bl	4328 <__malloc_lock>
    4110:	4a25      	ldr	r2, [pc, #148]	; (41a8 <_malloc_r+0xb4>)
    4112:	6814      	ldr	r4, [r2, #0]
    4114:	0021      	movs	r1, r4
    4116:	2900      	cmp	r1, #0
    4118:	d119      	bne.n	414e <_malloc_r+0x5a>
    411a:	4c24      	ldr	r4, [pc, #144]	; (41ac <_malloc_r+0xb8>)
    411c:	6823      	ldr	r3, [r4, #0]
    411e:	2b00      	cmp	r3, #0
    4120:	d103      	bne.n	412a <_malloc_r+0x36>
    4122:	0030      	movs	r0, r6
    4124:	f000 f844 	bl	41b0 <_sbrk_r>
    4128:	6020      	str	r0, [r4, #0]
    412a:	0029      	movs	r1, r5
    412c:	0030      	movs	r0, r6
    412e:	f000 f83f 	bl	41b0 <_sbrk_r>
    4132:	1c43      	adds	r3, r0, #1
    4134:	d12c      	bne.n	4190 <_malloc_r+0x9c>
    4136:	230c      	movs	r3, #12
    4138:	0030      	movs	r0, r6
    413a:	6033      	str	r3, [r6, #0]
    413c:	f000 f8f5 	bl	432a <__malloc_unlock>
    4140:	e003      	b.n	414a <_malloc_r+0x56>
    4142:	2d00      	cmp	r5, #0
    4144:	dadf      	bge.n	4106 <_malloc_r+0x12>
    4146:	230c      	movs	r3, #12
    4148:	6033      	str	r3, [r6, #0]
    414a:	2000      	movs	r0, #0
    414c:	bd70      	pop	{r4, r5, r6, pc}
    414e:	680b      	ldr	r3, [r1, #0]
    4150:	1b5b      	subs	r3, r3, r5
    4152:	d41a      	bmi.n	418a <_malloc_r+0x96>
    4154:	2b0b      	cmp	r3, #11
    4156:	d903      	bls.n	4160 <_malloc_r+0x6c>
    4158:	600b      	str	r3, [r1, #0]
    415a:	18cc      	adds	r4, r1, r3
    415c:	6025      	str	r5, [r4, #0]
    415e:	e003      	b.n	4168 <_malloc_r+0x74>
    4160:	428c      	cmp	r4, r1
    4162:	d10e      	bne.n	4182 <_malloc_r+0x8e>
    4164:	6863      	ldr	r3, [r4, #4]
    4166:	6013      	str	r3, [r2, #0]
    4168:	0030      	movs	r0, r6
    416a:	f000 f8de 	bl	432a <__malloc_unlock>
    416e:	0020      	movs	r0, r4
    4170:	2207      	movs	r2, #7
    4172:	300b      	adds	r0, #11
    4174:	1d23      	adds	r3, r4, #4
    4176:	4390      	bics	r0, r2
    4178:	1ac3      	subs	r3, r0, r3
    417a:	d0e7      	beq.n	414c <_malloc_r+0x58>
    417c:	425a      	negs	r2, r3
    417e:	50e2      	str	r2, [r4, r3]
    4180:	e7e4      	b.n	414c <_malloc_r+0x58>
    4182:	684b      	ldr	r3, [r1, #4]
    4184:	6063      	str	r3, [r4, #4]
    4186:	000c      	movs	r4, r1
    4188:	e7ee      	b.n	4168 <_malloc_r+0x74>
    418a:	000c      	movs	r4, r1
    418c:	6849      	ldr	r1, [r1, #4]
    418e:	e7c2      	b.n	4116 <_malloc_r+0x22>
    4190:	2303      	movs	r3, #3
    4192:	1cc4      	adds	r4, r0, #3
    4194:	439c      	bics	r4, r3
    4196:	42a0      	cmp	r0, r4
    4198:	d0e0      	beq.n	415c <_malloc_r+0x68>
    419a:	1a21      	subs	r1, r4, r0
    419c:	0030      	movs	r0, r6
    419e:	f000 f807 	bl	41b0 <_sbrk_r>
    41a2:	1c43      	adds	r3, r0, #1
    41a4:	d1da      	bne.n	415c <_malloc_r+0x68>
    41a6:	e7c6      	b.n	4136 <_malloc_r+0x42>
    41a8:	20003968 	.word	0x20003968
    41ac:	2000396c 	.word	0x2000396c

000041b0 <_sbrk_r>:
    41b0:	2300      	movs	r3, #0
    41b2:	b570      	push	{r4, r5, r6, lr}
    41b4:	4c06      	ldr	r4, [pc, #24]	; (41d0 <_sbrk_r+0x20>)
    41b6:	0005      	movs	r5, r0
    41b8:	0008      	movs	r0, r1
    41ba:	6023      	str	r3, [r4, #0]
    41bc:	f7ff f8da 	bl	3374 <_sbrk>
    41c0:	1c43      	adds	r3, r0, #1
    41c2:	d103      	bne.n	41cc <_sbrk_r+0x1c>
    41c4:	6823      	ldr	r3, [r4, #0]
    41c6:	2b00      	cmp	r3, #0
    41c8:	d000      	beq.n	41cc <_sbrk_r+0x1c>
    41ca:	602b      	str	r3, [r5, #0]
    41cc:	bd70      	pop	{r4, r5, r6, pc}
    41ce:	46c0      	nop			; (mov r8, r8)
    41d0:	200039ac 	.word	0x200039ac

000041d4 <__sread>:
    41d4:	b570      	push	{r4, r5, r6, lr}
    41d6:	000c      	movs	r4, r1
    41d8:	250e      	movs	r5, #14
    41da:	5f49      	ldrsh	r1, [r1, r5]
    41dc:	f000 f8a6 	bl	432c <_read_r>
    41e0:	2800      	cmp	r0, #0
    41e2:	db03      	blt.n	41ec <__sread+0x18>
    41e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    41e6:	181b      	adds	r3, r3, r0
    41e8:	6563      	str	r3, [r4, #84]	; 0x54
    41ea:	bd70      	pop	{r4, r5, r6, pc}
    41ec:	89a3      	ldrh	r3, [r4, #12]
    41ee:	4a02      	ldr	r2, [pc, #8]	; (41f8 <__sread+0x24>)
    41f0:	4013      	ands	r3, r2
    41f2:	81a3      	strh	r3, [r4, #12]
    41f4:	e7f9      	b.n	41ea <__sread+0x16>
    41f6:	46c0      	nop			; (mov r8, r8)
    41f8:	ffffefff 	.word	0xffffefff

000041fc <__swrite>:
    41fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41fe:	001f      	movs	r7, r3
    4200:	898b      	ldrh	r3, [r1, #12]
    4202:	0005      	movs	r5, r0
    4204:	000c      	movs	r4, r1
    4206:	0016      	movs	r6, r2
    4208:	05db      	lsls	r3, r3, #23
    420a:	d505      	bpl.n	4218 <__swrite+0x1c>
    420c:	230e      	movs	r3, #14
    420e:	5ec9      	ldrsh	r1, [r1, r3]
    4210:	2200      	movs	r2, #0
    4212:	2302      	movs	r3, #2
    4214:	f000 f874 	bl	4300 <_lseek_r>
    4218:	89a3      	ldrh	r3, [r4, #12]
    421a:	4a05      	ldr	r2, [pc, #20]	; (4230 <__swrite+0x34>)
    421c:	0028      	movs	r0, r5
    421e:	4013      	ands	r3, r2
    4220:	81a3      	strh	r3, [r4, #12]
    4222:	0032      	movs	r2, r6
    4224:	230e      	movs	r3, #14
    4226:	5ee1      	ldrsh	r1, [r4, r3]
    4228:	003b      	movs	r3, r7
    422a:	f000 f81f 	bl	426c <_write_r>
    422e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4230:	ffffefff 	.word	0xffffefff

00004234 <__sseek>:
    4234:	b570      	push	{r4, r5, r6, lr}
    4236:	000c      	movs	r4, r1
    4238:	250e      	movs	r5, #14
    423a:	5f49      	ldrsh	r1, [r1, r5]
    423c:	f000 f860 	bl	4300 <_lseek_r>
    4240:	89a3      	ldrh	r3, [r4, #12]
    4242:	1c42      	adds	r2, r0, #1
    4244:	d103      	bne.n	424e <__sseek+0x1a>
    4246:	4a05      	ldr	r2, [pc, #20]	; (425c <__sseek+0x28>)
    4248:	4013      	ands	r3, r2
    424a:	81a3      	strh	r3, [r4, #12]
    424c:	bd70      	pop	{r4, r5, r6, pc}
    424e:	2280      	movs	r2, #128	; 0x80
    4250:	0152      	lsls	r2, r2, #5
    4252:	4313      	orrs	r3, r2
    4254:	81a3      	strh	r3, [r4, #12]
    4256:	6560      	str	r0, [r4, #84]	; 0x54
    4258:	e7f8      	b.n	424c <__sseek+0x18>
    425a:	46c0      	nop			; (mov r8, r8)
    425c:	ffffefff 	.word	0xffffefff

00004260 <__sclose>:
    4260:	b510      	push	{r4, lr}
    4262:	230e      	movs	r3, #14
    4264:	5ec9      	ldrsh	r1, [r1, r3]
    4266:	f000 f815 	bl	4294 <_close_r>
    426a:	bd10      	pop	{r4, pc}

0000426c <_write_r>:
    426c:	b570      	push	{r4, r5, r6, lr}
    426e:	0005      	movs	r5, r0
    4270:	0008      	movs	r0, r1
    4272:	0011      	movs	r1, r2
    4274:	2200      	movs	r2, #0
    4276:	4c06      	ldr	r4, [pc, #24]	; (4290 <_write_r+0x24>)
    4278:	6022      	str	r2, [r4, #0]
    427a:	001a      	movs	r2, r3
    427c:	f7fc fe6a 	bl	f54 <_write>
    4280:	1c43      	adds	r3, r0, #1
    4282:	d103      	bne.n	428c <_write_r+0x20>
    4284:	6823      	ldr	r3, [r4, #0]
    4286:	2b00      	cmp	r3, #0
    4288:	d000      	beq.n	428c <_write_r+0x20>
    428a:	602b      	str	r3, [r5, #0]
    428c:	bd70      	pop	{r4, r5, r6, pc}
    428e:	46c0      	nop			; (mov r8, r8)
    4290:	200039ac 	.word	0x200039ac

00004294 <_close_r>:
    4294:	2300      	movs	r3, #0
    4296:	b570      	push	{r4, r5, r6, lr}
    4298:	4c06      	ldr	r4, [pc, #24]	; (42b4 <_close_r+0x20>)
    429a:	0005      	movs	r5, r0
    429c:	0008      	movs	r0, r1
    429e:	6023      	str	r3, [r4, #0]
    42a0:	f7ff f886 	bl	33b0 <_close>
    42a4:	1c43      	adds	r3, r0, #1
    42a6:	d103      	bne.n	42b0 <_close_r+0x1c>
    42a8:	6823      	ldr	r3, [r4, #0]
    42aa:	2b00      	cmp	r3, #0
    42ac:	d000      	beq.n	42b0 <_close_r+0x1c>
    42ae:	602b      	str	r3, [r5, #0]
    42b0:	bd70      	pop	{r4, r5, r6, pc}
    42b2:	46c0      	nop			; (mov r8, r8)
    42b4:	200039ac 	.word	0x200039ac

000042b8 <_fstat_r>:
    42b8:	2300      	movs	r3, #0
    42ba:	b570      	push	{r4, r5, r6, lr}
    42bc:	4c06      	ldr	r4, [pc, #24]	; (42d8 <_fstat_r+0x20>)
    42be:	0005      	movs	r5, r0
    42c0:	0008      	movs	r0, r1
    42c2:	0011      	movs	r1, r2
    42c4:	6023      	str	r3, [r4, #0]
    42c6:	f7ff f87d 	bl	33c4 <_fstat>
    42ca:	1c43      	adds	r3, r0, #1
    42cc:	d103      	bne.n	42d6 <_fstat_r+0x1e>
    42ce:	6823      	ldr	r3, [r4, #0]
    42d0:	2b00      	cmp	r3, #0
    42d2:	d000      	beq.n	42d6 <_fstat_r+0x1e>
    42d4:	602b      	str	r3, [r5, #0]
    42d6:	bd70      	pop	{r4, r5, r6, pc}
    42d8:	200039ac 	.word	0x200039ac

000042dc <_isatty_r>:
    42dc:	2300      	movs	r3, #0
    42de:	b570      	push	{r4, r5, r6, lr}
    42e0:	4c06      	ldr	r4, [pc, #24]	; (42fc <_isatty_r+0x20>)
    42e2:	0005      	movs	r5, r0
    42e4:	0008      	movs	r0, r1
    42e6:	6023      	str	r3, [r4, #0]
    42e8:	f7ff f87a 	bl	33e0 <_isatty>
    42ec:	1c43      	adds	r3, r0, #1
    42ee:	d103      	bne.n	42f8 <_isatty_r+0x1c>
    42f0:	6823      	ldr	r3, [r4, #0]
    42f2:	2b00      	cmp	r3, #0
    42f4:	d000      	beq.n	42f8 <_isatty_r+0x1c>
    42f6:	602b      	str	r3, [r5, #0]
    42f8:	bd70      	pop	{r4, r5, r6, pc}
    42fa:	46c0      	nop			; (mov r8, r8)
    42fc:	200039ac 	.word	0x200039ac

00004300 <_lseek_r>:
    4300:	b570      	push	{r4, r5, r6, lr}
    4302:	0005      	movs	r5, r0
    4304:	0008      	movs	r0, r1
    4306:	0011      	movs	r1, r2
    4308:	2200      	movs	r2, #0
    430a:	4c06      	ldr	r4, [pc, #24]	; (4324 <_lseek_r+0x24>)
    430c:	6022      	str	r2, [r4, #0]
    430e:	001a      	movs	r2, r3
    4310:	f7ff f86f 	bl	33f2 <_lseek>
    4314:	1c43      	adds	r3, r0, #1
    4316:	d103      	bne.n	4320 <_lseek_r+0x20>
    4318:	6823      	ldr	r3, [r4, #0]
    431a:	2b00      	cmp	r3, #0
    431c:	d000      	beq.n	4320 <_lseek_r+0x20>
    431e:	602b      	str	r3, [r5, #0]
    4320:	bd70      	pop	{r4, r5, r6, pc}
    4322:	46c0      	nop			; (mov r8, r8)
    4324:	200039ac 	.word	0x200039ac

00004328 <__malloc_lock>:
    4328:	4770      	bx	lr

0000432a <__malloc_unlock>:
    432a:	4770      	bx	lr

0000432c <_read_r>:
    432c:	b570      	push	{r4, r5, r6, lr}
    432e:	0005      	movs	r5, r0
    4330:	0008      	movs	r0, r1
    4332:	0011      	movs	r1, r2
    4334:	2200      	movs	r2, #0
    4336:	4c06      	ldr	r4, [pc, #24]	; (4350 <_read_r+0x24>)
    4338:	6022      	str	r2, [r4, #0]
    433a:	001a      	movs	r2, r3
    433c:	f7fc fde0 	bl	f00 <_read>
    4340:	1c43      	adds	r3, r0, #1
    4342:	d103      	bne.n	434c <_read_r+0x20>
    4344:	6823      	ldr	r3, [r4, #0]
    4346:	2b00      	cmp	r3, #0
    4348:	d000      	beq.n	434c <_read_r+0x20>
    434a:	602b      	str	r3, [r5, #0]
    434c:	bd70      	pop	{r4, r5, r6, pc}
    434e:	46c0      	nop			; (mov r8, r8)
    4350:	200039ac 	.word	0x200039ac
    4354:	5f44454c 	.word	0x5f44454c
    4358:	00004e4f 	.word	0x00004e4f
    435c:	5f44454c 	.word	0x5f44454c
    4360:	00004646 	.word	0x00004646
    4364:	454c4449 	.word	0x454c4449
    4368:	00000000 	.word	0x00000000
    436c:	42000400 	.word	0x42000400
    4370:	42000800 	.word	0x42000800
    4374:	42000c00 	.word	0x42000c00
    4378:	42001000 	.word	0x42001000
    437c:	42001400 	.word	0x42001400
    4380:	42001800 	.word	0x42001800
    4384:	0c0b0a09 	.word	0x0c0b0a09
    4388:	00000e0d 	.word	0x00000e0d
    438c:	00002b1a 	.word	0x00002b1a
    4390:	00002b90 	.word	0x00002b90
    4394:	00002b90 	.word	0x00002b90
    4398:	00002b34 	.word	0x00002b34
    439c:	00002b3a 	.word	0x00002b3a
    43a0:	00002b20 	.word	0x00002b20
    43a4:	00002b40 	.word	0x00002b40
    43a8:	00002b76 	.word	0x00002b76
    43ac:	65686373 	.word	0x65686373
    43b0:	656c7564 	.word	0x656c7564
    43b4:	74732072 	.word	0x74732072
    43b8:	65747261 	.word	0x65747261
    43bc:	0d2e2e64 	.word	0x0d2e2e64
    43c0:	0000000a 	.word	0x0000000a

000043c4 <_global_impure_ptr>:
    43c4:	2000000c                                ... 

000043c8 <__sf_fake_stderr>:
	...

000043e8 <__sf_fake_stdin>:
	...

00004408 <__sf_fake_stdout>:
	...

00004428 <_init>:
    4428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    442a:	46c0      	nop			; (mov r8, r8)
    442c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    442e:	bc08      	pop	{r3}
    4430:	469e      	mov	lr, r3
    4432:	4770      	bx	lr

00004434 <__init_array_start>:
    4434:	000000d1 	.word	0x000000d1

00004438 <_fini>:
    4438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    443a:	46c0      	nop			; (mov r8, r8)
    443c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    443e:	bc08      	pop	{r3}
    4440:	469e      	mov	lr, r3
    4442:	4770      	bx	lr

00004444 <__fini_array_start>:
    4444:	000000a9 	.word	0x000000a9
