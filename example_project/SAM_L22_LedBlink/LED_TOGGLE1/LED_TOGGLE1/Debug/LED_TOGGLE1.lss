
LED_TOGGLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000287c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  0000287c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000038dc  2000000c  00002888  0002000c  2**2
                  ALLOC
  3 .stack        00002000  200038e8  00006164  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   00019998  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f79  00000000  00000000  00039a25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000023f7  00000000  00000000  0003c99e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000730  00000000  00000000  0003ed95  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000610  00000000  00000000  0003f4c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001f395  00000000  00000000  0003fad5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000cc3c  00000000  00000000  0005ee6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a223a  00000000  00000000  0006baa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000016a0  00000000  00000000  0010dce0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e8 58 00 20 ed 22 00 00 71 23 00 00 71 23 00 00     .X. ."..q#..q#..
	...
      2c:	71 23 00 00 00 00 00 00 00 00 00 00 71 23 00 00     q#..........q#..
      3c:	f5 25 00 00 71 23 00 00 71 23 00 00 71 23 00 00     .%..q#..q#..q#..
      4c:	71 23 00 00 71 23 00 00 71 23 00 00 71 23 00 00     q#..q#..q#..q#..
      5c:	71 23 00 00 71 23 00 00 71 23 00 00 71 23 00 00     q#..q#..q#..q#..
      6c:	71 23 00 00 71 23 00 00 71 23 00 00 71 23 00 00     q#..q#..q#..q#..
      7c:	71 23 00 00 d1 0c 00 00 e5 0c 00 00 f9 0c 00 00     q#..............
      8c:	0d 0d 00 00 71 23 00 00 71 23 00 00 71 23 00 00     ....q#..q#..q#..
      9c:	71 23 00 00 71 23 00 00 71 23 00 00                 q#..q#..q#..

000000a8 <__do_global_dtors_aux>:
      a8:	b510      	push	{r4, lr}
      aa:	4c06      	ldr	r4, [pc, #24]	; (c4 <__do_global_dtors_aux+0x1c>)
      ac:	7823      	ldrb	r3, [r4, #0]
      ae:	2b00      	cmp	r3, #0
      b0:	d107      	bne.n	c2 <__do_global_dtors_aux+0x1a>
      b2:	4b05      	ldr	r3, [pc, #20]	; (c8 <__do_global_dtors_aux+0x20>)
      b4:	2b00      	cmp	r3, #0
      b6:	d002      	beq.n	be <__do_global_dtors_aux+0x16>
      b8:	4804      	ldr	r0, [pc, #16]	; (cc <__do_global_dtors_aux+0x24>)
      ba:	e000      	b.n	be <__do_global_dtors_aux+0x16>
      bc:	bf00      	nop
      be:	2301      	movs	r3, #1
      c0:	7023      	strb	r3, [r4, #0]
      c2:	bd10      	pop	{r4, pc}
      c4:	2000000c 	.word	0x2000000c
      c8:	00000000 	.word	0x00000000
      cc:	0000287c 	.word	0x0000287c

000000d0 <frame_dummy>:
      d0:	4b08      	ldr	r3, [pc, #32]	; (f4 <frame_dummy+0x24>)
      d2:	b510      	push	{r4, lr}
      d4:	2b00      	cmp	r3, #0
      d6:	d003      	beq.n	e0 <frame_dummy+0x10>
      d8:	4907      	ldr	r1, [pc, #28]	; (f8 <frame_dummy+0x28>)
      da:	4808      	ldr	r0, [pc, #32]	; (fc <frame_dummy+0x2c>)
      dc:	e000      	b.n	e0 <frame_dummy+0x10>
      de:	bf00      	nop
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x30>)
      e2:	6803      	ldr	r3, [r0, #0]
      e4:	2b00      	cmp	r3, #0
      e6:	d100      	bne.n	ea <frame_dummy+0x1a>
      e8:	bd10      	pop	{r4, pc}
      ea:	4b06      	ldr	r3, [pc, #24]	; (104 <frame_dummy+0x34>)
      ec:	2b00      	cmp	r3, #0
      ee:	d0fb      	beq.n	e8 <frame_dummy+0x18>
      f0:	4798      	blx	r3
      f2:	e7f9      	b.n	e8 <frame_dummy+0x18>
      f4:	00000000 	.word	0x00000000
      f8:	20000010 	.word	0x20000010
      fc:	0000287c 	.word	0x0000287c
     100:	0000287c 	.word	0x0000287c
     104:	00000000 	.word	0x00000000

00000108 <FreeRtosTasks>:


TaskHandle_t sLedOnTask;

BaseType_t FreeRtosTasks(void)
{
     108:	b590      	push	{r4, r7, lr}
     10a:	b085      	sub	sp, #20
     10c:	af02      	add	r7, sp, #8
BaseType_t u32RetType; 	
	
u32RetType =  xTaskCreate( led_on,"LED_ON", 10, 0u, 1u,&sLedOnTask );
     10e:	4908      	ldr	r1, [pc, #32]	; (130 <FreeRtosTasks+0x28>)
     110:	4808      	ldr	r0, [pc, #32]	; (134 <FreeRtosTasks+0x2c>)
     112:	4b09      	ldr	r3, [pc, #36]	; (138 <FreeRtosTasks+0x30>)
     114:	9301      	str	r3, [sp, #4]
     116:	2301      	movs	r3, #1
     118:	9300      	str	r3, [sp, #0]
     11a:	2300      	movs	r3, #0
     11c:	220a      	movs	r2, #10
     11e:	4c07      	ldr	r4, [pc, #28]	; (13c <FreeRtosTasks+0x34>)
     120:	47a0      	blx	r4
     122:	0003      	movs	r3, r0
     124:	607b      	str	r3, [r7, #4]
 
 
     126:	46c0      	nop			; (mov r8, r8)
     128:	0018      	movs	r0, r3
     12a:	46bd      	mov	sp, r7
     12c:	b003      	add	sp, #12
     12e:	bd90      	pop	{r4, r7, pc}
     130:	000027f8 	.word	0x000027f8
     134:	00000219 	.word	0x00000219
     138:	200038b8 	.word	0x200038b8
     13c:	00000561 	.word	0x00000561

00000140 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     140:	b580      	push	{r7, lr}
     142:	b084      	sub	sp, #16
     144:	af00      	add	r7, sp, #0
     146:	0002      	movs	r2, r0
     148:	1dfb      	adds	r3, r7, #7
     14a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     14c:	230f      	movs	r3, #15
     14e:	18fb      	adds	r3, r7, r3
     150:	1dfa      	adds	r2, r7, #7
     152:	7812      	ldrb	r2, [r2, #0]
     154:	09d2      	lsrs	r2, r2, #7
     156:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     158:	230e      	movs	r3, #14
     15a:	18fb      	adds	r3, r7, r3
     15c:	1dfa      	adds	r2, r7, #7
     15e:	7812      	ldrb	r2, [r2, #0]
     160:	0952      	lsrs	r2, r2, #5
     162:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     164:	4b0d      	ldr	r3, [pc, #52]	; (19c <system_pinmux_get_group_from_gpio_pin+0x5c>)
     166:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     168:	230f      	movs	r3, #15
     16a:	18fb      	adds	r3, r7, r3
     16c:	781b      	ldrb	r3, [r3, #0]
     16e:	2b00      	cmp	r3, #0
     170:	d10f      	bne.n	192 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     172:	230f      	movs	r3, #15
     174:	18fb      	adds	r3, r7, r3
     176:	781b      	ldrb	r3, [r3, #0]
     178:	009b      	lsls	r3, r3, #2
     17a:	2210      	movs	r2, #16
     17c:	4694      	mov	ip, r2
     17e:	44bc      	add	ip, r7
     180:	4463      	add	r3, ip
     182:	3b08      	subs	r3, #8
     184:	681a      	ldr	r2, [r3, #0]
     186:	230e      	movs	r3, #14
     188:	18fb      	adds	r3, r7, r3
     18a:	781b      	ldrb	r3, [r3, #0]
     18c:	01db      	lsls	r3, r3, #7
     18e:	18d3      	adds	r3, r2, r3
     190:	e000      	b.n	194 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     192:	2300      	movs	r3, #0
	}
}
     194:	0018      	movs	r0, r3
     196:	46bd      	mov	sp, r7
     198:	b004      	add	sp, #16
     19a:	bd80      	pop	{r7, pc}
     19c:	41006000 	.word	0x41006000

000001a0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     1a0:	b580      	push	{r7, lr}
     1a2:	b082      	sub	sp, #8
     1a4:	af00      	add	r7, sp, #0
     1a6:	0002      	movs	r2, r0
     1a8:	1dfb      	adds	r3, r7, #7
     1aa:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     1ac:	1dfb      	adds	r3, r7, #7
     1ae:	781b      	ldrb	r3, [r3, #0]
     1b0:	0018      	movs	r0, r3
     1b2:	4b03      	ldr	r3, [pc, #12]	; (1c0 <port_get_group_from_gpio_pin+0x20>)
     1b4:	4798      	blx	r3
     1b6:	0003      	movs	r3, r0
}
     1b8:	0018      	movs	r0, r3
     1ba:	46bd      	mov	sp, r7
     1bc:	b002      	add	sp, #8
     1be:	bd80      	pop	{r7, pc}
     1c0:	00000141 	.word	0x00000141

000001c4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     1c4:	b580      	push	{r7, lr}
     1c6:	b084      	sub	sp, #16
     1c8:	af00      	add	r7, sp, #0
     1ca:	0002      	movs	r2, r0
     1cc:	1dfb      	adds	r3, r7, #7
     1ce:	701a      	strb	r2, [r3, #0]
     1d0:	1dbb      	adds	r3, r7, #6
     1d2:	1c0a      	adds	r2, r1, #0
     1d4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     1d6:	1dfb      	adds	r3, r7, #7
     1d8:	781b      	ldrb	r3, [r3, #0]
     1da:	0018      	movs	r0, r3
     1dc:	4b0d      	ldr	r3, [pc, #52]	; (214 <port_pin_set_output_level+0x50>)
     1de:	4798      	blx	r3
     1e0:	0003      	movs	r3, r0
     1e2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1e4:	1dfb      	adds	r3, r7, #7
     1e6:	781b      	ldrb	r3, [r3, #0]
     1e8:	221f      	movs	r2, #31
     1ea:	4013      	ands	r3, r2
     1ec:	2201      	movs	r2, #1
     1ee:	409a      	lsls	r2, r3
     1f0:	0013      	movs	r3, r2
     1f2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     1f4:	1dbb      	adds	r3, r7, #6
     1f6:	781b      	ldrb	r3, [r3, #0]
     1f8:	2b00      	cmp	r3, #0
     1fa:	d003      	beq.n	204 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     1fc:	68fb      	ldr	r3, [r7, #12]
     1fe:	68ba      	ldr	r2, [r7, #8]
     200:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     202:	e002      	b.n	20a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     204:	68fb      	ldr	r3, [r7, #12]
     206:	68ba      	ldr	r2, [r7, #8]
     208:	615a      	str	r2, [r3, #20]
}
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	46bd      	mov	sp, r7
     20e:	b004      	add	sp, #16
     210:	bd80      	pop	{r7, pc}
     212:	46c0      	nop			; (mov r8, r8)
     214:	000001a1 	.word	0x000001a1

00000218 <led_on>:




void led_on(void)
{
     218:	b580      	push	{r7, lr}
     21a:	af00      	add	r7, sp, #0
	while(1)
	{
		
		 port_pin_set_output_level(LED_0_PIN, true);
     21c:	2101      	movs	r1, #1
     21e:	205b      	movs	r0, #91	; 0x5b
     220:	4b01      	ldr	r3, [pc, #4]	; (228 <led_on+0x10>)
     222:	4798      	blx	r3
     224:	e7fa      	b.n	21c <led_on+0x4>
     226:	46c0      	nop			; (mov r8, r8)
     228:	000001c5 	.word	0x000001c5

0000022c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     22c:	b580      	push	{r7, lr}
     22e:	b082      	sub	sp, #8
     230:	af00      	add	r7, sp, #0
     232:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     234:	687b      	ldr	r3, [r7, #4]
     236:	3308      	adds	r3, #8
     238:	001a      	movs	r2, r3
     23a:	687b      	ldr	r3, [r7, #4]
     23c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     23e:	687b      	ldr	r3, [r7, #4]
     240:	2201      	movs	r2, #1
     242:	4252      	negs	r2, r2
     244:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     246:	687b      	ldr	r3, [r7, #4]
     248:	3308      	adds	r3, #8
     24a:	001a      	movs	r2, r3
     24c:	687b      	ldr	r3, [r7, #4]
     24e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     250:	687b      	ldr	r3, [r7, #4]
     252:	3308      	adds	r3, #8
     254:	001a      	movs	r2, r3
     256:	687b      	ldr	r3, [r7, #4]
     258:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     25a:	687b      	ldr	r3, [r7, #4]
     25c:	2200      	movs	r2, #0
     25e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     260:	46c0      	nop			; (mov r8, r8)
     262:	46bd      	mov	sp, r7
     264:	b002      	add	sp, #8
     266:	bd80      	pop	{r7, pc}

00000268 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     268:	b580      	push	{r7, lr}
     26a:	b082      	sub	sp, #8
     26c:	af00      	add	r7, sp, #0
     26e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
     270:	687b      	ldr	r3, [r7, #4]
     272:	2200      	movs	r2, #0
     274:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     276:	46c0      	nop			; (mov r8, r8)
     278:	46bd      	mov	sp, r7
     27a:	b002      	add	sp, #8
     27c:	bd80      	pop	{r7, pc}

0000027e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     27e:	b580      	push	{r7, lr}
     280:	b084      	sub	sp, #16
     282:	af00      	add	r7, sp, #0
     284:	6078      	str	r0, [r7, #4]
     286:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
     288:	687b      	ldr	r3, [r7, #4]
     28a:	685b      	ldr	r3, [r3, #4]
     28c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     28e:	683b      	ldr	r3, [r7, #0]
     290:	68fa      	ldr	r2, [r7, #12]
     292:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     294:	68fb      	ldr	r3, [r7, #12]
     296:	689a      	ldr	r2, [r3, #8]
     298:	683b      	ldr	r3, [r7, #0]
     29a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     29c:	68fb      	ldr	r3, [r7, #12]
     29e:	689b      	ldr	r3, [r3, #8]
     2a0:	683a      	ldr	r2, [r7, #0]
     2a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
     2a4:	68fb      	ldr	r3, [r7, #12]
     2a6:	683a      	ldr	r2, [r7, #0]
     2a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
     2aa:	683b      	ldr	r3, [r7, #0]
     2ac:	687a      	ldr	r2, [r7, #4]
     2ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
     2b0:	687b      	ldr	r3, [r7, #4]
     2b2:	681b      	ldr	r3, [r3, #0]
     2b4:	1c5a      	adds	r2, r3, #1
     2b6:	687b      	ldr	r3, [r7, #4]
     2b8:	601a      	str	r2, [r3, #0]
}
     2ba:	46c0      	nop			; (mov r8, r8)
     2bc:	46bd      	mov	sp, r7
     2be:	b004      	add	sp, #16
     2c0:	bd80      	pop	{r7, pc}

000002c2 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     2c2:	b580      	push	{r7, lr}
     2c4:	b084      	sub	sp, #16
     2c6:	af00      	add	r7, sp, #0
     2c8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     2ca:	687b      	ldr	r3, [r7, #4]
     2cc:	691b      	ldr	r3, [r3, #16]
     2ce:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     2d0:	687b      	ldr	r3, [r7, #4]
     2d2:	685b      	ldr	r3, [r3, #4]
     2d4:	687a      	ldr	r2, [r7, #4]
     2d6:	6892      	ldr	r2, [r2, #8]
     2d8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     2da:	687b      	ldr	r3, [r7, #4]
     2dc:	689b      	ldr	r3, [r3, #8]
     2de:	687a      	ldr	r2, [r7, #4]
     2e0:	6852      	ldr	r2, [r2, #4]
     2e2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     2e4:	68fb      	ldr	r3, [r7, #12]
     2e6:	685a      	ldr	r2, [r3, #4]
     2e8:	687b      	ldr	r3, [r7, #4]
     2ea:	429a      	cmp	r2, r3
     2ec:	d103      	bne.n	2f6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     2ee:	687b      	ldr	r3, [r7, #4]
     2f0:	689a      	ldr	r2, [r3, #8]
     2f2:	68fb      	ldr	r3, [r7, #12]
     2f4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
     2f6:	687b      	ldr	r3, [r7, #4]
     2f8:	2200      	movs	r2, #0
     2fa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
     2fc:	68fb      	ldr	r3, [r7, #12]
     2fe:	681b      	ldr	r3, [r3, #0]
     300:	1e5a      	subs	r2, r3, #1
     302:	68fb      	ldr	r3, [r7, #12]
     304:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
     306:	68fb      	ldr	r3, [r7, #12]
     308:	681b      	ldr	r3, [r3, #0]
}
     30a:	0018      	movs	r0, r3
     30c:	46bd      	mov	sp, r7
     30e:	b004      	add	sp, #16
     310:	bd80      	pop	{r7, pc}
	...

00000314 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
     314:	b580      	push	{r7, lr}
     316:	b084      	sub	sp, #16
     318:	af00      	add	r7, sp, #0
     31a:	60f8      	str	r0, [r7, #12]
     31c:	60b9      	str	r1, [r7, #8]
     31e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
     320:	68fb      	ldr	r3, [r7, #12]
     322:	3b04      	subs	r3, #4
     324:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
     326:	68fb      	ldr	r3, [r7, #12]
     328:	2280      	movs	r2, #128	; 0x80
     32a:	0452      	lsls	r2, r2, #17
     32c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
     32e:	68fb      	ldr	r3, [r7, #12]
     330:	3b04      	subs	r3, #4
     332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
     334:	68ba      	ldr	r2, [r7, #8]
     336:	68fb      	ldr	r3, [r7, #12]
     338:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
     33a:	68fb      	ldr	r3, [r7, #12]
     33c:	3b04      	subs	r3, #4
     33e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
     340:	4a08      	ldr	r2, [pc, #32]	; (364 <pxPortInitialiseStack+0x50>)
     342:	68fb      	ldr	r3, [r7, #12]
     344:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
     346:	68fb      	ldr	r3, [r7, #12]
     348:	3b14      	subs	r3, #20
     34a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
     34c:	687a      	ldr	r2, [r7, #4]
     34e:	68fb      	ldr	r3, [r7, #12]
     350:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
     352:	68fb      	ldr	r3, [r7, #12]
     354:	3b20      	subs	r3, #32
     356:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
     358:	68fb      	ldr	r3, [r7, #12]
}
     35a:	0018      	movs	r0, r3
     35c:	46bd      	mov	sp, r7
     35e:	b004      	add	sp, #16
     360:	bd80      	pop	{r7, pc}
     362:	46c0      	nop			; (mov r8, r8)
     364:	00000369 	.word	0x00000369

00000368 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
     368:	b580      	push	{r7, lr}
     36a:	b082      	sub	sp, #8
     36c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
     36e:	2300      	movs	r3, #0
     370:	607b      	str	r3, [r7, #4]
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
     372:	b672      	cpsid	i
	while( ulDummy == 0 )
     374:	46c0      	nop			; (mov r8, r8)
     376:	687b      	ldr	r3, [r7, #4]
     378:	2b00      	cmp	r3, #0
     37a:	d0fc      	beq.n	376 <prvTaskExitError+0xe>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
     37c:	46c0      	nop			; (mov r8, r8)
     37e:	46bd      	mov	sp, r7
     380:	b002      	add	sp, #8
     382:	bd80      	pop	{r7, pc}
	...

00000390 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
     390:	4a0b      	ldr	r2, [pc, #44]	; (3c0 <pxCurrentTCBConst2>)
     392:	6813      	ldr	r3, [r2, #0]
     394:	6818      	ldr	r0, [r3, #0]
     396:	3020      	adds	r0, #32
     398:	f380 8809 	msr	PSP, r0
     39c:	2002      	movs	r0, #2
     39e:	f380 8814 	msr	CONTROL, r0
     3a2:	f3bf 8f6f 	isb	sy
     3a6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
     3a8:	46ae      	mov	lr, r5
     3aa:	bc08      	pop	{r3}
     3ac:	bc04      	pop	{r2}
     3ae:	b662      	cpsie	i
     3b0:	4718      	bx	r3
     3b2:	46c0      	nop			; (mov r8, r8)
     3b4:	46c0      	nop			; (mov r8, r8)
     3b6:	46c0      	nop			; (mov r8, r8)
     3b8:	46c0      	nop			; (mov r8, r8)
     3ba:	46c0      	nop			; (mov r8, r8)
     3bc:	46c0      	nop			; (mov r8, r8)
     3be:	46c0      	nop			; (mov r8, r8)

000003c0 <pxCurrentTCBConst2>:
     3c0:	200037a8 	.word	0x200037a8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
     3c4:	46c0      	nop			; (mov r8, r8)
     3c6:	46c0      	nop			; (mov r8, r8)

000003c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
     3c8:	b580      	push	{r7, lr}
     3ca:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
     3cc:	4b0e      	ldr	r3, [pc, #56]	; (408 <xPortStartScheduler+0x40>)
     3ce:	4a0e      	ldr	r2, [pc, #56]	; (408 <xPortStartScheduler+0x40>)
     3d0:	6812      	ldr	r2, [r2, #0]
     3d2:	21ff      	movs	r1, #255	; 0xff
     3d4:	0409      	lsls	r1, r1, #16
     3d6:	430a      	orrs	r2, r1
     3d8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
     3da:	4b0b      	ldr	r3, [pc, #44]	; (408 <xPortStartScheduler+0x40>)
     3dc:	4a0a      	ldr	r2, [pc, #40]	; (408 <xPortStartScheduler+0x40>)
     3de:	6812      	ldr	r2, [r2, #0]
     3e0:	21ff      	movs	r1, #255	; 0xff
     3e2:	0609      	lsls	r1, r1, #24
     3e4:	430a      	orrs	r2, r1
     3e6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
     3e8:	4b08      	ldr	r3, [pc, #32]	; (40c <xPortStartScheduler+0x44>)
     3ea:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
     3ec:	4b08      	ldr	r3, [pc, #32]	; (410 <xPortStartScheduler+0x48>)
     3ee:	2200      	movs	r2, #0
     3f0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
     3f2:	4b08      	ldr	r3, [pc, #32]	; (414 <xPortStartScheduler+0x4c>)
     3f4:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
     3f6:	4b08      	ldr	r3, [pc, #32]	; (418 <xPortStartScheduler+0x50>)
     3f8:	4798      	blx	r3
	prvTaskExitError();
     3fa:	4b08      	ldr	r3, [pc, #32]	; (41c <xPortStartScheduler+0x54>)
     3fc:	4798      	blx	r3

	/* Should not get here! */
	return 0;
     3fe:	2300      	movs	r3, #0
}
     400:	0018      	movs	r0, r3
     402:	46bd      	mov	sp, r7
     404:	bd80      	pop	{r7, pc}
     406:	46c0      	nop			; (mov r8, r8)
     408:	e000ed20 	.word	0xe000ed20
     40c:	00000489 	.word	0x00000489
     410:	20000000 	.word	0x20000000
     414:	00000391 	.word	0x00000391
     418:	00000ad5 	.word	0x00000ad5
     41c:	00000369 	.word	0x00000369

00000420 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
     420:	b580      	push	{r7, lr}
     422:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
     424:	4b05      	ldr	r3, [pc, #20]	; (43c <vPortYield+0x1c>)
     426:	2280      	movs	r2, #128	; 0x80
     428:	0552      	lsls	r2, r2, #21
     42a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
     42c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     430:	f3bf 8f6f 	isb	sy
}
     434:	46c0      	nop			; (mov r8, r8)
     436:	46bd      	mov	sp, r7
     438:	bd80      	pop	{r7, pc}
     43a:	46c0      	nop			; (mov r8, r8)
     43c:	e000ed04 	.word	0xe000ed04

00000440 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
     440:	b580      	push	{r7, lr}
     442:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
     444:	b672      	cpsid	i
    uxCriticalNesting++;
     446:	4b06      	ldr	r3, [pc, #24]	; (460 <vPortEnterCritical+0x20>)
     448:	681b      	ldr	r3, [r3, #0]
     44a:	1c5a      	adds	r2, r3, #1
     44c:	4b04      	ldr	r3, [pc, #16]	; (460 <vPortEnterCritical+0x20>)
     44e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
     450:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     454:	f3bf 8f6f 	isb	sy
}
     458:	46c0      	nop			; (mov r8, r8)
     45a:	46bd      	mov	sp, r7
     45c:	bd80      	pop	{r7, pc}
     45e:	46c0      	nop			; (mov r8, r8)
     460:	20000000 	.word	0x20000000

00000464 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
     464:	b580      	push	{r7, lr}
     466:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
     468:	4b06      	ldr	r3, [pc, #24]	; (484 <vPortExitCritical+0x20>)
     46a:	681b      	ldr	r3, [r3, #0]
     46c:	1e5a      	subs	r2, r3, #1
     46e:	4b05      	ldr	r3, [pc, #20]	; (484 <vPortExitCritical+0x20>)
     470:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
     472:	4b04      	ldr	r3, [pc, #16]	; (484 <vPortExitCritical+0x20>)
     474:	681b      	ldr	r3, [r3, #0]
     476:	2b00      	cmp	r3, #0
     478:	d100      	bne.n	47c <vPortExitCritical+0x18>
    {
        portENABLE_INTERRUPTS();
     47a:	b662      	cpsie	i
    }
}
     47c:	46c0      	nop			; (mov r8, r8)
     47e:	46bd      	mov	sp, r7
     480:	bd80      	pop	{r7, pc}
     482:	46c0      	nop			; (mov r8, r8)
     484:	20000000 	.word	0x20000000

00000488 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
     488:	b580      	push	{r7, lr}
     48a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
     48c:	4b07      	ldr	r3, [pc, #28]	; (4ac <prvSetupTimerInterrupt+0x24>)
     48e:	2200      	movs	r2, #0
     490:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
     492:	4b07      	ldr	r3, [pc, #28]	; (4b0 <prvSetupTimerInterrupt+0x28>)
     494:	2200      	movs	r2, #0
     496:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
     498:	4b06      	ldr	r3, [pc, #24]	; (4b4 <prvSetupTimerInterrupt+0x2c>)
     49a:	4a07      	ldr	r2, [pc, #28]	; (4b8 <prvSetupTimerInterrupt+0x30>)
     49c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
     49e:	4b03      	ldr	r3, [pc, #12]	; (4ac <prvSetupTimerInterrupt+0x24>)
     4a0:	2207      	movs	r2, #7
     4a2:	601a      	str	r2, [r3, #0]
}
     4a4:	46c0      	nop			; (mov r8, r8)
     4a6:	46bd      	mov	sp, r7
     4a8:	bd80      	pop	{r7, pc}
     4aa:	46c0      	nop			; (mov r8, r8)
     4ac:	e000e010 	.word	0xe000e010
     4b0:	e000e018 	.word	0xe000e018
     4b4:	e000e014 	.word	0xe000e014
     4b8:	0000bb32 	.word	0x0000bb32

000004bc <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     4bc:	b580      	push	{r7, lr}
     4be:	b084      	sub	sp, #16
     4c0:	af00      	add	r7, sp, #0
     4c2:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
     4c4:	2300      	movs	r3, #0
     4c6:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
     4c8:	687b      	ldr	r3, [r7, #4]
     4ca:	2207      	movs	r2, #7
     4cc:	4013      	ands	r3, r2
     4ce:	d004      	beq.n	4da <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
     4d0:	687b      	ldr	r3, [r7, #4]
     4d2:	2207      	movs	r2, #7
     4d4:	4393      	bics	r3, r2
     4d6:	3308      	adds	r3, #8
     4d8:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
     4da:	4b17      	ldr	r3, [pc, #92]	; (538 <pvPortMalloc+0x7c>)
     4dc:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
     4de:	4b17      	ldr	r3, [pc, #92]	; (53c <pvPortMalloc+0x80>)
     4e0:	681b      	ldr	r3, [r3, #0]
     4e2:	2b00      	cmp	r3, #0
     4e4:	d105      	bne.n	4f2 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     4e6:	4b16      	ldr	r3, [pc, #88]	; (540 <pvPortMalloc+0x84>)
     4e8:	2207      	movs	r2, #7
     4ea:	4393      	bics	r3, r2
     4ec:	001a      	movs	r2, r3
     4ee:	4b13      	ldr	r3, [pc, #76]	; (53c <pvPortMalloc+0x80>)
     4f0:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     4f2:	4b14      	ldr	r3, [pc, #80]	; (544 <pvPortMalloc+0x88>)
     4f4:	681a      	ldr	r2, [r3, #0]
     4f6:	687b      	ldr	r3, [r7, #4]
     4f8:	18d3      	adds	r3, r2, r3
     4fa:	4a13      	ldr	r2, [pc, #76]	; (548 <pvPortMalloc+0x8c>)
     4fc:	4293      	cmp	r3, r2
     4fe:	d813      	bhi.n	528 <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
     500:	4b10      	ldr	r3, [pc, #64]	; (544 <pvPortMalloc+0x88>)
     502:	681a      	ldr	r2, [r3, #0]
     504:	687b      	ldr	r3, [r7, #4]
     506:	18d2      	adds	r2, r2, r3
     508:	4b0e      	ldr	r3, [pc, #56]	; (544 <pvPortMalloc+0x88>)
     50a:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     50c:	429a      	cmp	r2, r3
     50e:	d90b      	bls.n	528 <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     510:	4b0a      	ldr	r3, [pc, #40]	; (53c <pvPortMalloc+0x80>)
     512:	681a      	ldr	r2, [r3, #0]
     514:	4b0b      	ldr	r3, [pc, #44]	; (544 <pvPortMalloc+0x88>)
     516:	681b      	ldr	r3, [r3, #0]
     518:	18d3      	adds	r3, r2, r3
     51a:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
     51c:	4b09      	ldr	r3, [pc, #36]	; (544 <pvPortMalloc+0x88>)
     51e:	681a      	ldr	r2, [r3, #0]
     520:	687b      	ldr	r3, [r7, #4]
     522:	18d2      	adds	r2, r2, r3
     524:	4b07      	ldr	r3, [pc, #28]	; (544 <pvPortMalloc+0x88>)
     526:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     528:	4b08      	ldr	r3, [pc, #32]	; (54c <pvPortMalloc+0x90>)
     52a:	4798      	blx	r3
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
     52c:	68fb      	ldr	r3, [r7, #12]
}
     52e:	0018      	movs	r0, r3
     530:	46bd      	mov	sp, r7
     532:	b004      	add	sp, #16
     534:	bd80      	pop	{r7, pc}
     536:	46c0      	nop			; (mov r8, r8)
     538:	00000839 	.word	0x00000839
     53c:	200037a4 	.word	0x200037a4
     540:	20000030 	.word	0x20000030
     544:	200037a0 	.word	0x200037a0
     548:	0000376f 	.word	0x0000376f
     54c:	00000851 	.word	0x00000851

00000550 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     550:	b580      	push	{r7, lr}
     552:	b082      	sub	sp, #8
     554:	af00      	add	r7, sp, #0
     556:	6078      	str	r0, [r7, #4]
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
     558:	46c0      	nop			; (mov r8, r8)
     55a:	46bd      	mov	sp, r7
     55c:	b002      	add	sp, #8
     55e:	bd80      	pop	{r7, pc}

00000560 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
     560:	b590      	push	{r4, r7, lr}
     562:	b08d      	sub	sp, #52	; 0x34
     564:	af04      	add	r7, sp, #16
     566:	60f8      	str	r0, [r7, #12]
     568:	60b9      	str	r1, [r7, #8]
     56a:	603b      	str	r3, [r7, #0]
     56c:	1dbb      	adds	r3, r7, #6
     56e:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
     570:	1dbb      	adds	r3, r7, #6
     572:	881b      	ldrh	r3, [r3, #0]
     574:	009b      	lsls	r3, r3, #2
     576:	0018      	movs	r0, r3
     578:	4b1d      	ldr	r3, [pc, #116]	; (5f0 <xTaskCreate+0x90>)
     57a:	4798      	blx	r3
     57c:	0003      	movs	r3, r0
     57e:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
     580:	697b      	ldr	r3, [r7, #20]
     582:	2b00      	cmp	r3, #0
     584:	d010      	beq.n	5a8 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
     586:	204c      	movs	r0, #76	; 0x4c
     588:	4b19      	ldr	r3, [pc, #100]	; (5f0 <xTaskCreate+0x90>)
     58a:	4798      	blx	r3
     58c:	0003      	movs	r3, r0
     58e:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
     590:	69fb      	ldr	r3, [r7, #28]
     592:	2b00      	cmp	r3, #0
     594:	d003      	beq.n	59e <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
     596:	69fb      	ldr	r3, [r7, #28]
     598:	697a      	ldr	r2, [r7, #20]
     59a:	631a      	str	r2, [r3, #48]	; 0x30
     59c:	e006      	b.n	5ac <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
     59e:	697b      	ldr	r3, [r7, #20]
     5a0:	0018      	movs	r0, r3
     5a2:	4b14      	ldr	r3, [pc, #80]	; (5f4 <xTaskCreate+0x94>)
     5a4:	4798      	blx	r3
     5a6:	e001      	b.n	5ac <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
     5a8:	2300      	movs	r3, #0
     5aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
     5ac:	69fb      	ldr	r3, [r7, #28]
     5ae:	2b00      	cmp	r3, #0
     5b0:	d016      	beq.n	5e0 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
     5b2:	1dbb      	adds	r3, r7, #6
     5b4:	881a      	ldrh	r2, [r3, #0]
     5b6:	683c      	ldr	r4, [r7, #0]
     5b8:	68b9      	ldr	r1, [r7, #8]
     5ba:	68f8      	ldr	r0, [r7, #12]
     5bc:	2300      	movs	r3, #0
     5be:	9303      	str	r3, [sp, #12]
     5c0:	69fb      	ldr	r3, [r7, #28]
     5c2:	9302      	str	r3, [sp, #8]
     5c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     5c6:	9301      	str	r3, [sp, #4]
     5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     5ca:	9300      	str	r3, [sp, #0]
     5cc:	0023      	movs	r3, r4
     5ce:	4c0a      	ldr	r4, [pc, #40]	; (5f8 <xTaskCreate+0x98>)
     5d0:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
     5d2:	69fb      	ldr	r3, [r7, #28]
     5d4:	0018      	movs	r0, r3
     5d6:	4b09      	ldr	r3, [pc, #36]	; (5fc <xTaskCreate+0x9c>)
     5d8:	4798      	blx	r3
			xReturn = pdPASS;
     5da:	2301      	movs	r3, #1
     5dc:	61bb      	str	r3, [r7, #24]
     5de:	e002      	b.n	5e6 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     5e0:	2301      	movs	r3, #1
     5e2:	425b      	negs	r3, r3
     5e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
     5e6:	69bb      	ldr	r3, [r7, #24]
	}
     5e8:	0018      	movs	r0, r3
     5ea:	46bd      	mov	sp, r7
     5ec:	b009      	add	sp, #36	; 0x24
     5ee:	bd90      	pop	{r4, r7, pc}
     5f0:	000004bd 	.word	0x000004bd
     5f4:	00000551 	.word	0x00000551
     5f8:	00000601 	.word	0x00000601
     5fc:	000006f5 	.word	0x000006f5

00000600 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
     600:	b580      	push	{r7, lr}
     602:	b086      	sub	sp, #24
     604:	af00      	add	r7, sp, #0
     606:	60f8      	str	r0, [r7, #12]
     608:	60b9      	str	r1, [r7, #8]
     60a:	607a      	str	r2, [r7, #4]
     60c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
     60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
     610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
     612:	687b      	ldr	r3, [r7, #4]
     614:	4934      	ldr	r1, [pc, #208]	; (6e8 <prvInitialiseNewTask+0xe8>)
     616:	468c      	mov	ip, r1
     618:	4463      	add	r3, ip
     61a:	009b      	lsls	r3, r3, #2
     61c:	18d3      	adds	r3, r2, r3
     61e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
     620:	693b      	ldr	r3, [r7, #16]
     622:	2207      	movs	r2, #7
     624:	4393      	bics	r3, r2
     626:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
     628:	68bb      	ldr	r3, [r7, #8]
     62a:	2b00      	cmp	r3, #0
     62c:	d020      	beq.n	670 <prvInitialiseNewTask+0x70>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
     62e:	2300      	movs	r3, #0
     630:	617b      	str	r3, [r7, #20]
     632:	e013      	b.n	65c <prvInitialiseNewTask+0x5c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
     634:	68ba      	ldr	r2, [r7, #8]
     636:	697b      	ldr	r3, [r7, #20]
     638:	18d3      	adds	r3, r2, r3
     63a:	7818      	ldrb	r0, [r3, #0]
     63c:	6aba      	ldr	r2, [r7, #40]	; 0x28
     63e:	2134      	movs	r1, #52	; 0x34
     640:	697b      	ldr	r3, [r7, #20]
     642:	18d3      	adds	r3, r2, r3
     644:	185b      	adds	r3, r3, r1
     646:	1c02      	adds	r2, r0, #0
     648:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
     64a:	68ba      	ldr	r2, [r7, #8]
     64c:	697b      	ldr	r3, [r7, #20]
     64e:	18d3      	adds	r3, r2, r3
     650:	781b      	ldrb	r3, [r3, #0]
     652:	2b00      	cmp	r3, #0
     654:	d006      	beq.n	664 <prvInitialiseNewTask+0x64>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
     656:	697b      	ldr	r3, [r7, #20]
     658:	3301      	adds	r3, #1
     65a:	617b      	str	r3, [r7, #20]
     65c:	697b      	ldr	r3, [r7, #20]
     65e:	2b0f      	cmp	r3, #15
     660:	d9e8      	bls.n	634 <prvInitialiseNewTask+0x34>
     662:	e000      	b.n	666 <prvInitialiseNewTask+0x66>
			{
				break;
     664:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
     666:	6abb      	ldr	r3, [r7, #40]	; 0x28
     668:	2243      	movs	r2, #67	; 0x43
     66a:	2100      	movs	r1, #0
     66c:	5499      	strb	r1, [r3, r2]
     66e:	e003      	b.n	678 <prvInitialiseNewTask+0x78>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
     670:	6abb      	ldr	r3, [r7, #40]	; 0x28
     672:	2234      	movs	r2, #52	; 0x34
     674:	2100      	movs	r1, #0
     676:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
     678:	6a3b      	ldr	r3, [r7, #32]
     67a:	2b04      	cmp	r3, #4
     67c:	d901      	bls.n	682 <prvInitialiseNewTask+0x82>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
     67e:	2304      	movs	r3, #4
     680:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
     682:	6abb      	ldr	r3, [r7, #40]	; 0x28
     684:	6a3a      	ldr	r2, [r7, #32]
     686:	62da      	str	r2, [r3, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
     688:	6abb      	ldr	r3, [r7, #40]	; 0x28
     68a:	3304      	adds	r3, #4
     68c:	0018      	movs	r0, r3
     68e:	4b17      	ldr	r3, [pc, #92]	; (6ec <prvInitialiseNewTask+0xec>)
     690:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
     692:	6abb      	ldr	r3, [r7, #40]	; 0x28
     694:	3318      	adds	r3, #24
     696:	0018      	movs	r0, r3
     698:	4b14      	ldr	r3, [pc, #80]	; (6ec <prvInitialiseNewTask+0xec>)
     69a:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
     69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
     69e:	6aba      	ldr	r2, [r7, #40]	; 0x28
     6a0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     6a2:	6a3b      	ldr	r3, [r7, #32]
     6a4:	2205      	movs	r2, #5
     6a6:	1ad2      	subs	r2, r2, r3
     6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
     6aa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
     6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
     6ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
     6b0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
     6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
     6b4:	2200      	movs	r2, #0
     6b6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
     6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
     6ba:	2248      	movs	r2, #72	; 0x48
     6bc:	2100      	movs	r1, #0
     6be:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
     6c0:	683a      	ldr	r2, [r7, #0]
     6c2:	68f9      	ldr	r1, [r7, #12]
     6c4:	693b      	ldr	r3, [r7, #16]
     6c6:	0018      	movs	r0, r3
     6c8:	4b09      	ldr	r3, [pc, #36]	; (6f0 <prvInitialiseNewTask+0xf0>)
     6ca:	4798      	blx	r3
     6cc:	0002      	movs	r2, r0
     6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
     6d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
     6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     6d4:	2b00      	cmp	r3, #0
     6d6:	d002      	beq.n	6de <prvInitialiseNewTask+0xde>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
     6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     6da:	6aba      	ldr	r2, [r7, #40]	; 0x28
     6dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
     6de:	46c0      	nop			; (mov r8, r8)
     6e0:	46bd      	mov	sp, r7
     6e2:	b006      	add	sp, #24
     6e4:	bd80      	pop	{r7, pc}
     6e6:	46c0      	nop			; (mov r8, r8)
     6e8:	3fffffff 	.word	0x3fffffff
     6ec:	00000269 	.word	0x00000269
     6f0:	00000315 	.word	0x00000315

000006f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
     6f4:	b580      	push	{r7, lr}
     6f6:	b082      	sub	sp, #8
     6f8:	af00      	add	r7, sp, #0
     6fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
     6fc:	4b29      	ldr	r3, [pc, #164]	; (7a4 <prvAddNewTaskToReadyList+0xb0>)
     6fe:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
     700:	4b29      	ldr	r3, [pc, #164]	; (7a8 <prvAddNewTaskToReadyList+0xb4>)
     702:	681b      	ldr	r3, [r3, #0]
     704:	1c5a      	adds	r2, r3, #1
     706:	4b28      	ldr	r3, [pc, #160]	; (7a8 <prvAddNewTaskToReadyList+0xb4>)
     708:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
     70a:	4b28      	ldr	r3, [pc, #160]	; (7ac <prvAddNewTaskToReadyList+0xb8>)
     70c:	681b      	ldr	r3, [r3, #0]
     70e:	2b00      	cmp	r3, #0
     710:	d109      	bne.n	726 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
     712:	4b26      	ldr	r3, [pc, #152]	; (7ac <prvAddNewTaskToReadyList+0xb8>)
     714:	687a      	ldr	r2, [r7, #4]
     716:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
     718:	4b23      	ldr	r3, [pc, #140]	; (7a8 <prvAddNewTaskToReadyList+0xb4>)
     71a:	681b      	ldr	r3, [r3, #0]
     71c:	2b01      	cmp	r3, #1
     71e:	d110      	bne.n	742 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
     720:	4b23      	ldr	r3, [pc, #140]	; (7b0 <prvAddNewTaskToReadyList+0xbc>)
     722:	4798      	blx	r3
     724:	e00d      	b.n	742 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
     726:	4b23      	ldr	r3, [pc, #140]	; (7b4 <prvAddNewTaskToReadyList+0xc0>)
     728:	681b      	ldr	r3, [r3, #0]
     72a:	2b00      	cmp	r3, #0
     72c:	d109      	bne.n	742 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
     72e:	4b1f      	ldr	r3, [pc, #124]	; (7ac <prvAddNewTaskToReadyList+0xb8>)
     730:	681b      	ldr	r3, [r3, #0]
     732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     734:	687b      	ldr	r3, [r7, #4]
     736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     738:	429a      	cmp	r2, r3
     73a:	d802      	bhi.n	742 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
     73c:	4b1b      	ldr	r3, [pc, #108]	; (7ac <prvAddNewTaskToReadyList+0xb8>)
     73e:	687a      	ldr	r2, [r7, #4]
     740:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
     742:	4b1d      	ldr	r3, [pc, #116]	; (7b8 <prvAddNewTaskToReadyList+0xc4>)
     744:	681b      	ldr	r3, [r3, #0]
     746:	1c5a      	adds	r2, r3, #1
     748:	4b1b      	ldr	r3, [pc, #108]	; (7b8 <prvAddNewTaskToReadyList+0xc4>)
     74a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
     74c:	687b      	ldr	r3, [r7, #4]
     74e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     750:	4b1a      	ldr	r3, [pc, #104]	; (7bc <prvAddNewTaskToReadyList+0xc8>)
     752:	681b      	ldr	r3, [r3, #0]
     754:	429a      	cmp	r2, r3
     756:	d903      	bls.n	760 <prvAddNewTaskToReadyList+0x6c>
     758:	687b      	ldr	r3, [r7, #4]
     75a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     75c:	4b17      	ldr	r3, [pc, #92]	; (7bc <prvAddNewTaskToReadyList+0xc8>)
     75e:	601a      	str	r2, [r3, #0]
     760:	687b      	ldr	r3, [r7, #4]
     762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     764:	0013      	movs	r3, r2
     766:	009b      	lsls	r3, r3, #2
     768:	189b      	adds	r3, r3, r2
     76a:	009b      	lsls	r3, r3, #2
     76c:	4a14      	ldr	r2, [pc, #80]	; (7c0 <prvAddNewTaskToReadyList+0xcc>)
     76e:	189a      	adds	r2, r3, r2
     770:	687b      	ldr	r3, [r7, #4]
     772:	3304      	adds	r3, #4
     774:	0019      	movs	r1, r3
     776:	0010      	movs	r0, r2
     778:	4b12      	ldr	r3, [pc, #72]	; (7c4 <prvAddNewTaskToReadyList+0xd0>)
     77a:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
     77c:	4b12      	ldr	r3, [pc, #72]	; (7c8 <prvAddNewTaskToReadyList+0xd4>)
     77e:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
     780:	4b0c      	ldr	r3, [pc, #48]	; (7b4 <prvAddNewTaskToReadyList+0xc0>)
     782:	681b      	ldr	r3, [r3, #0]
     784:	2b00      	cmp	r3, #0
     786:	d008      	beq.n	79a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
     788:	4b08      	ldr	r3, [pc, #32]	; (7ac <prvAddNewTaskToReadyList+0xb8>)
     78a:	681b      	ldr	r3, [r3, #0]
     78c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     78e:	687b      	ldr	r3, [r7, #4]
     790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     792:	429a      	cmp	r2, r3
     794:	d201      	bcs.n	79a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
     796:	4b0d      	ldr	r3, [pc, #52]	; (7cc <prvAddNewTaskToReadyList+0xd8>)
     798:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
     79a:	46c0      	nop			; (mov r8, r8)
     79c:	46bd      	mov	sp, r7
     79e:	b002      	add	sp, #8
     7a0:	bd80      	pop	{r7, pc}
     7a2:	46c0      	nop			; (mov r8, r8)
     7a4:	00000441 	.word	0x00000441
     7a8:	20003868 	.word	0x20003868
     7ac:	200037a8 	.word	0x200037a8
     7b0:	00000b95 	.word	0x00000b95
     7b4:	20003874 	.word	0x20003874
     7b8:	20003884 	.word	0x20003884
     7bc:	20003870 	.word	0x20003870
     7c0:	200037ac 	.word	0x200037ac
     7c4:	0000027f 	.word	0x0000027f
     7c8:	00000465 	.word	0x00000465
     7cc:	00000421 	.word	0x00000421

000007d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
     7d0:	b590      	push	{r4, r7, lr}
     7d2:	b085      	sub	sp, #20
     7d4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
     7d6:	4910      	ldr	r1, [pc, #64]	; (818 <vTaskStartScheduler+0x48>)
     7d8:	4810      	ldr	r0, [pc, #64]	; (81c <vTaskStartScheduler+0x4c>)
     7da:	4b11      	ldr	r3, [pc, #68]	; (820 <vTaskStartScheduler+0x50>)
     7dc:	9301      	str	r3, [sp, #4]
     7de:	2300      	movs	r3, #0
     7e0:	9300      	str	r3, [sp, #0]
     7e2:	2300      	movs	r3, #0
     7e4:	2264      	movs	r2, #100	; 0x64
     7e6:	4c0f      	ldr	r4, [pc, #60]	; (824 <vTaskStartScheduler+0x54>)
     7e8:	47a0      	blx	r4
     7ea:	0003      	movs	r3, r0
     7ec:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
     7ee:	687b      	ldr	r3, [r7, #4]
     7f0:	2b01      	cmp	r3, #1
     7f2:	d10c      	bne.n	80e <vTaskStartScheduler+0x3e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
     7f4:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
     7f6:	4b0c      	ldr	r3, [pc, #48]	; (828 <vTaskStartScheduler+0x58>)
     7f8:	2201      	movs	r2, #1
     7fa:	4252      	negs	r2, r2
     7fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
     7fe:	4b0b      	ldr	r3, [pc, #44]	; (82c <vTaskStartScheduler+0x5c>)
     800:	2201      	movs	r2, #1
     802:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
     804:	4b0a      	ldr	r3, [pc, #40]	; (830 <vTaskStartScheduler+0x60>)
     806:	2200      	movs	r2, #0
     808:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
     80a:	4b0a      	ldr	r3, [pc, #40]	; (834 <vTaskStartScheduler+0x64>)
     80c:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
     80e:	46c0      	nop			; (mov r8, r8)
     810:	46bd      	mov	sp, r7
     812:	b003      	add	sp, #12
     814:	bd90      	pop	{r4, r7, pc}
     816:	46c0      	nop			; (mov r8, r8)
     818:	00002800 	.word	0x00002800
     81c:	00000b6d 	.word	0x00000b6d
     820:	2000388c 	.word	0x2000388c
     824:	00000561 	.word	0x00000561
     828:	20003888 	.word	0x20003888
     82c:	20003874 	.word	0x20003874
     830:	2000386c 	.word	0x2000386c
     834:	000003c9 	.word	0x000003c9

00000838 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
     838:	b580      	push	{r7, lr}
     83a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
     83c:	4b03      	ldr	r3, [pc, #12]	; (84c <vTaskSuspendAll+0x14>)
     83e:	681b      	ldr	r3, [r3, #0]
     840:	1c5a      	adds	r2, r3, #1
     842:	4b02      	ldr	r3, [pc, #8]	; (84c <vTaskSuspendAll+0x14>)
     844:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
     846:	46c0      	nop			; (mov r8, r8)
     848:	46bd      	mov	sp, r7
     84a:	bd80      	pop	{r7, pc}
     84c:	20003890 	.word	0x20003890

00000850 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
     850:	b580      	push	{r7, lr}
     852:	b084      	sub	sp, #16
     854:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
     856:	2300      	movs	r3, #0
     858:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
     85a:	2300      	movs	r3, #0
     85c:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
     85e:	4b37      	ldr	r3, [pc, #220]	; (93c <xTaskResumeAll+0xec>)
     860:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
     862:	4b37      	ldr	r3, [pc, #220]	; (940 <xTaskResumeAll+0xf0>)
     864:	681b      	ldr	r3, [r3, #0]
     866:	1e5a      	subs	r2, r3, #1
     868:	4b35      	ldr	r3, [pc, #212]	; (940 <xTaskResumeAll+0xf0>)
     86a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     86c:	4b34      	ldr	r3, [pc, #208]	; (940 <xTaskResumeAll+0xf0>)
     86e:	681b      	ldr	r3, [r3, #0]
     870:	2b00      	cmp	r3, #0
     872:	d15b      	bne.n	92c <xTaskResumeAll+0xdc>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
     874:	4b33      	ldr	r3, [pc, #204]	; (944 <xTaskResumeAll+0xf4>)
     876:	681b      	ldr	r3, [r3, #0]
     878:	2b00      	cmp	r3, #0
     87a:	d057      	beq.n	92c <xTaskResumeAll+0xdc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
     87c:	e02f      	b.n	8de <xTaskResumeAll+0x8e>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     87e:	4b32      	ldr	r3, [pc, #200]	; (948 <xTaskResumeAll+0xf8>)
     880:	68db      	ldr	r3, [r3, #12]
     882:	68db      	ldr	r3, [r3, #12]
     884:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
     886:	68fb      	ldr	r3, [r7, #12]
     888:	3318      	adds	r3, #24
     88a:	0018      	movs	r0, r3
     88c:	4b2f      	ldr	r3, [pc, #188]	; (94c <xTaskResumeAll+0xfc>)
     88e:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     890:	68fb      	ldr	r3, [r7, #12]
     892:	3304      	adds	r3, #4
     894:	0018      	movs	r0, r3
     896:	4b2d      	ldr	r3, [pc, #180]	; (94c <xTaskResumeAll+0xfc>)
     898:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
     89a:	68fb      	ldr	r3, [r7, #12]
     89c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     89e:	4b2c      	ldr	r3, [pc, #176]	; (950 <xTaskResumeAll+0x100>)
     8a0:	681b      	ldr	r3, [r3, #0]
     8a2:	429a      	cmp	r2, r3
     8a4:	d903      	bls.n	8ae <xTaskResumeAll+0x5e>
     8a6:	68fb      	ldr	r3, [r7, #12]
     8a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     8aa:	4b29      	ldr	r3, [pc, #164]	; (950 <xTaskResumeAll+0x100>)
     8ac:	601a      	str	r2, [r3, #0]
     8ae:	68fb      	ldr	r3, [r7, #12]
     8b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     8b2:	0013      	movs	r3, r2
     8b4:	009b      	lsls	r3, r3, #2
     8b6:	189b      	adds	r3, r3, r2
     8b8:	009b      	lsls	r3, r3, #2
     8ba:	4a26      	ldr	r2, [pc, #152]	; (954 <xTaskResumeAll+0x104>)
     8bc:	189a      	adds	r2, r3, r2
     8be:	68fb      	ldr	r3, [r7, #12]
     8c0:	3304      	adds	r3, #4
     8c2:	0019      	movs	r1, r3
     8c4:	0010      	movs	r0, r2
     8c6:	4b24      	ldr	r3, [pc, #144]	; (958 <xTaskResumeAll+0x108>)
     8c8:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     8ca:	68fb      	ldr	r3, [r7, #12]
     8cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     8ce:	4b23      	ldr	r3, [pc, #140]	; (95c <xTaskResumeAll+0x10c>)
     8d0:	681b      	ldr	r3, [r3, #0]
     8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     8d4:	429a      	cmp	r2, r3
     8d6:	d302      	bcc.n	8de <xTaskResumeAll+0x8e>
					{
						xYieldPending = pdTRUE;
     8d8:	4b21      	ldr	r3, [pc, #132]	; (960 <xTaskResumeAll+0x110>)
     8da:	2201      	movs	r2, #1
     8dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
     8de:	4b1a      	ldr	r3, [pc, #104]	; (948 <xTaskResumeAll+0xf8>)
     8e0:	681b      	ldr	r3, [r3, #0]
     8e2:	2b00      	cmp	r3, #0
     8e4:	d1cb      	bne.n	87e <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
     8e6:	68fb      	ldr	r3, [r7, #12]
     8e8:	2b00      	cmp	r3, #0
     8ea:	d001      	beq.n	8f0 <xTaskResumeAll+0xa0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
     8ec:	4b1d      	ldr	r3, [pc, #116]	; (964 <xTaskResumeAll+0x114>)
     8ee:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
     8f0:	4b1d      	ldr	r3, [pc, #116]	; (968 <xTaskResumeAll+0x118>)
     8f2:	681b      	ldr	r3, [r3, #0]
     8f4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
     8f6:	687b      	ldr	r3, [r7, #4]
     8f8:	2b00      	cmp	r3, #0
     8fa:	d00f      	beq.n	91c <xTaskResumeAll+0xcc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
     8fc:	4b1b      	ldr	r3, [pc, #108]	; (96c <xTaskResumeAll+0x11c>)
     8fe:	4798      	blx	r3
     900:	1e03      	subs	r3, r0, #0
     902:	d002      	beq.n	90a <xTaskResumeAll+0xba>
							{
								xYieldPending = pdTRUE;
     904:	4b16      	ldr	r3, [pc, #88]	; (960 <xTaskResumeAll+0x110>)
     906:	2201      	movs	r2, #1
     908:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
     90a:	687b      	ldr	r3, [r7, #4]
     90c:	3b01      	subs	r3, #1
     90e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
     910:	687b      	ldr	r3, [r7, #4]
     912:	2b00      	cmp	r3, #0
     914:	d1f2      	bne.n	8fc <xTaskResumeAll+0xac>

						uxPendedTicks = 0;
     916:	4b14      	ldr	r3, [pc, #80]	; (968 <xTaskResumeAll+0x118>)
     918:	2200      	movs	r2, #0
     91a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
     91c:	4b10      	ldr	r3, [pc, #64]	; (960 <xTaskResumeAll+0x110>)
     91e:	681b      	ldr	r3, [r3, #0]
     920:	2b00      	cmp	r3, #0
     922:	d003      	beq.n	92c <xTaskResumeAll+0xdc>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
     924:	2301      	movs	r3, #1
     926:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
     928:	4b11      	ldr	r3, [pc, #68]	; (970 <xTaskResumeAll+0x120>)
     92a:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
     92c:	4b11      	ldr	r3, [pc, #68]	; (974 <xTaskResumeAll+0x124>)
     92e:	4798      	blx	r3

	return xAlreadyYielded;
     930:	68bb      	ldr	r3, [r7, #8]
}
     932:	0018      	movs	r0, r3
     934:	46bd      	mov	sp, r7
     936:	b004      	add	sp, #16
     938:	bd80      	pop	{r7, pc}
     93a:	46c0      	nop			; (mov r8, r8)
     93c:	00000441 	.word	0x00000441
     940:	20003890 	.word	0x20003890
     944:	20003868 	.word	0x20003868
     948:	20003840 	.word	0x20003840
     94c:	000002c3 	.word	0x000002c3
     950:	20003870 	.word	0x20003870
     954:	200037ac 	.word	0x200037ac
     958:	0000027f 	.word	0x0000027f
     95c:	200037a8 	.word	0x200037a8
     960:	2000387c 	.word	0x2000387c
     964:	00000c21 	.word	0x00000c21
     968:	20003878 	.word	0x20003878
     96c:	00000979 	.word	0x00000979
     970:	00000421 	.word	0x00000421
     974:	00000465 	.word	0x00000465

00000978 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
     978:	b580      	push	{r7, lr}
     97a:	b086      	sub	sp, #24
     97c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
     97e:	2300      	movs	r3, #0
     980:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     982:	4b46      	ldr	r3, [pc, #280]	; (a9c <xTaskIncrementTick+0x124>)
     984:	681b      	ldr	r3, [r3, #0]
     986:	2b00      	cmp	r3, #0
     988:	d000      	beq.n	98c <xTaskIncrementTick+0x14>
     98a:	e077      	b.n	a7c <xTaskIncrementTick+0x104>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
     98c:	4b44      	ldr	r3, [pc, #272]	; (aa0 <xTaskIncrementTick+0x128>)
     98e:	681b      	ldr	r3, [r3, #0]
     990:	3301      	adds	r3, #1
     992:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
     994:	4b42      	ldr	r3, [pc, #264]	; (aa0 <xTaskIncrementTick+0x128>)
     996:	693a      	ldr	r2, [r7, #16]
     998:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
     99a:	693b      	ldr	r3, [r7, #16]
     99c:	2b00      	cmp	r3, #0
     99e:	d110      	bne.n	9c2 <xTaskIncrementTick+0x4a>
		{
			taskSWITCH_DELAYED_LISTS();
     9a0:	4b40      	ldr	r3, [pc, #256]	; (aa4 <xTaskIncrementTick+0x12c>)
     9a2:	681b      	ldr	r3, [r3, #0]
     9a4:	60fb      	str	r3, [r7, #12]
     9a6:	4b40      	ldr	r3, [pc, #256]	; (aa8 <xTaskIncrementTick+0x130>)
     9a8:	681a      	ldr	r2, [r3, #0]
     9aa:	4b3e      	ldr	r3, [pc, #248]	; (aa4 <xTaskIncrementTick+0x12c>)
     9ac:	601a      	str	r2, [r3, #0]
     9ae:	4b3e      	ldr	r3, [pc, #248]	; (aa8 <xTaskIncrementTick+0x130>)
     9b0:	68fa      	ldr	r2, [r7, #12]
     9b2:	601a      	str	r2, [r3, #0]
     9b4:	4b3d      	ldr	r3, [pc, #244]	; (aac <xTaskIncrementTick+0x134>)
     9b6:	681b      	ldr	r3, [r3, #0]
     9b8:	1c5a      	adds	r2, r3, #1
     9ba:	4b3c      	ldr	r3, [pc, #240]	; (aac <xTaskIncrementTick+0x134>)
     9bc:	601a      	str	r2, [r3, #0]
     9be:	4b3c      	ldr	r3, [pc, #240]	; (ab0 <xTaskIncrementTick+0x138>)
     9c0:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
     9c2:	4b3c      	ldr	r3, [pc, #240]	; (ab4 <xTaskIncrementTick+0x13c>)
     9c4:	681b      	ldr	r3, [r3, #0]
     9c6:	693a      	ldr	r2, [r7, #16]
     9c8:	429a      	cmp	r2, r3
     9ca:	d349      	bcc.n	a60 <xTaskIncrementTick+0xe8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     9cc:	4b35      	ldr	r3, [pc, #212]	; (aa4 <xTaskIncrementTick+0x12c>)
     9ce:	681b      	ldr	r3, [r3, #0]
     9d0:	681b      	ldr	r3, [r3, #0]
     9d2:	2b00      	cmp	r3, #0
     9d4:	d104      	bne.n	9e0 <xTaskIncrementTick+0x68>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     9d6:	4b37      	ldr	r3, [pc, #220]	; (ab4 <xTaskIncrementTick+0x13c>)
     9d8:	2201      	movs	r2, #1
     9da:	4252      	negs	r2, r2
     9dc:	601a      	str	r2, [r3, #0]
					break;
     9de:	e03f      	b.n	a60 <xTaskIncrementTick+0xe8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     9e0:	4b30      	ldr	r3, [pc, #192]	; (aa4 <xTaskIncrementTick+0x12c>)
     9e2:	681b      	ldr	r3, [r3, #0]
     9e4:	68db      	ldr	r3, [r3, #12]
     9e6:	68db      	ldr	r3, [r3, #12]
     9e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
     9ea:	68bb      	ldr	r3, [r7, #8]
     9ec:	685b      	ldr	r3, [r3, #4]
     9ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
     9f0:	693a      	ldr	r2, [r7, #16]
     9f2:	687b      	ldr	r3, [r7, #4]
     9f4:	429a      	cmp	r2, r3
     9f6:	d203      	bcs.n	a00 <xTaskIncrementTick+0x88>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
     9f8:	4b2e      	ldr	r3, [pc, #184]	; (ab4 <xTaskIncrementTick+0x13c>)
     9fa:	687a      	ldr	r2, [r7, #4]
     9fc:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
     9fe:	e02f      	b.n	a60 <xTaskIncrementTick+0xe8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     a00:	68bb      	ldr	r3, [r7, #8]
     a02:	3304      	adds	r3, #4
     a04:	0018      	movs	r0, r3
     a06:	4b2c      	ldr	r3, [pc, #176]	; (ab8 <xTaskIncrementTick+0x140>)
     a08:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
     a0a:	68bb      	ldr	r3, [r7, #8]
     a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     a0e:	2b00      	cmp	r3, #0
     a10:	d004      	beq.n	a1c <xTaskIncrementTick+0xa4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
     a12:	68bb      	ldr	r3, [r7, #8]
     a14:	3318      	adds	r3, #24
     a16:	0018      	movs	r0, r3
     a18:	4b27      	ldr	r3, [pc, #156]	; (ab8 <xTaskIncrementTick+0x140>)
     a1a:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
     a1c:	68bb      	ldr	r3, [r7, #8]
     a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     a20:	4b26      	ldr	r3, [pc, #152]	; (abc <xTaskIncrementTick+0x144>)
     a22:	681b      	ldr	r3, [r3, #0]
     a24:	429a      	cmp	r2, r3
     a26:	d903      	bls.n	a30 <xTaskIncrementTick+0xb8>
     a28:	68bb      	ldr	r3, [r7, #8]
     a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     a2c:	4b23      	ldr	r3, [pc, #140]	; (abc <xTaskIncrementTick+0x144>)
     a2e:	601a      	str	r2, [r3, #0]
     a30:	68bb      	ldr	r3, [r7, #8]
     a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     a34:	0013      	movs	r3, r2
     a36:	009b      	lsls	r3, r3, #2
     a38:	189b      	adds	r3, r3, r2
     a3a:	009b      	lsls	r3, r3, #2
     a3c:	4a20      	ldr	r2, [pc, #128]	; (ac0 <xTaskIncrementTick+0x148>)
     a3e:	189a      	adds	r2, r3, r2
     a40:	68bb      	ldr	r3, [r7, #8]
     a42:	3304      	adds	r3, #4
     a44:	0019      	movs	r1, r3
     a46:	0010      	movs	r0, r2
     a48:	4b1e      	ldr	r3, [pc, #120]	; (ac4 <xTaskIncrementTick+0x14c>)
     a4a:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     a4c:	68bb      	ldr	r3, [r7, #8]
     a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     a50:	4b1d      	ldr	r3, [pc, #116]	; (ac8 <xTaskIncrementTick+0x150>)
     a52:	681b      	ldr	r3, [r3, #0]
     a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     a56:	429a      	cmp	r2, r3
     a58:	d3b8      	bcc.n	9cc <xTaskIncrementTick+0x54>
						{
							xSwitchRequired = pdTRUE;
     a5a:	2301      	movs	r3, #1
     a5c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     a5e:	e7b5      	b.n	9cc <xTaskIncrementTick+0x54>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
     a60:	4b19      	ldr	r3, [pc, #100]	; (ac8 <xTaskIncrementTick+0x150>)
     a62:	681b      	ldr	r3, [r3, #0]
     a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     a66:	4916      	ldr	r1, [pc, #88]	; (ac0 <xTaskIncrementTick+0x148>)
     a68:	0013      	movs	r3, r2
     a6a:	009b      	lsls	r3, r3, #2
     a6c:	189b      	adds	r3, r3, r2
     a6e:	009b      	lsls	r3, r3, #2
     a70:	585b      	ldr	r3, [r3, r1]
     a72:	2b01      	cmp	r3, #1
     a74:	d907      	bls.n	a86 <xTaskIncrementTick+0x10e>
			{
				xSwitchRequired = pdTRUE;
     a76:	2301      	movs	r3, #1
     a78:	617b      	str	r3, [r7, #20]
     a7a:	e004      	b.n	a86 <xTaskIncrementTick+0x10e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
     a7c:	4b13      	ldr	r3, [pc, #76]	; (acc <xTaskIncrementTick+0x154>)
     a7e:	681b      	ldr	r3, [r3, #0]
     a80:	1c5a      	adds	r2, r3, #1
     a82:	4b12      	ldr	r3, [pc, #72]	; (acc <xTaskIncrementTick+0x154>)
     a84:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
     a86:	4b12      	ldr	r3, [pc, #72]	; (ad0 <xTaskIncrementTick+0x158>)
     a88:	681b      	ldr	r3, [r3, #0]
     a8a:	2b00      	cmp	r3, #0
     a8c:	d001      	beq.n	a92 <xTaskIncrementTick+0x11a>
		{
			xSwitchRequired = pdTRUE;
     a8e:	2301      	movs	r3, #1
     a90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
     a92:	697b      	ldr	r3, [r7, #20]
}
     a94:	0018      	movs	r0, r3
     a96:	46bd      	mov	sp, r7
     a98:	b006      	add	sp, #24
     a9a:	bd80      	pop	{r7, pc}
     a9c:	20003890 	.word	0x20003890
     aa0:	2000386c 	.word	0x2000386c
     aa4:	20003838 	.word	0x20003838
     aa8:	2000383c 	.word	0x2000383c
     aac:	20003880 	.word	0x20003880
     ab0:	00000c21 	.word	0x00000c21
     ab4:	20003888 	.word	0x20003888
     ab8:	000002c3 	.word	0x000002c3
     abc:	20003870 	.word	0x20003870
     ac0:	200037ac 	.word	0x200037ac
     ac4:	0000027f 	.word	0x0000027f
     ac8:	200037a8 	.word	0x200037a8
     acc:	20003878 	.word	0x20003878
     ad0:	2000387c 	.word	0x2000387c

00000ad4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
     ad4:	b580      	push	{r7, lr}
     ad6:	b082      	sub	sp, #8
     ad8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     ada:	4b1f      	ldr	r3, [pc, #124]	; (b58 <vTaskSwitchContext+0x84>)
     adc:	681b      	ldr	r3, [r3, #0]
     ade:	2b00      	cmp	r3, #0
     ae0:	d003      	beq.n	aea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
     ae2:	4b1e      	ldr	r3, [pc, #120]	; (b5c <vTaskSwitchContext+0x88>)
     ae4:	2201      	movs	r2, #1
     ae6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
     ae8:	e032      	b.n	b50 <vTaskSwitchContext+0x7c>
		xYieldPending = pdFALSE;
     aea:	4b1c      	ldr	r3, [pc, #112]	; (b5c <vTaskSwitchContext+0x88>)
     aec:	2200      	movs	r2, #0
     aee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     af0:	4b1b      	ldr	r3, [pc, #108]	; (b60 <vTaskSwitchContext+0x8c>)
     af2:	681b      	ldr	r3, [r3, #0]
     af4:	607b      	str	r3, [r7, #4]
     af6:	e002      	b.n	afe <vTaskSwitchContext+0x2a>
     af8:	687b      	ldr	r3, [r7, #4]
     afa:	3b01      	subs	r3, #1
     afc:	607b      	str	r3, [r7, #4]
     afe:	4919      	ldr	r1, [pc, #100]	; (b64 <vTaskSwitchContext+0x90>)
     b00:	687a      	ldr	r2, [r7, #4]
     b02:	0013      	movs	r3, r2
     b04:	009b      	lsls	r3, r3, #2
     b06:	189b      	adds	r3, r3, r2
     b08:	009b      	lsls	r3, r3, #2
     b0a:	585b      	ldr	r3, [r3, r1]
     b0c:	2b00      	cmp	r3, #0
     b0e:	d0f3      	beq.n	af8 <vTaskSwitchContext+0x24>
     b10:	687a      	ldr	r2, [r7, #4]
     b12:	0013      	movs	r3, r2
     b14:	009b      	lsls	r3, r3, #2
     b16:	189b      	adds	r3, r3, r2
     b18:	009b      	lsls	r3, r3, #2
     b1a:	4a12      	ldr	r2, [pc, #72]	; (b64 <vTaskSwitchContext+0x90>)
     b1c:	189b      	adds	r3, r3, r2
     b1e:	603b      	str	r3, [r7, #0]
     b20:	683b      	ldr	r3, [r7, #0]
     b22:	685b      	ldr	r3, [r3, #4]
     b24:	685a      	ldr	r2, [r3, #4]
     b26:	683b      	ldr	r3, [r7, #0]
     b28:	605a      	str	r2, [r3, #4]
     b2a:	683b      	ldr	r3, [r7, #0]
     b2c:	685a      	ldr	r2, [r3, #4]
     b2e:	683b      	ldr	r3, [r7, #0]
     b30:	3308      	adds	r3, #8
     b32:	429a      	cmp	r2, r3
     b34:	d104      	bne.n	b40 <vTaskSwitchContext+0x6c>
     b36:	683b      	ldr	r3, [r7, #0]
     b38:	685b      	ldr	r3, [r3, #4]
     b3a:	685a      	ldr	r2, [r3, #4]
     b3c:	683b      	ldr	r3, [r7, #0]
     b3e:	605a      	str	r2, [r3, #4]
     b40:	683b      	ldr	r3, [r7, #0]
     b42:	685b      	ldr	r3, [r3, #4]
     b44:	68da      	ldr	r2, [r3, #12]
     b46:	4b08      	ldr	r3, [pc, #32]	; (b68 <vTaskSwitchContext+0x94>)
     b48:	601a      	str	r2, [r3, #0]
     b4a:	4b05      	ldr	r3, [pc, #20]	; (b60 <vTaskSwitchContext+0x8c>)
     b4c:	687a      	ldr	r2, [r7, #4]
     b4e:	601a      	str	r2, [r3, #0]
}
     b50:	46c0      	nop			; (mov r8, r8)
     b52:	46bd      	mov	sp, r7
     b54:	b002      	add	sp, #8
     b56:	bd80      	pop	{r7, pc}
     b58:	20003890 	.word	0x20003890
     b5c:	2000387c 	.word	0x2000387c
     b60:	20003870 	.word	0x20003870
     b64:	200037ac 	.word	0x200037ac
     b68:	200037a8 	.word	0x200037a8

00000b6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
     b6c:	b580      	push	{r7, lr}
     b6e:	b082      	sub	sp, #8
     b70:	af00      	add	r7, sp, #0
     b72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
     b74:	4b04      	ldr	r3, [pc, #16]	; (b88 <prvIdleTask+0x1c>)
     b76:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
     b78:	4b04      	ldr	r3, [pc, #16]	; (b8c <prvIdleTask+0x20>)
     b7a:	681b      	ldr	r3, [r3, #0]
     b7c:	2b01      	cmp	r3, #1
     b7e:	d9f9      	bls.n	b74 <prvIdleTask+0x8>
			{
				taskYIELD();
     b80:	4b03      	ldr	r3, [pc, #12]	; (b90 <prvIdleTask+0x24>)
     b82:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
     b84:	e7f6      	b.n	b74 <prvIdleTask+0x8>
     b86:	46c0      	nop			; (mov r8, r8)
     b88:	00000c15 	.word	0x00000c15
     b8c:	200037ac 	.word	0x200037ac
     b90:	00000421 	.word	0x00000421

00000b94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
     b94:	b580      	push	{r7, lr}
     b96:	b082      	sub	sp, #8
     b98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
     b9a:	2300      	movs	r3, #0
     b9c:	607b      	str	r3, [r7, #4]
     b9e:	e00c      	b.n	bba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
     ba0:	687a      	ldr	r2, [r7, #4]
     ba2:	0013      	movs	r3, r2
     ba4:	009b      	lsls	r3, r3, #2
     ba6:	189b      	adds	r3, r3, r2
     ba8:	009b      	lsls	r3, r3, #2
     baa:	4a12      	ldr	r2, [pc, #72]	; (bf4 <prvInitialiseTaskLists+0x60>)
     bac:	189b      	adds	r3, r3, r2
     bae:	0018      	movs	r0, r3
     bb0:	4b11      	ldr	r3, [pc, #68]	; (bf8 <prvInitialiseTaskLists+0x64>)
     bb2:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
     bb4:	687b      	ldr	r3, [r7, #4]
     bb6:	3301      	adds	r3, #1
     bb8:	607b      	str	r3, [r7, #4]
     bba:	687b      	ldr	r3, [r7, #4]
     bbc:	2b04      	cmp	r3, #4
     bbe:	d9ef      	bls.n	ba0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
     bc0:	4b0e      	ldr	r3, [pc, #56]	; (bfc <prvInitialiseTaskLists+0x68>)
     bc2:	0018      	movs	r0, r3
     bc4:	4b0c      	ldr	r3, [pc, #48]	; (bf8 <prvInitialiseTaskLists+0x64>)
     bc6:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
     bc8:	4b0d      	ldr	r3, [pc, #52]	; (c00 <prvInitialiseTaskLists+0x6c>)
     bca:	0018      	movs	r0, r3
     bcc:	4b0a      	ldr	r3, [pc, #40]	; (bf8 <prvInitialiseTaskLists+0x64>)
     bce:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
     bd0:	4b0c      	ldr	r3, [pc, #48]	; (c04 <prvInitialiseTaskLists+0x70>)
     bd2:	0018      	movs	r0, r3
     bd4:	4b08      	ldr	r3, [pc, #32]	; (bf8 <prvInitialiseTaskLists+0x64>)
     bd6:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
     bd8:	4b0b      	ldr	r3, [pc, #44]	; (c08 <prvInitialiseTaskLists+0x74>)
     bda:	0018      	movs	r0, r3
     bdc:	4b06      	ldr	r3, [pc, #24]	; (bf8 <prvInitialiseTaskLists+0x64>)
     bde:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
     be0:	4b0a      	ldr	r3, [pc, #40]	; (c0c <prvInitialiseTaskLists+0x78>)
     be2:	4a06      	ldr	r2, [pc, #24]	; (bfc <prvInitialiseTaskLists+0x68>)
     be4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
     be6:	4b0a      	ldr	r3, [pc, #40]	; (c10 <prvInitialiseTaskLists+0x7c>)
     be8:	4a05      	ldr	r2, [pc, #20]	; (c00 <prvInitialiseTaskLists+0x6c>)
     bea:	601a      	str	r2, [r3, #0]
}
     bec:	46c0      	nop			; (mov r8, r8)
     bee:	46bd      	mov	sp, r7
     bf0:	b002      	add	sp, #8
     bf2:	bd80      	pop	{r7, pc}
     bf4:	200037ac 	.word	0x200037ac
     bf8:	0000022d 	.word	0x0000022d
     bfc:	20003810 	.word	0x20003810
     c00:	20003824 	.word	0x20003824
     c04:	20003840 	.word	0x20003840
     c08:	20003854 	.word	0x20003854
     c0c:	20003838 	.word	0x20003838
     c10:	2000383c 	.word	0x2000383c

00000c14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
     c14:	b580      	push	{r7, lr}
     c16:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
     c18:	46c0      	nop			; (mov r8, r8)
     c1a:	46bd      	mov	sp, r7
     c1c:	bd80      	pop	{r7, pc}
	...

00000c20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
     c20:	b580      	push	{r7, lr}
     c22:	b082      	sub	sp, #8
     c24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     c26:	4b0b      	ldr	r3, [pc, #44]	; (c54 <prvResetNextTaskUnblockTime+0x34>)
     c28:	681b      	ldr	r3, [r3, #0]
     c2a:	681b      	ldr	r3, [r3, #0]
     c2c:	2b00      	cmp	r3, #0
     c2e:	d104      	bne.n	c3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
     c30:	4b09      	ldr	r3, [pc, #36]	; (c58 <prvResetNextTaskUnblockTime+0x38>)
     c32:	2201      	movs	r2, #1
     c34:	4252      	negs	r2, r2
     c36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
     c38:	e008      	b.n	c4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     c3a:	4b06      	ldr	r3, [pc, #24]	; (c54 <prvResetNextTaskUnblockTime+0x34>)
     c3c:	681b      	ldr	r3, [r3, #0]
     c3e:	68db      	ldr	r3, [r3, #12]
     c40:	68db      	ldr	r3, [r3, #12]
     c42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
     c44:	687b      	ldr	r3, [r7, #4]
     c46:	685a      	ldr	r2, [r3, #4]
     c48:	4b03      	ldr	r3, [pc, #12]	; (c58 <prvResetNextTaskUnblockTime+0x38>)
     c4a:	601a      	str	r2, [r3, #0]
}
     c4c:	46c0      	nop			; (mov r8, r8)
     c4e:	46bd      	mov	sp, r7
     c50:	b002      	add	sp, #8
     c52:	bd80      	pop	{r7, pc}
     c54:	20003838 	.word	0x20003838
     c58:	20003888 	.word	0x20003888

00000c5c <tc_register_callback>:
 */
enum status_code tc_register_callback(
		struct tc_module *const module,
		tc_callback_t callback_func,
		const enum tc_callback callback_type)
{
     c5c:	b580      	push	{r7, lr}
     c5e:	b084      	sub	sp, #16
     c60:	af00      	add	r7, sp, #0
     c62:	60f8      	str	r0, [r7, #12]
     c64:	60b9      	str	r1, [r7, #8]
     c66:	1dfb      	adds	r3, r7, #7
     c68:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     c6a:	1dfb      	adds	r3, r7, #7
     c6c:	781a      	ldrb	r2, [r3, #0]
     c6e:	68fb      	ldr	r3, [r7, #12]
     c70:	3202      	adds	r2, #2
     c72:	0092      	lsls	r2, r2, #2
     c74:	68b9      	ldr	r1, [r7, #8]
     c76:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
     c78:	1dfb      	adds	r3, r7, #7
     c7a:	781b      	ldrb	r3, [r3, #0]
     c7c:	2b02      	cmp	r3, #2
     c7e:	d107      	bne.n	c90 <tc_register_callback+0x34>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
     c80:	68fb      	ldr	r3, [r7, #12]
     c82:	7e1b      	ldrb	r3, [r3, #24]
     c84:	2210      	movs	r2, #16
     c86:	4313      	orrs	r3, r2
     c88:	b2da      	uxtb	r2, r3
     c8a:	68fb      	ldr	r3, [r7, #12]
     c8c:	761a      	strb	r2, [r3, #24]
     c8e:	e019      	b.n	cc4 <tc_register_callback+0x68>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
     c90:	1dfb      	adds	r3, r7, #7
     c92:	781b      	ldrb	r3, [r3, #0]
     c94:	2b03      	cmp	r3, #3
     c96:	d107      	bne.n	ca8 <tc_register_callback+0x4c>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
     c98:	68fb      	ldr	r3, [r7, #12]
     c9a:	7e1b      	ldrb	r3, [r3, #24]
     c9c:	2220      	movs	r2, #32
     c9e:	4313      	orrs	r3, r2
     ca0:	b2da      	uxtb	r2, r3
     ca2:	68fb      	ldr	r3, [r7, #12]
     ca4:	761a      	strb	r2, [r3, #24]
     ca6:	e00d      	b.n	cc4 <tc_register_callback+0x68>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
     ca8:	68fb      	ldr	r3, [r7, #12]
     caa:	7e1b      	ldrb	r3, [r3, #24]
     cac:	b25a      	sxtb	r2, r3
     cae:	1dfb      	adds	r3, r7, #7
     cb0:	781b      	ldrb	r3, [r3, #0]
     cb2:	2101      	movs	r1, #1
     cb4:	4099      	lsls	r1, r3
     cb6:	000b      	movs	r3, r1
     cb8:	b25b      	sxtb	r3, r3
     cba:	4313      	orrs	r3, r2
     cbc:	b25b      	sxtb	r3, r3
     cbe:	b2da      	uxtb	r2, r3
     cc0:	68fb      	ldr	r3, [r7, #12]
     cc2:	761a      	strb	r2, [r3, #24]
	}
	return STATUS_OK;
     cc4:	2300      	movs	r3, #0
}
     cc6:	0018      	movs	r0, r3
     cc8:	46bd      	mov	sp, r7
     cca:	b004      	add	sp, #16
     ccc:	bd80      	pop	{r7, pc}
	...

00000cd0 <TC0_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     cd0:	b580      	push	{r7, lr}
     cd2:	af00      	add	r7, sp, #0
     cd4:	2000      	movs	r0, #0
     cd6:	4b02      	ldr	r3, [pc, #8]	; (ce0 <TC0_Handler+0x10>)
     cd8:	4798      	blx	r3
     cda:	46c0      	nop			; (mov r8, r8)
     cdc:	46bd      	mov	sp, r7
     cde:	bd80      	pop	{r7, pc}
     ce0:	00000d21 	.word	0x00000d21

00000ce4 <TC1_Handler>:
     ce4:	b580      	push	{r7, lr}
     ce6:	af00      	add	r7, sp, #0
     ce8:	2001      	movs	r0, #1
     cea:	4b02      	ldr	r3, [pc, #8]	; (cf4 <TC1_Handler+0x10>)
     cec:	4798      	blx	r3
     cee:	46c0      	nop			; (mov r8, r8)
     cf0:	46bd      	mov	sp, r7
     cf2:	bd80      	pop	{r7, pc}
     cf4:	00000d21 	.word	0x00000d21

00000cf8 <TC2_Handler>:
     cf8:	b580      	push	{r7, lr}
     cfa:	af00      	add	r7, sp, #0
     cfc:	2002      	movs	r0, #2
     cfe:	4b02      	ldr	r3, [pc, #8]	; (d08 <TC2_Handler+0x10>)
     d00:	4798      	blx	r3
     d02:	46c0      	nop			; (mov r8, r8)
     d04:	46bd      	mov	sp, r7
     d06:	bd80      	pop	{r7, pc}
     d08:	00000d21 	.word	0x00000d21

00000d0c <TC3_Handler>:
     d0c:	b580      	push	{r7, lr}
     d0e:	af00      	add	r7, sp, #0
     d10:	2003      	movs	r0, #3
     d12:	4b02      	ldr	r3, [pc, #8]	; (d1c <TC3_Handler+0x10>)
     d14:	4798      	blx	r3
     d16:	46c0      	nop			; (mov r8, r8)
     d18:	46bd      	mov	sp, r7
     d1a:	bd80      	pop	{r7, pc}
     d1c:	00000d21 	.word	0x00000d21

00000d20 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     d20:	b580      	push	{r7, lr}
     d22:	b084      	sub	sp, #16
     d24:	af00      	add	r7, sp, #0
     d26:	0002      	movs	r2, r0
     d28:	1dfb      	adds	r3, r7, #7
     d2a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
     d2c:	1dfb      	adds	r3, r7, #7
     d2e:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
     d30:	4b28      	ldr	r3, [pc, #160]	; (dd4 <_tc_interrupt_handler+0xb4>)
     d32:	0092      	lsls	r2, r2, #2
     d34:	58d3      	ldr	r3, [r2, r3]
     d36:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     d38:	68fb      	ldr	r3, [r7, #12]
     d3a:	681b      	ldr	r3, [r3, #0]
     d3c:	7a9b      	ldrb	r3, [r3, #10]
     d3e:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
     d40:	68fa      	ldr	r2, [r7, #12]
     d42:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     d44:	4013      	ands	r3, r2
     d46:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
     d48:	68fb      	ldr	r3, [r7, #12]
     d4a:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     d4c:	230b      	movs	r3, #11
     d4e:	18fb      	adds	r3, r7, r3
     d50:	400a      	ands	r2, r1
     d52:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     d54:	230b      	movs	r3, #11
     d56:	18fb      	adds	r3, r7, r3
     d58:	781b      	ldrb	r3, [r3, #0]
     d5a:	2201      	movs	r2, #1
     d5c:	4013      	ands	r3, r2
     d5e:	d008      	beq.n	d72 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     d60:	68fb      	ldr	r3, [r7, #12]
     d62:	689b      	ldr	r3, [r3, #8]
     d64:	68fa      	ldr	r2, [r7, #12]
     d66:	0010      	movs	r0, r2
     d68:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     d6a:	68fb      	ldr	r3, [r7, #12]
     d6c:	681b      	ldr	r3, [r3, #0]
     d6e:	2201      	movs	r2, #1
     d70:	729a      	strb	r2, [r3, #10]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     d72:	230b      	movs	r3, #11
     d74:	18fb      	adds	r3, r7, r3
     d76:	781b      	ldrb	r3, [r3, #0]
     d78:	2202      	movs	r2, #2
     d7a:	4013      	ands	r3, r2
     d7c:	d008      	beq.n	d90 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
     d7e:	68fb      	ldr	r3, [r7, #12]
     d80:	68db      	ldr	r3, [r3, #12]
     d82:	68fa      	ldr	r2, [r7, #12]
     d84:	0010      	movs	r0, r2
     d86:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     d88:	68fb      	ldr	r3, [r7, #12]
     d8a:	681b      	ldr	r3, [r3, #0]
     d8c:	2202      	movs	r2, #2
     d8e:	729a      	strb	r2, [r3, #10]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     d90:	230b      	movs	r3, #11
     d92:	18fb      	adds	r3, r7, r3
     d94:	781b      	ldrb	r3, [r3, #0]
     d96:	2210      	movs	r2, #16
     d98:	4013      	ands	r3, r2
     d9a:	d008      	beq.n	dae <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     d9c:	68fb      	ldr	r3, [r7, #12]
     d9e:	691b      	ldr	r3, [r3, #16]
     da0:	68fa      	ldr	r2, [r7, #12]
     da2:	0010      	movs	r0, r2
     da4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     da6:	68fb      	ldr	r3, [r7, #12]
     da8:	681b      	ldr	r3, [r3, #0]
     daa:	2210      	movs	r2, #16
     dac:	729a      	strb	r2, [r3, #10]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     dae:	230b      	movs	r3, #11
     db0:	18fb      	adds	r3, r7, r3
     db2:	781b      	ldrb	r3, [r3, #0]
     db4:	2220      	movs	r2, #32
     db6:	4013      	ands	r3, r2
     db8:	d008      	beq.n	dcc <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     dba:	68fb      	ldr	r3, [r7, #12]
     dbc:	695b      	ldr	r3, [r3, #20]
     dbe:	68fa      	ldr	r2, [r7, #12]
     dc0:	0010      	movs	r0, r2
     dc2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     dc4:	68fb      	ldr	r3, [r7, #12]
     dc6:	681b      	ldr	r3, [r3, #0]
     dc8:	2220      	movs	r2, #32
     dca:	729a      	strb	r2, [r3, #10]
	}
}
     dcc:	46c0      	nop			; (mov r8, r8)
     dce:	46bd      	mov	sp, r7
     dd0:	b004      	add	sp, #16
     dd2:	bd80      	pop	{r7, pc}
     dd4:	200038bc 	.word	0x200038bc

00000dd8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     dd8:	b580      	push	{r7, lr}
     dda:	b082      	sub	sp, #8
     ddc:	af00      	add	r7, sp, #0
     dde:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     de0:	687b      	ldr	r3, [r7, #4]
     de2:	2200      	movs	r2, #0
     de4:	701a      	strb	r2, [r3, #0]
}
     de6:	46c0      	nop			; (mov r8, r8)
     de8:	46bd      	mov	sp, r7
     dea:	b002      	add	sp, #8
     dec:	bd80      	pop	{r7, pc}
	...

00000df0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     df0:	b580      	push	{r7, lr}
     df2:	b082      	sub	sp, #8
     df4:	af00      	add	r7, sp, #0
     df6:	0002      	movs	r2, r0
     df8:	6039      	str	r1, [r7, #0]
     dfa:	1dfb      	adds	r3, r7, #7
     dfc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     dfe:	1dfb      	adds	r3, r7, #7
     e00:	781b      	ldrb	r3, [r3, #0]
     e02:	2b01      	cmp	r3, #1
     e04:	d00a      	beq.n	e1c <system_apb_clock_set_mask+0x2c>
     e06:	2b02      	cmp	r3, #2
     e08:	d00f      	beq.n	e2a <system_apb_clock_set_mask+0x3a>
     e0a:	2b00      	cmp	r3, #0
     e0c:	d114      	bne.n	e38 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     e0e:	4b0e      	ldr	r3, [pc, #56]	; (e48 <system_apb_clock_set_mask+0x58>)
     e10:	4a0d      	ldr	r2, [pc, #52]	; (e48 <system_apb_clock_set_mask+0x58>)
     e12:	6951      	ldr	r1, [r2, #20]
     e14:	683a      	ldr	r2, [r7, #0]
     e16:	430a      	orrs	r2, r1
     e18:	615a      	str	r2, [r3, #20]
			break;
     e1a:	e00f      	b.n	e3c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
     e1c:	4b0a      	ldr	r3, [pc, #40]	; (e48 <system_apb_clock_set_mask+0x58>)
     e1e:	4a0a      	ldr	r2, [pc, #40]	; (e48 <system_apb_clock_set_mask+0x58>)
     e20:	6991      	ldr	r1, [r2, #24]
     e22:	683a      	ldr	r2, [r7, #0]
     e24:	430a      	orrs	r2, r1
     e26:	619a      	str	r2, [r3, #24]
			break;
     e28:	e008      	b.n	e3c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     e2a:	4b07      	ldr	r3, [pc, #28]	; (e48 <system_apb_clock_set_mask+0x58>)
     e2c:	4a06      	ldr	r2, [pc, #24]	; (e48 <system_apb_clock_set_mask+0x58>)
     e2e:	69d1      	ldr	r1, [r2, #28]
     e30:	683a      	ldr	r2, [r7, #0]
     e32:	430a      	orrs	r2, r1
     e34:	61da      	str	r2, [r3, #28]
			break;
     e36:	e001      	b.n	e3c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     e38:	2317      	movs	r3, #23
     e3a:	e000      	b.n	e3e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     e3c:	2300      	movs	r3, #0
}
     e3e:	0018      	movs	r0, r3
     e40:	46bd      	mov	sp, r7
     e42:	b002      	add	sp, #8
     e44:	bd80      	pop	{r7, pc}
     e46:	46c0      	nop			; (mov r8, r8)
     e48:	40000800 	.word	0x40000800

00000e4c <system_pinmux_get_config_defaults>:
{
     e4c:	b580      	push	{r7, lr}
     e4e:	b082      	sub	sp, #8
     e50:	af00      	add	r7, sp, #0
     e52:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     e54:	687b      	ldr	r3, [r7, #4]
     e56:	2280      	movs	r2, #128	; 0x80
     e58:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     e5a:	687b      	ldr	r3, [r7, #4]
     e5c:	2200      	movs	r2, #0
     e5e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     e60:	687b      	ldr	r3, [r7, #4]
     e62:	2201      	movs	r2, #1
     e64:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     e66:	687b      	ldr	r3, [r7, #4]
     e68:	2200      	movs	r2, #0
     e6a:	70da      	strb	r2, [r3, #3]
}
     e6c:	46c0      	nop			; (mov r8, r8)
     e6e:	46bd      	mov	sp, r7
     e70:	b002      	add	sp, #8
     e72:	bd80      	pop	{r7, pc}

00000e74 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
     e74:	b580      	push	{r7, lr}
     e76:	b084      	sub	sp, #16
     e78:	af00      	add	r7, sp, #0
     e7a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     e7c:	687b      	ldr	r3, [r7, #4]
     e7e:	681b      	ldr	r3, [r3, #0]
     e80:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
     e82:	68fb      	ldr	r3, [r7, #12]
     e84:	691b      	ldr	r3, [r3, #16]
     e86:	1e5a      	subs	r2, r3, #1
     e88:	4193      	sbcs	r3, r2
     e8a:	b2db      	uxtb	r3, r3
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
#endif
}
     e8c:	0018      	movs	r0, r3
     e8e:	46bd      	mov	sp, r7
     e90:	b004      	add	sp, #16
     e92:	bd80      	pop	{r7, pc}

00000e94 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     e94:	b590      	push	{r4, r7, lr}
     e96:	b089      	sub	sp, #36	; 0x24
     e98:	af00      	add	r7, sp, #0
     e9a:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     e9c:	230c      	movs	r3, #12
     e9e:	18fb      	adds	r3, r7, r3
     ea0:	4a0e      	ldr	r2, [pc, #56]	; (edc <_tc_get_inst_index+0x48>)
     ea2:	ca13      	ldmia	r2!, {r0, r1, r4}
     ea4:	c313      	stmia	r3!, {r0, r1, r4}
     ea6:	6812      	ldr	r2, [r2, #0]
     ea8:	601a      	str	r2, [r3, #0]

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     eaa:	2300      	movs	r3, #0
     eac:	61fb      	str	r3, [r7, #28]
     eae:	e00d      	b.n	ecc <_tc_get_inst_index+0x38>
		if (hw == tc_modules[i]) {
     eb0:	230c      	movs	r3, #12
     eb2:	18fb      	adds	r3, r7, r3
     eb4:	69fa      	ldr	r2, [r7, #28]
     eb6:	0092      	lsls	r2, r2, #2
     eb8:	58d2      	ldr	r2, [r2, r3]
     eba:	687b      	ldr	r3, [r7, #4]
     ebc:	429a      	cmp	r2, r3
     ebe:	d102      	bne.n	ec6 <_tc_get_inst_index+0x32>
			return i;
     ec0:	69fb      	ldr	r3, [r7, #28]
     ec2:	b2db      	uxtb	r3, r3
     ec4:	e006      	b.n	ed4 <_tc_get_inst_index+0x40>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     ec6:	69fb      	ldr	r3, [r7, #28]
     ec8:	3301      	adds	r3, #1
     eca:	61fb      	str	r3, [r7, #28]
     ecc:	69fb      	ldr	r3, [r7, #28]
     ece:	2b03      	cmp	r3, #3
     ed0:	d9ee      	bls.n	eb0 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     ed2:	2300      	movs	r3, #0
}
     ed4:	0018      	movs	r0, r3
     ed6:	46bd      	mov	sp, r7
     ed8:	b009      	add	sp, #36	; 0x24
     eda:	bd90      	pop	{r4, r7, pc}
     edc:	00002808 	.word	0x00002808

00000ee0 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     ee0:	b590      	push	{r4, r7, lr}
     ee2:	b093      	sub	sp, #76	; 0x4c
     ee4:	af00      	add	r7, sp, #0
     ee6:	60f8      	str	r0, [r7, #12]
     ee8:	60b9      	str	r1, [r7, #8]
     eea:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint32_t ctrla_tmp = 0;
     eec:	2300      	movs	r3, #0
     eee:	647b      	str	r3, [r7, #68]	; 0x44
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
     ef0:	2343      	movs	r3, #67	; 0x43
     ef2:	18fb      	adds	r3, r7, r3
     ef4:	2200      	movs	r2, #0
     ef6:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     ef8:	233f      	movs	r3, #63	; 0x3f
     efa:	18fc      	adds	r4, r7, r3
     efc:	68bb      	ldr	r3, [r7, #8]
     efe:	0018      	movs	r0, r3
     f00:	4bd4      	ldr	r3, [pc, #848]	; (1254 <tc_init+0x374>)
     f02:	4798      	blx	r3
     f04:	0003      	movs	r3, r0
     f06:	7023      	strb	r3, [r4, #0]
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_TC4};
#elif (SAML22)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID};
     f08:	2338      	movs	r3, #56	; 0x38
     f0a:	18fb      	adds	r3, r7, r3
     f0c:	4ad2      	ldr	r2, [pc, #840]	; (1258 <tc_init+0x378>)
     f0e:	6812      	ldr	r2, [r2, #0]
     f10:	601a      	str	r2, [r3, #0]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
     f12:	2318      	movs	r3, #24
     f14:	18fb      	adds	r3, r7, r3
     f16:	4ad1      	ldr	r2, [pc, #836]	; (125c <tc_init+0x37c>)
     f18:	ca13      	ldmia	r2!, {r0, r1, r4}
     f1a:	c313      	stmia	r3!, {r0, r1, r4}
     f1c:	ca13      	ldmia	r2!, {r0, r1, r4}
     f1e:	c313      	stmia	r3!, {r0, r1, r4}
     f20:	ca03      	ldmia	r2!, {r0, r1}
     f22:	c303      	stmia	r3!, {r0, r1}
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
     f24:	2342      	movs	r3, #66	; 0x42
     f26:	18fb      	adds	r3, r7, r3
     f28:	2200      	movs	r2, #0
     f2a:	701a      	strb	r2, [r3, #0]
     f2c:	e00e      	b.n	f4c <tc_init+0x6c>
		module_inst->callback[i]        = NULL;
     f2e:	2342      	movs	r3, #66	; 0x42
     f30:	18fb      	adds	r3, r7, r3
     f32:	781a      	ldrb	r2, [r3, #0]
     f34:	68fb      	ldr	r3, [r7, #12]
     f36:	3202      	adds	r2, #2
     f38:	0092      	lsls	r2, r2, #2
     f3a:	2100      	movs	r1, #0
     f3c:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
     f3e:	2342      	movs	r3, #66	; 0x42
     f40:	18fb      	adds	r3, r7, r3
     f42:	781a      	ldrb	r2, [r3, #0]
     f44:	2342      	movs	r3, #66	; 0x42
     f46:	18fb      	adds	r3, r7, r3
     f48:	3201      	adds	r2, #1
     f4a:	701a      	strb	r2, [r3, #0]
     f4c:	2342      	movs	r3, #66	; 0x42
     f4e:	18fb      	adds	r3, r7, r3
     f50:	781b      	ldrb	r3, [r3, #0]
     f52:	2b03      	cmp	r3, #3
     f54:	d9eb      	bls.n	f2e <tc_init+0x4e>
	}
	module_inst->register_callback_mask     = 0x00;
     f56:	68fb      	ldr	r3, [r7, #12]
     f58:	2200      	movs	r2, #0
     f5a:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
     f5c:	68fb      	ldr	r3, [r7, #12]
     f5e:	2200      	movs	r2, #0
     f60:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     f62:	233f      	movs	r3, #63	; 0x3f
     f64:	18fb      	adds	r3, r7, r3
     f66:	781a      	ldrb	r2, [r3, #0]
     f68:	4bbd      	ldr	r3, [pc, #756]	; (1260 <tc_init+0x380>)
     f6a:	0092      	lsls	r2, r2, #2
     f6c:	68f9      	ldr	r1, [r7, #12]
     f6e:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     f70:	68fb      	ldr	r3, [r7, #12]
     f72:	68ba      	ldr	r2, [r7, #8]
     f74:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
     f76:	687b      	ldr	r3, [r7, #4]
     f78:	2234      	movs	r2, #52	; 0x34
     f7a:	5c9a      	ldrb	r2, [r3, r2]
     f7c:	68fb      	ldr	r3, [r7, #12]
     f7e:	769a      	strb	r2, [r3, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     f80:	687b      	ldr	r3, [r7, #4]
     f82:	78db      	ldrb	r3, [r3, #3]
     f84:	2b08      	cmp	r3, #8
     f86:	d107      	bne.n	f98 <tc_init+0xb8>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
     f88:	233f      	movs	r3, #63	; 0x3f
     f8a:	18fb      	adds	r3, r7, r3
     f8c:	781b      	ldrb	r3, [r3, #0]
     f8e:	2201      	movs	r2, #1
     f90:	4013      	ands	r3, r2
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     f92:	d001      	beq.n	f98 <tc_init+0xb8>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     f94:	2317      	movs	r3, #23
     f96:	e1ec      	b.n	1372 <tc_init+0x492>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     f98:	687b      	ldr	r3, [r7, #4]
     f9a:	78da      	ldrb	r2, [r3, #3]
     f9c:	68fb      	ldr	r3, [r7, #12]
     f9e:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     fa0:	68bb      	ldr	r3, [r7, #8]
     fa2:	681b      	ldr	r3, [r3, #0]
     fa4:	2201      	movs	r2, #1
     fa6:	4013      	ands	r3, r2
     fa8:	d001      	beq.n	fae <tc_init+0xce>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     faa:	2305      	movs	r3, #5
     fac:	e1e1      	b.n	1372 <tc_init+0x492>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     fae:	68bb      	ldr	r3, [r7, #8]
     fb0:	7adb      	ldrb	r3, [r3, #11]
     fb2:	b2db      	uxtb	r3, r3
     fb4:	001a      	movs	r2, r3
     fb6:	2302      	movs	r3, #2
     fb8:	4013      	ands	r3, r2
     fba:	d001      	beq.n	fc0 <tc_init+0xe0>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
     fbc:	231c      	movs	r3, #28
     fbe:	e1d8      	b.n	1372 <tc_init+0x492>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     fc0:	68bb      	ldr	r3, [r7, #8]
     fc2:	681b      	ldr	r3, [r3, #0]
     fc4:	2202      	movs	r2, #2
     fc6:	4013      	ands	r3, r2
     fc8:	d001      	beq.n	fce <tc_init+0xee>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     fca:	231c      	movs	r3, #28
     fcc:	e1d1      	b.n	1372 <tc_init+0x492>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
     fce:	687b      	ldr	r3, [r7, #4]
     fd0:	7c1b      	ldrb	r3, [r3, #16]
     fd2:	2b00      	cmp	r3, #0
     fd4:	d017      	beq.n	1006 <tc_init+0x126>
		system_pinmux_get_config_defaults(&pin_config);
     fd6:	2314      	movs	r3, #20
     fd8:	18fb      	adds	r3, r7, r3
     fda:	0018      	movs	r0, r3
     fdc:	4ba1      	ldr	r3, [pc, #644]	; (1264 <tc_init+0x384>)
     fde:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     fe0:	687b      	ldr	r3, [r7, #4]
     fe2:	699b      	ldr	r3, [r3, #24]
     fe4:	b2da      	uxtb	r2, r3
     fe6:	2314      	movs	r3, #20
     fe8:	18fb      	adds	r3, r7, r3
     fea:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     fec:	2314      	movs	r3, #20
     fee:	18fb      	adds	r3, r7, r3
     ff0:	2201      	movs	r2, #1
     ff2:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
     ff4:	687b      	ldr	r3, [r7, #4]
     ff6:	695b      	ldr	r3, [r3, #20]
		system_pinmux_pin_set_config(
     ff8:	b2db      	uxtb	r3, r3
     ffa:	2214      	movs	r2, #20
     ffc:	18ba      	adds	r2, r7, r2
     ffe:	0011      	movs	r1, r2
    1000:	0018      	movs	r0, r3
    1002:	4b99      	ldr	r3, [pc, #612]	; (1268 <tc_init+0x388>)
    1004:	4798      	blx	r3
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    1006:	687b      	ldr	r3, [r7, #4]
    1008:	7f1b      	ldrb	r3, [r3, #28]
    100a:	2b00      	cmp	r3, #0
    100c:	d017      	beq.n	103e <tc_init+0x15e>
		system_pinmux_get_config_defaults(&pin_config);
    100e:	2314      	movs	r3, #20
    1010:	18fb      	adds	r3, r7, r3
    1012:	0018      	movs	r0, r3
    1014:	4b93      	ldr	r3, [pc, #588]	; (1264 <tc_init+0x384>)
    1016:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1018:	687b      	ldr	r3, [r7, #4]
    101a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    101c:	b2da      	uxtb	r2, r3
    101e:	2314      	movs	r3, #20
    1020:	18fb      	adds	r3, r7, r3
    1022:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1024:	2314      	movs	r3, #20
    1026:	18fb      	adds	r3, r7, r3
    1028:	2201      	movs	r2, #1
    102a:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
    102c:	687b      	ldr	r3, [r7, #4]
    102e:	6a1b      	ldr	r3, [r3, #32]
		system_pinmux_pin_set_config(
    1030:	b2db      	uxtb	r3, r3
    1032:	2214      	movs	r2, #20
    1034:	18ba      	adds	r2, r7, r2
    1036:	0011      	movs	r1, r2
    1038:	0018      	movs	r0, r3
    103a:	4b8b      	ldr	r3, [pc, #556]	; (1268 <tc_init+0x388>)
    103c:	4798      	blx	r3
	}

	/* Enable the user interface clock in the MCLK */
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    103e:	233f      	movs	r3, #63	; 0x3f
    1040:	18fb      	adds	r3, r7, r3
    1042:	781b      	ldrb	r3, [r3, #0]
    1044:	005a      	lsls	r2, r3, #1
    1046:	2318      	movs	r3, #24
    1048:	18fb      	adds	r3, r7, r3
    104a:	0092      	lsls	r2, r2, #2
    104c:	58d3      	ldr	r3, [r2, r3]
    104e:	b2d8      	uxtb	r0, r3
			inst_mclk_apbmask[2*instance+1]);
    1050:	233f      	movs	r3, #63	; 0x3f
    1052:	18fb      	adds	r3, r7, r3
    1054:	781b      	ldrb	r3, [r3, #0]
    1056:	005b      	lsls	r3, r3, #1
    1058:	1c5a      	adds	r2, r3, #1
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    105a:	2318      	movs	r3, #24
    105c:	18fb      	adds	r3, r7, r3
    105e:	0092      	lsls	r2, r2, #2
    1060:	58d3      	ldr	r3, [r2, r3]
    1062:	0019      	movs	r1, r3
    1064:	4b81      	ldr	r3, [pc, #516]	; (126c <tc_init+0x38c>)
    1066:	4798      	blx	r3

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    1068:	687b      	ldr	r3, [r7, #4]
    106a:	78db      	ldrb	r3, [r3, #3]
    106c:	2b08      	cmp	r3, #8
    106e:	d11c      	bne.n	10aa <tc_init+0x1ca>
    1070:	233f      	movs	r3, #63	; 0x3f
    1072:	18fb      	adds	r3, r7, r3
    1074:	781b      	ldrb	r3, [r3, #0]
    1076:	3301      	adds	r3, #1
    1078:	2b03      	cmp	r3, #3
    107a:	dc16      	bgt.n	10aa <tc_init+0x1ca>
	{
		/* Enable the user interface clock in the MCLK */
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    107c:	233f      	movs	r3, #63	; 0x3f
    107e:	18fb      	adds	r3, r7, r3
    1080:	781b      	ldrb	r3, [r3, #0]
    1082:	3301      	adds	r3, #1
    1084:	005a      	lsls	r2, r3, #1
    1086:	2318      	movs	r3, #24
    1088:	18fb      	adds	r3, r7, r3
    108a:	0092      	lsls	r2, r2, #2
    108c:	58d3      	ldr	r3, [r2, r3]
    108e:	b2d8      	uxtb	r0, r3
				inst_mclk_apbmask[(instance+1)*2+1]);
    1090:	233f      	movs	r3, #63	; 0x3f
    1092:	18fb      	adds	r3, r7, r3
    1094:	781b      	ldrb	r3, [r3, #0]
    1096:	3301      	adds	r3, #1
    1098:	005b      	lsls	r3, r3, #1
    109a:	1c5a      	adds	r2, r3, #1
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    109c:	2318      	movs	r3, #24
    109e:	18fb      	adds	r3, r7, r3
    10a0:	0092      	lsls	r2, r2, #2
    10a2:	58d3      	ldr	r3, [r2, r3]
    10a4:	0019      	movs	r1, r3
    10a6:	4b71      	ldr	r3, [pc, #452]	; (126c <tc_init+0x38c>)
    10a8:	4798      	blx	r3
	}


	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    10aa:	2310      	movs	r3, #16
    10ac:	18fb      	adds	r3, r7, r3
    10ae:	0018      	movs	r0, r3
    10b0:	4b6f      	ldr	r3, [pc, #444]	; (1270 <tc_init+0x390>)
    10b2:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
    10b4:	687b      	ldr	r3, [r7, #4]
    10b6:	781a      	ldrb	r2, [r3, #0]
    10b8:	2310      	movs	r3, #16
    10ba:	18fb      	adds	r3, r7, r3
    10bc:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    10be:	233f      	movs	r3, #63	; 0x3f
    10c0:	18fb      	adds	r3, r7, r3
    10c2:	781b      	ldrb	r3, [r3, #0]
    10c4:	2238      	movs	r2, #56	; 0x38
    10c6:	18ba      	adds	r2, r7, r2
    10c8:	5cd3      	ldrb	r3, [r2, r3]
    10ca:	2210      	movs	r2, #16
    10cc:	18ba      	adds	r2, r7, r2
    10ce:	0011      	movs	r1, r2
    10d0:	0018      	movs	r0, r3
    10d2:	4b68      	ldr	r3, [pc, #416]	; (1274 <tc_init+0x394>)
    10d4:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    10d6:	233f      	movs	r3, #63	; 0x3f
    10d8:	18fb      	adds	r3, r7, r3
    10da:	781b      	ldrb	r3, [r3, #0]
    10dc:	2238      	movs	r2, #56	; 0x38
    10de:	18ba      	adds	r2, r7, r2
    10e0:	5cd3      	ldrb	r3, [r2, r3]
    10e2:	0018      	movs	r0, r3
    10e4:	4b64      	ldr	r3, [pc, #400]	; (1278 <tc_init+0x398>)
    10e6:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
    10e8:	687b      	ldr	r3, [r7, #4]
    10ea:	78da      	ldrb	r2, [r3, #3]
			(uint32_t)config->reload_action |
    10ec:	687b      	ldr	r3, [r7, #4]
    10ee:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->counter_size |
    10f0:	4313      	orrs	r3, r2
    10f2:	b2db      	uxtb	r3, r3
    10f4:	001a      	movs	r2, r3
			(uint32_t)config->clock_prescaler;
    10f6:	687b      	ldr	r3, [r7, #4]
    10f8:	889b      	ldrh	r3, [r3, #4]
	ctrla_tmp =
    10fa:	4313      	orrs	r3, r2
    10fc:	647b      	str	r3, [r7, #68]	; 0x44

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    10fe:	2341      	movs	r3, #65	; 0x41
    1100:	18fb      	adds	r3, r7, r3
    1102:	2200      	movs	r2, #0
    1104:	701a      	strb	r2, [r3, #0]
    1106:	e018      	b.n	113a <tc_init+0x25a>
		if (config->enable_capture_on_channel[i] == true) {
    1108:	2341      	movs	r3, #65	; 0x41
    110a:	18fb      	adds	r3, r7, r3
    110c:	781b      	ldrb	r3, [r3, #0]
    110e:	687a      	ldr	r2, [r7, #4]
    1110:	18d3      	adds	r3, r2, r3
    1112:	7a5b      	ldrb	r3, [r3, #9]
    1114:	2b00      	cmp	r3, #0
    1116:	d009      	beq.n	112c <tc_init+0x24c>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    1118:	2341      	movs	r3, #65	; 0x41
    111a:	18fb      	adds	r3, r7, r3
    111c:	781b      	ldrb	r3, [r3, #0]
    111e:	2280      	movs	r2, #128	; 0x80
    1120:	0252      	lsls	r2, r2, #9
    1122:	409a      	lsls	r2, r3
    1124:	0013      	movs	r3, r2
    1126:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    1128:	4313      	orrs	r3, r2
    112a:	647b      	str	r3, [r7, #68]	; 0x44
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    112c:	2341      	movs	r3, #65	; 0x41
    112e:	18fb      	adds	r3, r7, r3
    1130:	781a      	ldrb	r2, [r3, #0]
    1132:	2341      	movs	r3, #65	; 0x41
    1134:	18fb      	adds	r3, r7, r3
    1136:	3201      	adds	r2, #1
    1138:	701a      	strb	r2, [r3, #0]
    113a:	2341      	movs	r3, #65	; 0x41
    113c:	18fb      	adds	r3, r7, r3
    113e:	781b      	ldrb	r3, [r3, #0]
    1140:	2b01      	cmp	r3, #1
    1142:	d9e1      	bls.n	1108 <tc_init+0x228>
		}
	}

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    1144:	2340      	movs	r3, #64	; 0x40
    1146:	18fb      	adds	r3, r7, r3
    1148:	2200      	movs	r2, #0
    114a:	701a      	strb	r2, [r3, #0]
    114c:	e018      	b.n	1180 <tc_init+0x2a0>
		if (config->enable_capture_on_IO[i] == true) {
    114e:	2340      	movs	r3, #64	; 0x40
    1150:	18fb      	adds	r3, r7, r3
    1152:	781b      	ldrb	r3, [r3, #0]
    1154:	687a      	ldr	r2, [r7, #4]
    1156:	18d3      	adds	r3, r2, r3
    1158:	7adb      	ldrb	r3, [r3, #11]
    115a:	2b00      	cmp	r3, #0
    115c:	d009      	beq.n	1172 <tc_init+0x292>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    115e:	2340      	movs	r3, #64	; 0x40
    1160:	18fb      	adds	r3, r7, r3
    1162:	781b      	ldrb	r3, [r3, #0]
    1164:	2280      	movs	r2, #128	; 0x80
    1166:	0352      	lsls	r2, r2, #13
    1168:	409a      	lsls	r2, r3
    116a:	0013      	movs	r3, r2
    116c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    116e:	4313      	orrs	r3, r2
    1170:	647b      	str	r3, [r7, #68]	; 0x44
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    1172:	2340      	movs	r3, #64	; 0x40
    1174:	18fb      	adds	r3, r7, r3
    1176:	781a      	ldrb	r2, [r3, #0]
    1178:	2340      	movs	r3, #64	; 0x40
    117a:	18fb      	adds	r3, r7, r3
    117c:	3201      	adds	r2, #1
    117e:	701a      	strb	r2, [r3, #0]
    1180:	2340      	movs	r3, #64	; 0x40
    1182:	18fb      	adds	r3, r7, r3
    1184:	781b      	ldrb	r3, [r3, #0]
    1186:	2b01      	cmp	r3, #1
    1188:	d9e1      	bls.n	114e <tc_init+0x26e>
		}
	}

	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    118a:	687b      	ldr	r3, [r7, #4]
    118c:	785b      	ldrb	r3, [r3, #1]
    118e:	019a      	lsls	r2, r3, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    1190:	687b      	ldr	r3, [r7, #4]
    1192:	789b      	ldrb	r3, [r3, #2]
    1194:	01db      	lsls	r3, r3, #7
    1196:	4313      	orrs	r3, r2
    1198:	001a      	movs	r2, r3
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    119a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    119c:	4313      	orrs	r3, r2
    119e:	647b      	str	r3, [r7, #68]	; 0x44

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    11a0:	46c0      	nop			; (mov r8, r8)
    11a2:	68fb      	ldr	r3, [r7, #12]
    11a4:	0018      	movs	r0, r3
    11a6:	4b35      	ldr	r3, [pc, #212]	; (127c <tc_init+0x39c>)
    11a8:	4798      	blx	r3
    11aa:	1e03      	subs	r3, r0, #0
    11ac:	d1f9      	bne.n	11a2 <tc_init+0x2c2>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    11ae:	68bb      	ldr	r3, [r7, #8]
    11b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    11b2:	601a      	str	r2, [r3, #0]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    11b4:	46c0      	nop			; (mov r8, r8)
    11b6:	68fb      	ldr	r3, [r7, #12]
    11b8:	0018      	movs	r0, r3
    11ba:	4b30      	ldr	r3, [pc, #192]	; (127c <tc_init+0x39c>)
    11bc:	4798      	blx	r3
    11be:	1e03      	subs	r3, r0, #0
    11c0:	d1f9      	bne.n	11b6 <tc_init+0x2d6>
		/* Wait for sync */
	}
	hw->COUNT8.WAVE.reg = config->wave_generation;
    11c2:	687b      	ldr	r3, [r7, #4]
    11c4:	799a      	ldrb	r2, [r3, #6]
    11c6:	68bb      	ldr	r3, [r7, #8]
    11c8:	731a      	strb	r2, [r3, #12]

	/* Set ctrlb register */
	if (config->oneshot) {
    11ca:	687b      	ldr	r3, [r7, #4]
    11cc:	7b5b      	ldrb	r3, [r3, #13]
    11ce:	2b00      	cmp	r3, #0
    11d0:	d003      	beq.n	11da <tc_init+0x2fa>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    11d2:	2343      	movs	r3, #67	; 0x43
    11d4:	18fb      	adds	r3, r7, r3
    11d6:	2204      	movs	r2, #4
    11d8:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
    11da:	687b      	ldr	r3, [r7, #4]
    11dc:	7b9b      	ldrb	r3, [r3, #14]
    11de:	2b00      	cmp	r3, #0
    11e0:	d007      	beq.n	11f2 <tc_init+0x312>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    11e2:	2343      	movs	r3, #67	; 0x43
    11e4:	18fb      	adds	r3, r7, r3
    11e6:	2243      	movs	r2, #67	; 0x43
    11e8:	18ba      	adds	r2, r7, r2
    11ea:	7812      	ldrb	r2, [r2, #0]
    11ec:	2101      	movs	r1, #1
    11ee:	430a      	orrs	r2, r1
    11f0:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    11f2:	46c0      	nop			; (mov r8, r8)
    11f4:	68fb      	ldr	r3, [r7, #12]
    11f6:	0018      	movs	r0, r3
    11f8:	4b20      	ldr	r3, [pc, #128]	; (127c <tc_init+0x39c>)
    11fa:	4798      	blx	r3
    11fc:	1e03      	subs	r3, r0, #0
    11fe:	d1f9      	bne.n	11f4 <tc_init+0x314>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1200:	68bb      	ldr	r3, [r7, #8]
    1202:	22ff      	movs	r2, #255	; 0xff
    1204:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    1206:	2343      	movs	r3, #67	; 0x43
    1208:	18fb      	adds	r3, r7, r3
    120a:	781b      	ldrb	r3, [r3, #0]
    120c:	2b00      	cmp	r3, #0
    120e:	d00b      	beq.n	1228 <tc_init+0x348>
		while (tc_is_syncing(module_inst)) {
    1210:	46c0      	nop			; (mov r8, r8)
    1212:	68fb      	ldr	r3, [r7, #12]
    1214:	0018      	movs	r0, r3
    1216:	4b19      	ldr	r3, [pc, #100]	; (127c <tc_init+0x39c>)
    1218:	4798      	blx	r3
    121a:	1e03      	subs	r3, r0, #0
    121c:	d1f9      	bne.n	1212 <tc_init+0x332>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    121e:	68bb      	ldr	r3, [r7, #8]
    1220:	2243      	movs	r2, #67	; 0x43
    1222:	18ba      	adds	r2, r7, r2
    1224:	7812      	ldrb	r2, [r2, #0]
    1226:	715a      	strb	r2, [r3, #5]
	}

	/* Set drvvtrl register*/
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	7a1a      	ldrb	r2, [r3, #8]
    122c:	68bb      	ldr	r3, [r7, #8]
    122e:	735a      	strb	r2, [r3, #13]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1230:	46c0      	nop			; (mov r8, r8)
    1232:	68fb      	ldr	r3, [r7, #12]
    1234:	0018      	movs	r0, r3
    1236:	4b11      	ldr	r3, [pc, #68]	; (127c <tc_init+0x39c>)
    1238:	4798      	blx	r3
    123a:	1e03      	subs	r3, r0, #0
    123c:	d1f9      	bne.n	1232 <tc_init+0x352>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    123e:	68fb      	ldr	r3, [r7, #12]
    1240:	791b      	ldrb	r3, [r3, #4]
    1242:	2b04      	cmp	r3, #4
    1244:	d01c      	beq.n	1280 <tc_init+0x3a0>
    1246:	2b08      	cmp	r3, #8
    1248:	d100      	bne.n	124c <tc_init+0x36c>
    124a:	e06e      	b.n	132a <tc_init+0x44a>
    124c:	2b00      	cmp	r3, #0
    124e:	d049      	beq.n	12e4 <tc_init+0x404>
    1250:	e08e      	b.n	1370 <tc_init+0x490>
    1252:	46c0      	nop			; (mov r8, r8)
    1254:	00000e95 	.word	0x00000e95
    1258:	00002818 	.word	0x00002818
    125c:	0000281c 	.word	0x0000281c
    1260:	200038bc 	.word	0x200038bc
    1264:	00000e4d 	.word	0x00000e4d
    1268:	00002265 	.word	0x00002265
    126c:	00000df1 	.word	0x00000df1
    1270:	00000dd9 	.word	0x00000dd9
    1274:	00001fb1 	.word	0x00001fb1
    1278:	00001ff1 	.word	0x00001ff1
    127c:	00000e75 	.word	0x00000e75
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    1280:	46c0      	nop			; (mov r8, r8)
    1282:	68fb      	ldr	r3, [r7, #12]
    1284:	0018      	movs	r0, r3
    1286:	4b3d      	ldr	r3, [pc, #244]	; (137c <tc_init+0x49c>)
    1288:	4798      	blx	r3
    128a:	1e03      	subs	r3, r0, #0
    128c:	d1f9      	bne.n	1282 <tc_init+0x3a2>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    128e:	687b      	ldr	r3, [r7, #4]
    1290:	2228      	movs	r2, #40	; 0x28
    1292:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.COUNT.reg =
    1294:	68bb      	ldr	r3, [r7, #8]
    1296:	751a      	strb	r2, [r3, #20]


			while (tc_is_syncing(module_inst)) {
    1298:	46c0      	nop			; (mov r8, r8)
    129a:	68fb      	ldr	r3, [r7, #12]
    129c:	0018      	movs	r0, r3
    129e:	4b37      	ldr	r3, [pc, #220]	; (137c <tc_init+0x49c>)
    12a0:	4798      	blx	r3
    12a2:	1e03      	subs	r3, r0, #0
    12a4:	d1f9      	bne.n	129a <tc_init+0x3ba>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    12a6:	687b      	ldr	r3, [r7, #4]
    12a8:	2229      	movs	r2, #41	; 0x29
    12aa:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.PER.reg =
    12ac:	68bb      	ldr	r3, [r7, #8]
    12ae:	76da      	strb	r2, [r3, #27]

			while (tc_is_syncing(module_inst)) {
    12b0:	46c0      	nop			; (mov r8, r8)
    12b2:	68fb      	ldr	r3, [r7, #12]
    12b4:	0018      	movs	r0, r3
    12b6:	4b31      	ldr	r3, [pc, #196]	; (137c <tc_init+0x49c>)
    12b8:	4798      	blx	r3
    12ba:	1e03      	subs	r3, r0, #0
    12bc:	d1f9      	bne.n	12b2 <tc_init+0x3d2>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	222a      	movs	r2, #42	; 0x2a
    12c2:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[0].reg =
    12c4:	68bb      	ldr	r3, [r7, #8]
    12c6:	771a      	strb	r2, [r3, #28]

			while (tc_is_syncing(module_inst)) {
    12c8:	46c0      	nop			; (mov r8, r8)
    12ca:	68fb      	ldr	r3, [r7, #12]
    12cc:	0018      	movs	r0, r3
    12ce:	4b2b      	ldr	r3, [pc, #172]	; (137c <tc_init+0x49c>)
    12d0:	4798      	blx	r3
    12d2:	1e03      	subs	r3, r0, #0
    12d4:	d1f9      	bne.n	12ca <tc_init+0x3ea>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    12d6:	687b      	ldr	r3, [r7, #4]
    12d8:	222b      	movs	r2, #43	; 0x2b
    12da:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[1].reg =
    12dc:	68bb      	ldr	r3, [r7, #8]
    12de:	775a      	strb	r2, [r3, #29]

			return STATUS_OK;
    12e0:	2300      	movs	r3, #0
    12e2:	e046      	b.n	1372 <tc_init+0x492>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    12e4:	46c0      	nop			; (mov r8, r8)
    12e6:	68fb      	ldr	r3, [r7, #12]
    12e8:	0018      	movs	r0, r3
    12ea:	4b24      	ldr	r3, [pc, #144]	; (137c <tc_init+0x49c>)
    12ec:	4798      	blx	r3
    12ee:	1e03      	subs	r3, r0, #0
    12f0:	d1f9      	bne.n	12e6 <tc_init+0x406>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    12f2:	687b      	ldr	r3, [r7, #4]
    12f4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    12f6:	68bb      	ldr	r3, [r7, #8]
    12f8:	829a      	strh	r2, [r3, #20]

			while (tc_is_syncing(module_inst)) {
    12fa:	46c0      	nop			; (mov r8, r8)
    12fc:	68fb      	ldr	r3, [r7, #12]
    12fe:	0018      	movs	r0, r3
    1300:	4b1e      	ldr	r3, [pc, #120]	; (137c <tc_init+0x49c>)
    1302:	4798      	blx	r3
    1304:	1e03      	subs	r3, r0, #0
    1306:	d1f9      	bne.n	12fc <tc_init+0x41c>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    1308:	687b      	ldr	r3, [r7, #4]
    130a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    130c:	68bb      	ldr	r3, [r7, #8]
    130e:	839a      	strh	r2, [r3, #28]

			while (tc_is_syncing(module_inst)) {
    1310:	46c0      	nop			; (mov r8, r8)
    1312:	68fb      	ldr	r3, [r7, #12]
    1314:	0018      	movs	r0, r3
    1316:	4b19      	ldr	r3, [pc, #100]	; (137c <tc_init+0x49c>)
    1318:	4798      	blx	r3
    131a:	1e03      	subs	r3, r0, #0
    131c:	d1f9      	bne.n	1312 <tc_init+0x432>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    131e:	687b      	ldr	r3, [r7, #4]
    1320:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    1322:	68bb      	ldr	r3, [r7, #8]
    1324:	83da      	strh	r2, [r3, #30]

			return STATUS_OK;
    1326:	2300      	movs	r3, #0
    1328:	e023      	b.n	1372 <tc_init+0x492>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    132a:	46c0      	nop			; (mov r8, r8)
    132c:	68fb      	ldr	r3, [r7, #12]
    132e:	0018      	movs	r0, r3
    1330:	4b12      	ldr	r3, [pc, #72]	; (137c <tc_init+0x49c>)
    1332:	4798      	blx	r3
    1334:	1e03      	subs	r3, r0, #0
    1336:	d1f9      	bne.n	132c <tc_init+0x44c>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    1338:	687b      	ldr	r3, [r7, #4]
    133a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    133c:	68bb      	ldr	r3, [r7, #8]
    133e:	615a      	str	r2, [r3, #20]

			while (tc_is_syncing(module_inst)) {
    1340:	46c0      	nop			; (mov r8, r8)
    1342:	68fb      	ldr	r3, [r7, #12]
    1344:	0018      	movs	r0, r3
    1346:	4b0d      	ldr	r3, [pc, #52]	; (137c <tc_init+0x49c>)
    1348:	4798      	blx	r3
    134a:	1e03      	subs	r3, r0, #0
    134c:	d1f9      	bne.n	1342 <tc_init+0x462>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
    134e:	687b      	ldr	r3, [r7, #4]
    1350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			hw->COUNT32.CC[0].reg =
    1352:	68bb      	ldr	r3, [r7, #8]
    1354:	61da      	str	r2, [r3, #28]

			while (tc_is_syncing(module_inst)) {
    1356:	46c0      	nop			; (mov r8, r8)
    1358:	68fb      	ldr	r3, [r7, #12]
    135a:	0018      	movs	r0, r3
    135c:	4b07      	ldr	r3, [pc, #28]	; (137c <tc_init+0x49c>)
    135e:	4798      	blx	r3
    1360:	1e03      	subs	r3, r0, #0
    1362:	d1f9      	bne.n	1358 <tc_init+0x478>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    1364:	687b      	ldr	r3, [r7, #4]
    1366:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    1368:	68bb      	ldr	r3, [r7, #8]
    136a:	621a      	str	r2, [r3, #32]

			return STATUS_OK;
    136c:	2300      	movs	r3, #0
    136e:	e000      	b.n	1372 <tc_init+0x492>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    1370:	2317      	movs	r3, #23
}
    1372:	0018      	movs	r0, r3
    1374:	46bd      	mov	sp, r7
    1376:	b013      	add	sp, #76	; 0x4c
    1378:	bd90      	pop	{r4, r7, pc}
    137a:	46c0      	nop			; (mov r8, r8)
    137c:	00000e75 	.word	0x00000e75

00001380 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    1380:	b580      	push	{r7, lr}
    1382:	b086      	sub	sp, #24
    1384:	af00      	add	r7, sp, #0
    1386:	60f8      	str	r0, [r7, #12]
    1388:	607a      	str	r2, [r7, #4]
    138a:	230b      	movs	r3, #11
    138c:	18fb      	adds	r3, r7, r3
    138e:	1c0a      	adds	r2, r1, #0
    1390:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    1392:	68fb      	ldr	r3, [r7, #12]
    1394:	681b      	ldr	r3, [r3, #0]
    1396:	617b      	str	r3, [r7, #20]

	while (tc_is_syncing(module_inst)) {
    1398:	46c0      	nop			; (mov r8, r8)
    139a:	68fb      	ldr	r3, [r7, #12]
    139c:	0018      	movs	r0, r3
    139e:	4b38      	ldr	r3, [pc, #224]	; (1480 <tc_set_compare_value+0x100>)
    13a0:	4798      	blx	r3
    13a2:	1e03      	subs	r3, r0, #0
    13a4:	d1f9      	bne.n	139a <tc_set_compare_value+0x1a>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    13a6:	68fb      	ldr	r3, [r7, #12]
    13a8:	791b      	ldrb	r3, [r3, #4]
    13aa:	2b04      	cmp	r3, #4
    13ac:	d004      	beq.n	13b8 <tc_set_compare_value+0x38>
    13ae:	2b08      	cmp	r3, #8
    13b0:	d043      	beq.n	143a <tc_set_compare_value+0xba>
    13b2:	2b00      	cmp	r3, #0
    13b4:	d020      	beq.n	13f8 <tc_set_compare_value+0x78>
    13b6:	e05e      	b.n	1476 <tc_set_compare_value+0xf6>
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
    13b8:	230b      	movs	r3, #11
    13ba:	18fb      	adds	r3, r7, r3
    13bc:	781b      	ldrb	r3, [r3, #0]
    13be:	2b01      	cmp	r3, #1
    13c0:	d81a      	bhi.n	13f8 <tc_set_compare_value+0x78>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				if (module_inst->double_buffering_enabled){
    13c2:	68fb      	ldr	r3, [r7, #12]
    13c4:	7e9b      	ldrb	r3, [r3, #26]
    13c6:	2b00      	cmp	r3, #0
    13c8:	d00b      	beq.n	13e2 <tc_set_compare_value+0x62>
					tc_module->COUNT8.CCBUF[channel_index].reg =
    13ca:	230b      	movs	r3, #11
    13cc:	18fb      	adds	r3, r7, r3
    13ce:	781b      	ldrb	r3, [r3, #0]
							(uint8_t)compare;
    13d0:	687a      	ldr	r2, [r7, #4]
    13d2:	b2d0      	uxtb	r0, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
    13d4:	697a      	ldr	r2, [r7, #20]
    13d6:	2130      	movs	r1, #48	; 0x30
    13d8:	18d3      	adds	r3, r2, r3
    13da:	185b      	adds	r3, r3, r1
    13dc:	1c02      	adds	r2, r0, #0
    13de:	701a      	strb	r2, [r3, #0]
    13e0:	e008      	b.n	13f4 <tc_set_compare_value+0x74>
				} else {
					tc_module->COUNT8.CC[channel_index].reg  =
    13e2:	230b      	movs	r3, #11
    13e4:	18fb      	adds	r3, r7, r3
    13e6:	781b      	ldrb	r3, [r3, #0]
							(uint8_t)compare;
    13e8:	687a      	ldr	r2, [r7, #4]
    13ea:	b2d1      	uxtb	r1, r2
					tc_module->COUNT8.CC[channel_index].reg  =
    13ec:	697a      	ldr	r2, [r7, #20]
    13ee:	18d3      	adds	r3, r2, r3
    13f0:	1c0a      	adds	r2, r1, #0
    13f2:	771a      	strb	r2, [r3, #28]
				}
				return STATUS_OK;
    13f4:	2300      	movs	r3, #0
    13f6:	e03f      	b.n	1478 <tc_set_compare_value+0xf8>
			}
		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
    13f8:	230b      	movs	r3, #11
    13fa:	18fb      	adds	r3, r7, r3
    13fc:	781b      	ldrb	r3, [r3, #0]
    13fe:	2b01      	cmp	r3, #1
    1400:	d81b      	bhi.n	143a <tc_set_compare_value+0xba>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				if (module_inst->double_buffering_enabled){
    1402:	68fb      	ldr	r3, [r7, #12]
    1404:	7e9b      	ldrb	r3, [r3, #26]
    1406:	2b00      	cmp	r3, #0
    1408:	d009      	beq.n	141e <tc_set_compare_value+0x9e>
					tc_module->COUNT16.CCBUF[channel_index].reg =
    140a:	230b      	movs	r3, #11
    140c:	18fb      	adds	r3, r7, r3
    140e:	781a      	ldrb	r2, [r3, #0]
							(uint16_t)compare;
    1410:	687b      	ldr	r3, [r7, #4]
    1412:	b299      	uxth	r1, r3
					tc_module->COUNT16.CCBUF[channel_index].reg =
    1414:	697b      	ldr	r3, [r7, #20]
    1416:	3218      	adds	r2, #24
    1418:	0052      	lsls	r2, r2, #1
    141a:	52d1      	strh	r1, [r2, r3]
    141c:	e00b      	b.n	1436 <tc_set_compare_value+0xb6>
				} else {
					tc_module->COUNT16.CC[channel_index].reg =
    141e:	230b      	movs	r3, #11
    1420:	18fb      	adds	r3, r7, r3
    1422:	781b      	ldrb	r3, [r3, #0]
							(uint16_t)compare;
    1424:	687a      	ldr	r2, [r7, #4]
    1426:	b291      	uxth	r1, r2
					tc_module->COUNT16.CC[channel_index].reg =
    1428:	697a      	ldr	r2, [r7, #20]
    142a:	330c      	adds	r3, #12
    142c:	005b      	lsls	r3, r3, #1
    142e:	18d3      	adds	r3, r2, r3
    1430:	3304      	adds	r3, #4
    1432:	1c0a      	adds	r2, r1, #0
    1434:	801a      	strh	r2, [r3, #0]
				}
				return STATUS_OK;
    1436:	2300      	movs	r3, #0
    1438:	e01e      	b.n	1478 <tc_set_compare_value+0xf8>
			}

		case TC_COUNTER_SIZE_32BIT:
			if (channel_index <
    143a:	230b      	movs	r3, #11
    143c:	18fb      	adds	r3, r7, r3
    143e:	781b      	ldrb	r3, [r3, #0]
    1440:	2b01      	cmp	r3, #1
    1442:	d818      	bhi.n	1476 <tc_set_compare_value+0xf6>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				if (module_inst->double_buffering_enabled){
    1444:	68fb      	ldr	r3, [r7, #12]
    1446:	7e9b      	ldrb	r3, [r3, #26]
    1448:	2b00      	cmp	r3, #0
    144a:	d008      	beq.n	145e <tc_set_compare_value+0xde>
					tc_module->COUNT32.CCBUF[channel_index].reg =
    144c:	230b      	movs	r3, #11
    144e:	18fb      	adds	r3, r7, r3
    1450:	781a      	ldrb	r2, [r3, #0]
    1452:	697b      	ldr	r3, [r7, #20]
    1454:	320c      	adds	r2, #12
    1456:	0092      	lsls	r2, r2, #2
    1458:	6879      	ldr	r1, [r7, #4]
    145a:	50d1      	str	r1, [r2, r3]
    145c:	e009      	b.n	1472 <tc_set_compare_value+0xf2>
							(uint32_t)compare;
				} else {
					tc_module->COUNT32.CC[channel_index].reg =
    145e:	230b      	movs	r3, #11
    1460:	18fb      	adds	r3, r7, r3
    1462:	781b      	ldrb	r3, [r3, #0]
    1464:	697a      	ldr	r2, [r7, #20]
    1466:	3306      	adds	r3, #6
    1468:	009b      	lsls	r3, r3, #2
    146a:	18d3      	adds	r3, r2, r3
    146c:	3304      	adds	r3, #4
    146e:	687a      	ldr	r2, [r7, #4]
    1470:	601a      	str	r2, [r3, #0]
						(uint32_t)compare;
				}
				return STATUS_OK;
    1472:	2300      	movs	r3, #0
    1474:	e000      	b.n	1478 <tc_set_compare_value+0xf8>
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1476:	2317      	movs	r3, #23
}
    1478:	0018      	movs	r0, r3
    147a:	46bd      	mov	sp, r7
    147c:	b006      	add	sp, #24
    147e:	bd80      	pop	{r7, pc}
    1480:	00000e75 	.word	0x00000e75

00001484 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    1484:	b580      	push	{r7, lr}
    1486:	b082      	sub	sp, #8
    1488:	af00      	add	r7, sp, #0
    148a:	0002      	movs	r2, r0
    148c:	1dfb      	adds	r3, r7, #7
    148e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1490:	4b06      	ldr	r3, [pc, #24]	; (14ac <system_interrupt_enable+0x28>)
    1492:	1dfa      	adds	r2, r7, #7
    1494:	7812      	ldrb	r2, [r2, #0]
    1496:	0011      	movs	r1, r2
    1498:	221f      	movs	r2, #31
    149a:	400a      	ands	r2, r1
    149c:	2101      	movs	r1, #1
    149e:	4091      	lsls	r1, r2
    14a0:	000a      	movs	r2, r1
    14a2:	601a      	str	r2, [r3, #0]
}
    14a4:	46c0      	nop			; (mov r8, r8)
    14a6:	46bd      	mov	sp, r7
    14a8:	b002      	add	sp, #8
    14aa:	bd80      	pop	{r7, pc}
    14ac:	e000e100 	.word	0xe000e100

000014b0 <tc_is_syncing>:
{
    14b0:	b580      	push	{r7, lr}
    14b2:	b084      	sub	sp, #16
    14b4:	af00      	add	r7, sp, #0
    14b6:	6078      	str	r0, [r7, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    14b8:	687b      	ldr	r3, [r7, #4]
    14ba:	681b      	ldr	r3, [r3, #0]
    14bc:	60fb      	str	r3, [r7, #12]
	return (tc_module->SYNCBUSY.reg);
    14be:	68fb      	ldr	r3, [r7, #12]
    14c0:	691b      	ldr	r3, [r3, #16]
    14c2:	1e5a      	subs	r2, r3, #1
    14c4:	4193      	sbcs	r3, r2
    14c6:	b2db      	uxtb	r3, r3
}
    14c8:	0018      	movs	r0, r3
    14ca:	46bd      	mov	sp, r7
    14cc:	b004      	add	sp, #16
    14ce:	bd80      	pop	{r7, pc}

000014d0 <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
    14d0:	b580      	push	{r7, lr}
    14d2:	b082      	sub	sp, #8
    14d4:	af00      	add	r7, sp, #0
    14d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    14d8:	687b      	ldr	r3, [r7, #4]
    14da:	2200      	movs	r2, #0
    14dc:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    14de:	687b      	ldr	r3, [r7, #4]
    14e0:	2200      	movs	r2, #0
    14e2:	70da      	strb	r2, [r3, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    14e4:	687b      	ldr	r3, [r7, #4]
    14e6:	2200      	movs	r2, #0
    14e8:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    14ea:	687b      	ldr	r3, [r7, #4]
    14ec:	2200      	movs	r2, #0
    14ee:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    14f0:	687b      	ldr	r3, [r7, #4]
    14f2:	2200      	movs	r2, #0
    14f4:	71da      	strb	r2, [r3, #7]
	config->run_in_standby             = false;
    14f6:	687b      	ldr	r3, [r7, #4]
    14f8:	2200      	movs	r2, #0
    14fa:	705a      	strb	r2, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
    14fc:	687b      	ldr	r3, [r7, #4]
    14fe:	2200      	movs	r2, #0
    1500:	709a      	strb	r2, [r3, #2]
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1502:	687b      	ldr	r3, [r7, #4]
    1504:	2200      	movs	r2, #0
    1506:	721a      	strb	r2, [r3, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    1508:	687b      	ldr	r3, [r7, #4]
    150a:	2200      	movs	r2, #0
    150c:	725a      	strb	r2, [r3, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    150e:	687b      	ldr	r3, [r7, #4]
    1510:	2200      	movs	r2, #0
    1512:	729a      	strb	r2, [r3, #10]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	2200      	movs	r2, #0
    1518:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    151a:	687b      	ldr	r3, [r7, #4]
    151c:	2200      	movs	r2, #0
    151e:	731a      	strb	r2, [r3, #12]
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1520:	687b      	ldr	r3, [r7, #4]
    1522:	2200      	movs	r2, #0
    1524:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
    1526:	687b      	ldr	r3, [r7, #4]
    1528:	2200      	movs	r2, #0
    152a:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    152c:	687b      	ldr	r3, [r7, #4]
    152e:	2200      	movs	r2, #0
    1530:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    1532:	687b      	ldr	r3, [r7, #4]
    1534:	2200      	movs	r2, #0
    1536:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    1538:	687b      	ldr	r3, [r7, #4]
    153a:	2200      	movs	r2, #0
    153c:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    153e:	687b      	ldr	r3, [r7, #4]
    1540:	2200      	movs	r2, #0
    1542:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1544:	687b      	ldr	r3, [r7, #4]
    1546:	2200      	movs	r2, #0
    1548:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    154a:	687b      	ldr	r3, [r7, #4]
    154c:	2200      	movs	r2, #0
    154e:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    1550:	687b      	ldr	r3, [r7, #4]
    1552:	2200      	movs	r2, #0
    1554:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    1556:	687b      	ldr	r3, [r7, #4]
    1558:	2200      	movs	r2, #0
    155a:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    155c:	687b      	ldr	r3, [r7, #4]
    155e:	2200      	movs	r2, #0
    1560:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
    1562:	687b      	ldr	r3, [r7, #4]
    1564:	2234      	movs	r2, #52	; 0x34
    1566:	2100      	movs	r1, #0
    1568:	5499      	strb	r1, [r3, r2]
#endif

}
    156a:	46c0      	nop			; (mov r8, r8)
    156c:	46bd      	mov	sp, r7
    156e:	b002      	add	sp, #8
    1570:	bd80      	pop	{r7, pc}
	...

00001574 <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
    1574:	b580      	push	{r7, lr}
    1576:	b084      	sub	sp, #16
    1578:	af00      	add	r7, sp, #0
    157a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    157c:	687b      	ldr	r3, [r7, #4]
    157e:	681b      	ldr	r3, [r3, #0]
    1580:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    1582:	46c0      	nop			; (mov r8, r8)
    1584:	687b      	ldr	r3, [r7, #4]
    1586:	0018      	movs	r0, r3
    1588:	4b06      	ldr	r3, [pc, #24]	; (15a4 <tc_enable+0x30>)
    158a:	4798      	blx	r3
    158c:	1e03      	subs	r3, r0, #0
    158e:	d1f9      	bne.n	1584 <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1590:	68fb      	ldr	r3, [r7, #12]
    1592:	681b      	ldr	r3, [r3, #0]
    1594:	2202      	movs	r2, #2
    1596:	431a      	orrs	r2, r3
    1598:	68fb      	ldr	r3, [r7, #12]
    159a:	601a      	str	r2, [r3, #0]
}
    159c:	46c0      	nop			; (mov r8, r8)
    159e:	46bd      	mov	sp, r7
    15a0:	b004      	add	sp, #16
    15a2:	bd80      	pop	{r7, pc}
    15a4:	000014b1 	.word	0x000014b1

000015a8 <_tc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TC module instance.
 */
static enum system_interrupt_vector _tc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    15a8:	b580      	push	{r7, lr}
    15aa:	b082      	sub	sp, #8
    15ac:	af00      	add	r7, sp, #0
    15ae:	6078      	str	r0, [r7, #4]
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    15b0:	4a04      	ldr	r2, [pc, #16]	; (15c4 <_tc_interrupt_get_interrupt_vector+0x1c>)
    15b2:	687b      	ldr	r3, [r7, #4]
    15b4:	18d3      	adds	r3, r2, r3
    15b6:	781b      	ldrb	r3, [r3, #0]
    15b8:	b25b      	sxtb	r3, r3
}
    15ba:	0018      	movs	r0, r3
    15bc:	46bd      	mov	sp, r7
    15be:	b002      	add	sp, #8
    15c0:	bd80      	pop	{r7, pc}
    15c2:	46c0      	nop			; (mov r8, r8)
    15c4:	20000004 	.word	0x20000004

000015c8 <tc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void tc_enable_callback(
		struct tc_module *const module,
		const enum tc_callback callback_type)
{
    15c8:	b580      	push	{r7, lr}
    15ca:	b082      	sub	sp, #8
    15cc:	af00      	add	r7, sp, #0
    15ce:	6078      	str	r0, [r7, #4]
    15d0:	000a      	movs	r2, r1
    15d2:	1cfb      	adds	r3, r7, #3
    15d4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    15d6:	687b      	ldr	r3, [r7, #4]
    15d8:	681b      	ldr	r3, [r3, #0]
    15da:	0018      	movs	r0, r3
    15dc:	4b22      	ldr	r3, [pc, #136]	; (1668 <tc_enable_callback+0xa0>)
    15de:	4798      	blx	r3
    15e0:	0003      	movs	r3, r0
    15e2:	0018      	movs	r0, r3
    15e4:	4b21      	ldr	r3, [pc, #132]	; (166c <tc_enable_callback+0xa4>)
    15e6:	4798      	blx	r3
    15e8:	0003      	movs	r3, r0
    15ea:	0018      	movs	r0, r3
    15ec:	4b20      	ldr	r3, [pc, #128]	; (1670 <tc_enable_callback+0xa8>)
    15ee:	4798      	blx	r3

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    15f0:	1cfb      	adds	r3, r7, #3
    15f2:	781b      	ldrb	r3, [r3, #0]
    15f4:	2b02      	cmp	r3, #2
    15f6:	d10b      	bne.n	1610 <tc_enable_callback+0x48>
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    15f8:	687b      	ldr	r3, [r7, #4]
    15fa:	7e5b      	ldrb	r3, [r3, #25]
    15fc:	2210      	movs	r2, #16
    15fe:	4313      	orrs	r3, r2
    1600:	b2da      	uxtb	r2, r3
    1602:	687b      	ldr	r3, [r7, #4]
    1604:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    1606:	687b      	ldr	r3, [r7, #4]
    1608:	681b      	ldr	r3, [r3, #0]
    160a:	2210      	movs	r2, #16
    160c:	725a      	strb	r2, [r3, #9]
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
	}
}
    160e:	e026      	b.n	165e <tc_enable_callback+0x96>
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    1610:	1cfb      	adds	r3, r7, #3
    1612:	781b      	ldrb	r3, [r3, #0]
    1614:	2b03      	cmp	r3, #3
    1616:	d10b      	bne.n	1630 <tc_enable_callback+0x68>
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
    1618:	687b      	ldr	r3, [r7, #4]
    161a:	7e5b      	ldrb	r3, [r3, #25]
    161c:	2220      	movs	r2, #32
    161e:	4313      	orrs	r3, r2
    1620:	b2da      	uxtb	r2, r3
    1622:	687b      	ldr	r3, [r7, #4]
    1624:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
    1626:	687b      	ldr	r3, [r7, #4]
    1628:	681b      	ldr	r3, [r3, #0]
    162a:	2220      	movs	r2, #32
    162c:	725a      	strb	r2, [r3, #9]
}
    162e:	e016      	b.n	165e <tc_enable_callback+0x96>
		module->enable_callback_mask |= (1 << callback_type);
    1630:	687b      	ldr	r3, [r7, #4]
    1632:	7e5b      	ldrb	r3, [r3, #25]
    1634:	b25a      	sxtb	r2, r3
    1636:	1cfb      	adds	r3, r7, #3
    1638:	781b      	ldrb	r3, [r3, #0]
    163a:	2101      	movs	r1, #1
    163c:	4099      	lsls	r1, r3
    163e:	000b      	movs	r3, r1
    1640:	b25b      	sxtb	r3, r3
    1642:	4313      	orrs	r3, r2
    1644:	b25b      	sxtb	r3, r3
    1646:	b2da      	uxtb	r2, r3
    1648:	687b      	ldr	r3, [r7, #4]
    164a:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    164c:	687b      	ldr	r3, [r7, #4]
    164e:	681b      	ldr	r3, [r3, #0]
    1650:	1cfa      	adds	r2, r7, #3
    1652:	7812      	ldrb	r2, [r2, #0]
    1654:	2101      	movs	r1, #1
    1656:	4091      	lsls	r1, r2
    1658:	000a      	movs	r2, r1
    165a:	b2d2      	uxtb	r2, r2
    165c:	725a      	strb	r2, [r3, #9]
}
    165e:	46c0      	nop			; (mov r8, r8)
    1660:	46bd      	mov	sp, r7
    1662:	b002      	add	sp, #8
    1664:	bd80      	pop	{r7, pc}
    1666:	46c0      	nop			; (mov r8, r8)
    1668:	00000e95 	.word	0x00000e95
    166c:	000015a9 	.word	0x000015a9
    1670:	00001485 	.word	0x00001485

00001674 <tc_callback_to_change_duty_cycle>:
//! [module_inst]

//! [callback_funcs]
void tc_callback_to_change_duty_cycle(
		struct tc_module *const module_inst)
{
    1674:	b580      	push	{r7, lr}
    1676:	b082      	sub	sp, #8
    1678:	af00      	add	r7, sp, #0
    167a:	6078      	str	r0, [r7, #4]
	static uint16_t i = 0;

	i += 128;
    167c:	4b09      	ldr	r3, [pc, #36]	; (16a4 <tc_callback_to_change_duty_cycle+0x30>)
    167e:	881b      	ldrh	r3, [r3, #0]
    1680:	3380      	adds	r3, #128	; 0x80
    1682:	b29a      	uxth	r2, r3
    1684:	4b07      	ldr	r3, [pc, #28]	; (16a4 <tc_callback_to_change_duty_cycle+0x30>)
    1686:	801a      	strh	r2, [r3, #0]
	tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, i + 1);
    1688:	4b06      	ldr	r3, [pc, #24]	; (16a4 <tc_callback_to_change_duty_cycle+0x30>)
    168a:	881b      	ldrh	r3, [r3, #0]
    168c:	3301      	adds	r3, #1
    168e:	001a      	movs	r2, r3
    1690:	687b      	ldr	r3, [r7, #4]
    1692:	2100      	movs	r1, #0
    1694:	0018      	movs	r0, r3
    1696:	4b04      	ldr	r3, [pc, #16]	; (16a8 <tc_callback_to_change_duty_cycle+0x34>)
    1698:	4798      	blx	r3
}
    169a:	46c0      	nop			; (mov r8, r8)
    169c:	46bd      	mov	sp, r7
    169e:	b002      	add	sp, #8
    16a0:	bd80      	pop	{r7, pc}
    16a2:	46c0      	nop			; (mov r8, r8)
    16a4:	20003894 	.word	0x20003894
    16a8:	00001381 	.word	0x00001381

000016ac <configure_tc>:
//! [callback_funcs]

//! [setup]
void configure_tc(void)
{
    16ac:	b580      	push	{r7, lr}
    16ae:	b08e      	sub	sp, #56	; 0x38
    16b0:	af00      	add	r7, sp, #0
	//! [setup_config]
	struct tc_config config_tc;
	//! [setup_config]
	//! [setup_config_defaults]
	tc_get_config_defaults(&config_tc);
    16b2:	003b      	movs	r3, r7
    16b4:	0018      	movs	r0, r3
    16b6:	4b11      	ldr	r3, [pc, #68]	; (16fc <configure_tc+0x50>)
    16b8:	4798      	blx	r3
	//! [setup_config_defaults]

	//! [setup_change_config]
	config_tc.counter_size    = TC_COUNTER_SIZE_16BIT;
    16ba:	003b      	movs	r3, r7
    16bc:	2200      	movs	r2, #0
    16be:	70da      	strb	r2, [r3, #3]
	config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
    16c0:	003b      	movs	r3, r7
    16c2:	2202      	movs	r2, #2
    16c4:	719a      	strb	r2, [r3, #6]
	config_tc.counter_16_bit.compare_capture_channel[0] = 0xFFFF;
    16c6:	003b      	movs	r3, r7
    16c8:	2201      	movs	r2, #1
    16ca:	4252      	negs	r2, r2
    16cc:	855a      	strh	r2, [r3, #42]	; 0x2a
	//! [setup_change_config]

	//! [setup_change_config_pwm]
	config_tc.pwm_channel[0].enabled = true;
    16ce:	003b      	movs	r3, r7
    16d0:	2201      	movs	r2, #1
    16d2:	741a      	strb	r2, [r3, #16]
	config_tc.pwm_channel[0].pin_out = PWM_OUT_PIN;
    16d4:	003b      	movs	r3, r7
    16d6:	2230      	movs	r2, #48	; 0x30
    16d8:	615a      	str	r2, [r3, #20]
	config_tc.pwm_channel[0].pin_mux = PWM_OUT_MUX;
    16da:	003b      	movs	r3, r7
    16dc:	2204      	movs	r2, #4
    16de:	619a      	str	r2, [r3, #24]
	//! [setup_change_config_pwm]

	//! [setup_set_config]
	tc_init(&tc_instance, PWM_MODULE, &config_tc);
    16e0:	003a      	movs	r2, r7
    16e2:	4907      	ldr	r1, [pc, #28]	; (1700 <configure_tc+0x54>)
    16e4:	4b07      	ldr	r3, [pc, #28]	; (1704 <configure_tc+0x58>)
    16e6:	0018      	movs	r0, r3
    16e8:	4b07      	ldr	r3, [pc, #28]	; (1708 <configure_tc+0x5c>)
    16ea:	4798      	blx	r3
	//! [setup_set_config]

	//! [setup_enable]
	tc_enable(&tc_instance);
    16ec:	4b05      	ldr	r3, [pc, #20]	; (1704 <configure_tc+0x58>)
    16ee:	0018      	movs	r0, r3
    16f0:	4b06      	ldr	r3, [pc, #24]	; (170c <configure_tc+0x60>)
    16f2:	4798      	blx	r3
	//! [setup_enable]
}
    16f4:	46c0      	nop			; (mov r8, r8)
    16f6:	46bd      	mov	sp, r7
    16f8:	b00e      	add	sp, #56	; 0x38
    16fa:	bd80      	pop	{r7, pc}
    16fc:	000014d1 	.word	0x000014d1
    1700:	42002800 	.word	0x42002800
    1704:	200038cc 	.word	0x200038cc
    1708:	00000ee1 	.word	0x00000ee1
    170c:	00001575 	.word	0x00001575

00001710 <configure_tc_callbacks>:

void configure_tc_callbacks(void)
{
    1710:	b580      	push	{r7, lr}
    1712:	af00      	add	r7, sp, #0
	//! [setup_register_callback]
	tc_register_callback(
    1714:	4906      	ldr	r1, [pc, #24]	; (1730 <configure_tc_callbacks+0x20>)
    1716:	4b07      	ldr	r3, [pc, #28]	; (1734 <configure_tc_callbacks+0x24>)
    1718:	2202      	movs	r2, #2
    171a:	0018      	movs	r0, r3
    171c:	4b06      	ldr	r3, [pc, #24]	; (1738 <configure_tc_callbacks+0x28>)
    171e:	4798      	blx	r3
			tc_callback_to_change_duty_cycle,
			TC_CALLBACK_CC_CHANNEL0);
	//! [setup_register_callback]

	//! [setup_enable_callback]
	tc_enable_callback(&tc_instance, TC_CALLBACK_CC_CHANNEL0);
    1720:	4b04      	ldr	r3, [pc, #16]	; (1734 <configure_tc_callbacks+0x24>)
    1722:	2102      	movs	r1, #2
    1724:	0018      	movs	r0, r3
    1726:	4b05      	ldr	r3, [pc, #20]	; (173c <configure_tc_callbacks+0x2c>)
    1728:	4798      	blx	r3
	//! [setup_enable_callback]
}
    172a:	46c0      	nop			; (mov r8, r8)
    172c:	46bd      	mov	sp, r7
    172e:	bd80      	pop	{r7, pc}
    1730:	00001675 	.word	0x00001675
    1734:	200038cc 	.word	0x200038cc
    1738:	00000c5d 	.word	0x00000c5d
    173c:	000015c9 	.word	0x000015c9

00001740 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    1740:	b580      	push	{r7, lr}
    1742:	b082      	sub	sp, #8
    1744:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    1746:	4b10      	ldr	r3, [pc, #64]	; (1788 <cpu_irq_enter_critical+0x48>)
    1748:	681b      	ldr	r3, [r3, #0]
    174a:	2b00      	cmp	r3, #0
    174c:	d112      	bne.n	1774 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    174e:	f3ef 8310 	mrs	r3, PRIMASK
    1752:	607b      	str	r3, [r7, #4]
  return(result);
    1754:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    1756:	2b00      	cmp	r3, #0
    1758:	d109      	bne.n	176e <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    175a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    175c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1760:	4b0a      	ldr	r3, [pc, #40]	; (178c <cpu_irq_enter_critical+0x4c>)
    1762:	2200      	movs	r2, #0
    1764:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1766:	4b0a      	ldr	r3, [pc, #40]	; (1790 <cpu_irq_enter_critical+0x50>)
    1768:	2201      	movs	r2, #1
    176a:	701a      	strb	r2, [r3, #0]
    176c:	e002      	b.n	1774 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    176e:	4b08      	ldr	r3, [pc, #32]	; (1790 <cpu_irq_enter_critical+0x50>)
    1770:	2200      	movs	r2, #0
    1772:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1774:	4b04      	ldr	r3, [pc, #16]	; (1788 <cpu_irq_enter_critical+0x48>)
    1776:	681b      	ldr	r3, [r3, #0]
    1778:	1c5a      	adds	r2, r3, #1
    177a:	4b03      	ldr	r3, [pc, #12]	; (1788 <cpu_irq_enter_critical+0x48>)
    177c:	601a      	str	r2, [r3, #0]
}
    177e:	46c0      	nop			; (mov r8, r8)
    1780:	46bd      	mov	sp, r7
    1782:	b002      	add	sp, #8
    1784:	bd80      	pop	{r7, pc}
    1786:	46c0      	nop			; (mov r8, r8)
    1788:	20003898 	.word	0x20003898
    178c:	20000008 	.word	0x20000008
    1790:	2000389c 	.word	0x2000389c

00001794 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    1794:	b580      	push	{r7, lr}
    1796:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1798:	4b0b      	ldr	r3, [pc, #44]	; (17c8 <cpu_irq_leave_critical+0x34>)
    179a:	681b      	ldr	r3, [r3, #0]
    179c:	1e5a      	subs	r2, r3, #1
    179e:	4b0a      	ldr	r3, [pc, #40]	; (17c8 <cpu_irq_leave_critical+0x34>)
    17a0:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    17a2:	4b09      	ldr	r3, [pc, #36]	; (17c8 <cpu_irq_leave_critical+0x34>)
    17a4:	681b      	ldr	r3, [r3, #0]
    17a6:	2b00      	cmp	r3, #0
    17a8:	d10a      	bne.n	17c0 <cpu_irq_leave_critical+0x2c>
    17aa:	4b08      	ldr	r3, [pc, #32]	; (17cc <cpu_irq_leave_critical+0x38>)
    17ac:	781b      	ldrb	r3, [r3, #0]
    17ae:	b2db      	uxtb	r3, r3
    17b0:	2b00      	cmp	r3, #0
    17b2:	d005      	beq.n	17c0 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    17b4:	4b06      	ldr	r3, [pc, #24]	; (17d0 <cpu_irq_leave_critical+0x3c>)
    17b6:	2201      	movs	r2, #1
    17b8:	701a      	strb	r2, [r3, #0]
    17ba:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    17be:	b662      	cpsie	i
	}
}
    17c0:	46c0      	nop			; (mov r8, r8)
    17c2:	46bd      	mov	sp, r7
    17c4:	bd80      	pop	{r7, pc}
    17c6:	46c0      	nop			; (mov r8, r8)
    17c8:	20003898 	.word	0x20003898
    17cc:	2000389c 	.word	0x2000389c
    17d0:	20000008 	.word	0x20000008

000017d4 <system_pinmux_get_group_from_gpio_pin>:
{
    17d4:	b580      	push	{r7, lr}
    17d6:	b084      	sub	sp, #16
    17d8:	af00      	add	r7, sp, #0
    17da:	0002      	movs	r2, r0
    17dc:	1dfb      	adds	r3, r7, #7
    17de:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    17e0:	230f      	movs	r3, #15
    17e2:	18fb      	adds	r3, r7, r3
    17e4:	1dfa      	adds	r2, r7, #7
    17e6:	7812      	ldrb	r2, [r2, #0]
    17e8:	09d2      	lsrs	r2, r2, #7
    17ea:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    17ec:	230e      	movs	r3, #14
    17ee:	18fb      	adds	r3, r7, r3
    17f0:	1dfa      	adds	r2, r7, #7
    17f2:	7812      	ldrb	r2, [r2, #0]
    17f4:	0952      	lsrs	r2, r2, #5
    17f6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    17f8:	4b0d      	ldr	r3, [pc, #52]	; (1830 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    17fa:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    17fc:	230f      	movs	r3, #15
    17fe:	18fb      	adds	r3, r7, r3
    1800:	781b      	ldrb	r3, [r3, #0]
    1802:	2b00      	cmp	r3, #0
    1804:	d10f      	bne.n	1826 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1806:	230f      	movs	r3, #15
    1808:	18fb      	adds	r3, r7, r3
    180a:	781b      	ldrb	r3, [r3, #0]
    180c:	009b      	lsls	r3, r3, #2
    180e:	2210      	movs	r2, #16
    1810:	4694      	mov	ip, r2
    1812:	44bc      	add	ip, r7
    1814:	4463      	add	r3, ip
    1816:	3b08      	subs	r3, #8
    1818:	681a      	ldr	r2, [r3, #0]
    181a:	230e      	movs	r3, #14
    181c:	18fb      	adds	r3, r7, r3
    181e:	781b      	ldrb	r3, [r3, #0]
    1820:	01db      	lsls	r3, r3, #7
    1822:	18d3      	adds	r3, r2, r3
    1824:	e000      	b.n	1828 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    1826:	2300      	movs	r3, #0
}
    1828:	0018      	movs	r0, r3
    182a:	46bd      	mov	sp, r7
    182c:	b004      	add	sp, #16
    182e:	bd80      	pop	{r7, pc}
    1830:	41006000 	.word	0x41006000

00001834 <port_get_group_from_gpio_pin>:
{
    1834:	b580      	push	{r7, lr}
    1836:	b082      	sub	sp, #8
    1838:	af00      	add	r7, sp, #0
    183a:	0002      	movs	r2, r0
    183c:	1dfb      	adds	r3, r7, #7
    183e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1840:	1dfb      	adds	r3, r7, #7
    1842:	781b      	ldrb	r3, [r3, #0]
    1844:	0018      	movs	r0, r3
    1846:	4b03      	ldr	r3, [pc, #12]	; (1854 <port_get_group_from_gpio_pin+0x20>)
    1848:	4798      	blx	r3
    184a:	0003      	movs	r3, r0
}
    184c:	0018      	movs	r0, r3
    184e:	46bd      	mov	sp, r7
    1850:	b002      	add	sp, #8
    1852:	bd80      	pop	{r7, pc}
    1854:	000017d5 	.word	0x000017d5

00001858 <port_get_config_defaults>:
{
    1858:	b580      	push	{r7, lr}
    185a:	b082      	sub	sp, #8
    185c:	af00      	add	r7, sp, #0
    185e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    1860:	687b      	ldr	r3, [r7, #4]
    1862:	2200      	movs	r2, #0
    1864:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1866:	687b      	ldr	r3, [r7, #4]
    1868:	2201      	movs	r2, #1
    186a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    186c:	687b      	ldr	r3, [r7, #4]
    186e:	2200      	movs	r2, #0
    1870:	709a      	strb	r2, [r3, #2]
}
    1872:	46c0      	nop			; (mov r8, r8)
    1874:	46bd      	mov	sp, r7
    1876:	b002      	add	sp, #8
    1878:	bd80      	pop	{r7, pc}
	...

0000187c <port_pin_set_output_level>:
{
    187c:	b580      	push	{r7, lr}
    187e:	b084      	sub	sp, #16
    1880:	af00      	add	r7, sp, #0
    1882:	0002      	movs	r2, r0
    1884:	1dfb      	adds	r3, r7, #7
    1886:	701a      	strb	r2, [r3, #0]
    1888:	1dbb      	adds	r3, r7, #6
    188a:	1c0a      	adds	r2, r1, #0
    188c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    188e:	1dfb      	adds	r3, r7, #7
    1890:	781b      	ldrb	r3, [r3, #0]
    1892:	0018      	movs	r0, r3
    1894:	4b0d      	ldr	r3, [pc, #52]	; (18cc <port_pin_set_output_level+0x50>)
    1896:	4798      	blx	r3
    1898:	0003      	movs	r3, r0
    189a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    189c:	1dfb      	adds	r3, r7, #7
    189e:	781b      	ldrb	r3, [r3, #0]
    18a0:	221f      	movs	r2, #31
    18a2:	4013      	ands	r3, r2
    18a4:	2201      	movs	r2, #1
    18a6:	409a      	lsls	r2, r3
    18a8:	0013      	movs	r3, r2
    18aa:	60bb      	str	r3, [r7, #8]
	if (level) {
    18ac:	1dbb      	adds	r3, r7, #6
    18ae:	781b      	ldrb	r3, [r3, #0]
    18b0:	2b00      	cmp	r3, #0
    18b2:	d003      	beq.n	18bc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    18b4:	68fb      	ldr	r3, [r7, #12]
    18b6:	68ba      	ldr	r2, [r7, #8]
    18b8:	619a      	str	r2, [r3, #24]
}
    18ba:	e002      	b.n	18c2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    18bc:	68fb      	ldr	r3, [r7, #12]
    18be:	68ba      	ldr	r2, [r7, #8]
    18c0:	615a      	str	r2, [r3, #20]
}
    18c2:	46c0      	nop			; (mov r8, r8)
    18c4:	46bd      	mov	sp, r7
    18c6:	b004      	add	sp, #16
    18c8:	bd80      	pop	{r7, pc}
    18ca:	46c0      	nop			; (mov r8, r8)
    18cc:	00001835 	.word	0x00001835

000018d0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    18d0:	b580      	push	{r7, lr}
    18d2:	b082      	sub	sp, #8
    18d4:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    18d6:	1d3b      	adds	r3, r7, #4
    18d8:	0018      	movs	r0, r3
    18da:	4b0e      	ldr	r3, [pc, #56]	; (1914 <system_board_init+0x44>)
    18dc:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    18de:	1d3b      	adds	r3, r7, #4
    18e0:	2201      	movs	r2, #1
    18e2:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    18e4:	1d3b      	adds	r3, r7, #4
    18e6:	0019      	movs	r1, r3
    18e8:	205b      	movs	r0, #91	; 0x5b
    18ea:	4b0b      	ldr	r3, [pc, #44]	; (1918 <system_board_init+0x48>)
    18ec:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    18ee:	2101      	movs	r1, #1
    18f0:	205b      	movs	r0, #91	; 0x5b
    18f2:	4b0a      	ldr	r3, [pc, #40]	; (191c <system_board_init+0x4c>)
    18f4:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    18f6:	1d3b      	adds	r3, r7, #4
    18f8:	2200      	movs	r2, #0
    18fa:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    18fc:	1d3b      	adds	r3, r7, #4
    18fe:	2201      	movs	r2, #1
    1900:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1902:	1d3b      	adds	r3, r7, #4
    1904:	0019      	movs	r1, r3
    1906:	2041      	movs	r0, #65	; 0x41
    1908:	4b03      	ldr	r3, [pc, #12]	; (1918 <system_board_init+0x48>)
    190a:	4798      	blx	r3
}
    190c:	46c0      	nop			; (mov r8, r8)
    190e:	46bd      	mov	sp, r7
    1910:	b002      	add	sp, #8
    1912:	bd80      	pop	{r7, pc}
    1914:	00001859 	.word	0x00001859
    1918:	00001949 	.word	0x00001949
    191c:	0000187d 	.word	0x0000187d

00001920 <system_pinmux_get_config_defaults>:
{
    1920:	b580      	push	{r7, lr}
    1922:	b082      	sub	sp, #8
    1924:	af00      	add	r7, sp, #0
    1926:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1928:	687b      	ldr	r3, [r7, #4]
    192a:	2280      	movs	r2, #128	; 0x80
    192c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    192e:	687b      	ldr	r3, [r7, #4]
    1930:	2200      	movs	r2, #0
    1932:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1934:	687b      	ldr	r3, [r7, #4]
    1936:	2201      	movs	r2, #1
    1938:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	2200      	movs	r2, #0
    193e:	70da      	strb	r2, [r3, #3]
}
    1940:	46c0      	nop			; (mov r8, r8)
    1942:	46bd      	mov	sp, r7
    1944:	b002      	add	sp, #8
    1946:	bd80      	pop	{r7, pc}

00001948 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1948:	b580      	push	{r7, lr}
    194a:	b084      	sub	sp, #16
    194c:	af00      	add	r7, sp, #0
    194e:	0002      	movs	r2, r0
    1950:	6039      	str	r1, [r7, #0]
    1952:	1dfb      	adds	r3, r7, #7
    1954:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    1956:	230c      	movs	r3, #12
    1958:	18fb      	adds	r3, r7, r3
    195a:	0018      	movs	r0, r3
    195c:	4b10      	ldr	r3, [pc, #64]	; (19a0 <port_pin_set_config+0x58>)
    195e:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    1960:	230c      	movs	r3, #12
    1962:	18fb      	adds	r3, r7, r3
    1964:	2280      	movs	r2, #128	; 0x80
    1966:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1968:	683b      	ldr	r3, [r7, #0]
    196a:	781a      	ldrb	r2, [r3, #0]
    196c:	230c      	movs	r3, #12
    196e:	18fb      	adds	r3, r7, r3
    1970:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1972:	683b      	ldr	r3, [r7, #0]
    1974:	785a      	ldrb	r2, [r3, #1]
    1976:	230c      	movs	r3, #12
    1978:	18fb      	adds	r3, r7, r3
    197a:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    197c:	683b      	ldr	r3, [r7, #0]
    197e:	789a      	ldrb	r2, [r3, #2]
    1980:	230c      	movs	r3, #12
    1982:	18fb      	adds	r3, r7, r3
    1984:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1986:	230c      	movs	r3, #12
    1988:	18fa      	adds	r2, r7, r3
    198a:	1dfb      	adds	r3, r7, #7
    198c:	781b      	ldrb	r3, [r3, #0]
    198e:	0011      	movs	r1, r2
    1990:	0018      	movs	r0, r3
    1992:	4b04      	ldr	r3, [pc, #16]	; (19a4 <port_pin_set_config+0x5c>)
    1994:	4798      	blx	r3
}
    1996:	46c0      	nop			; (mov r8, r8)
    1998:	46bd      	mov	sp, r7
    199a:	b004      	add	sp, #16
    199c:	bd80      	pop	{r7, pc}
    199e:	46c0      	nop			; (mov r8, r8)
    19a0:	00001921 	.word	0x00001921
    19a4:	00002265 	.word	0x00002265

000019a8 <system_gclk_gen_get_config_defaults>:
{
    19a8:	b580      	push	{r7, lr}
    19aa:	b082      	sub	sp, #8
    19ac:	af00      	add	r7, sp, #0
    19ae:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    19b0:	687b      	ldr	r3, [r7, #4]
    19b2:	2201      	movs	r2, #1
    19b4:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    19b6:	687b      	ldr	r3, [r7, #4]
    19b8:	2200      	movs	r2, #0
    19ba:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    19bc:	687b      	ldr	r3, [r7, #4]
    19be:	2205      	movs	r2, #5
    19c0:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    19c2:	687b      	ldr	r3, [r7, #4]
    19c4:	2200      	movs	r2, #0
    19c6:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    19c8:	687b      	ldr	r3, [r7, #4]
    19ca:	2200      	movs	r2, #0
    19cc:	725a      	strb	r2, [r3, #9]
}
    19ce:	46c0      	nop			; (mov r8, r8)
    19d0:	46bd      	mov	sp, r7
    19d2:	b002      	add	sp, #8
    19d4:	bd80      	pop	{r7, pc}
	...

000019d8 <system_cpu_clock_set_divider>:
{
    19d8:	b580      	push	{r7, lr}
    19da:	b082      	sub	sp, #8
    19dc:	af00      	add	r7, sp, #0
    19de:	0002      	movs	r2, r0
    19e0:	1dfb      	adds	r3, r7, #7
    19e2:	701a      	strb	r2, [r3, #0]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    19e4:	4a05      	ldr	r2, [pc, #20]	; (19fc <system_cpu_clock_set_divider+0x24>)
    19e6:	1dfb      	adds	r3, r7, #7
    19e8:	781b      	ldrb	r3, [r3, #0]
    19ea:	2101      	movs	r1, #1
    19ec:	4099      	lsls	r1, r3
    19ee:	000b      	movs	r3, r1
    19f0:	b2db      	uxtb	r3, r3
    19f2:	7113      	strb	r3, [r2, #4]
}
    19f4:	46c0      	nop			; (mov r8, r8)
    19f6:	46bd      	mov	sp, r7
    19f8:	b002      	add	sp, #8
    19fa:	bd80      	pop	{r7, pc}
    19fc:	40000800 	.word	0x40000800

00001a00 <system_backup_clock_set_divider>:
{
    1a00:	b580      	push	{r7, lr}
    1a02:	b082      	sub	sp, #8
    1a04:	af00      	add	r7, sp, #0
    1a06:	0002      	movs	r2, r0
    1a08:	1dfb      	adds	r3, r7, #7
    1a0a:	701a      	strb	r2, [r3, #0]
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    1a0c:	4a05      	ldr	r2, [pc, #20]	; (1a24 <system_backup_clock_set_divider+0x24>)
    1a0e:	1dfb      	adds	r3, r7, #7
    1a10:	781b      	ldrb	r3, [r3, #0]
    1a12:	2101      	movs	r1, #1
    1a14:	4099      	lsls	r1, r3
    1a16:	000b      	movs	r3, r1
    1a18:	b2db      	uxtb	r3, r3
    1a1a:	7193      	strb	r3, [r2, #6]
}
    1a1c:	46c0      	nop			; (mov r8, r8)
    1a1e:	46bd      	mov	sp, r7
    1a20:	b002      	add	sp, #8
    1a22:	bd80      	pop	{r7, pc}
    1a24:	40000800 	.word	0x40000800

00001a28 <system_cpu_clock_get_hz>:
{
    1a28:	b580      	push	{r7, lr}
    1a2a:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    1a2c:	2000      	movs	r0, #0
    1a2e:	4b07      	ldr	r3, [pc, #28]	; (1a4c <system_cpu_clock_get_hz+0x24>)
    1a30:	4798      	blx	r3
    1a32:	0002      	movs	r2, r0
    1a34:	4b06      	ldr	r3, [pc, #24]	; (1a50 <system_cpu_clock_get_hz+0x28>)
    1a36:	791b      	ldrb	r3, [r3, #4]
    1a38:	b2db      	uxtb	r3, r3
    1a3a:	0019      	movs	r1, r3
    1a3c:	4b05      	ldr	r3, [pc, #20]	; (1a54 <system_cpu_clock_get_hz+0x2c>)
    1a3e:	0010      	movs	r0, r2
    1a40:	4798      	blx	r3
    1a42:	0003      	movs	r3, r0
}
    1a44:	0018      	movs	r0, r3
    1a46:	46bd      	mov	sp, r7
    1a48:	bd80      	pop	{r7, pc}
    1a4a:	46c0      	nop			; (mov r8, r8)
    1a4c:	00001ef1 	.word	0x00001ef1
    1a50:	40000800 	.word	0x40000800
    1a54:	00002699 	.word	0x00002699

00001a58 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    1a58:	b580      	push	{r7, lr}
    1a5a:	b082      	sub	sp, #8
    1a5c:	af00      	add	r7, sp, #0
    1a5e:	0002      	movs	r2, r0
    1a60:	1dfb      	adds	r3, r7, #7
    1a62:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1a64:	4a08      	ldr	r2, [pc, #32]	; (1a88 <system_flash_set_waitstates+0x30>)
    1a66:	1dfb      	adds	r3, r7, #7
    1a68:	781b      	ldrb	r3, [r3, #0]
    1a6a:	210f      	movs	r1, #15
    1a6c:	400b      	ands	r3, r1
    1a6e:	b2d9      	uxtb	r1, r3
    1a70:	6853      	ldr	r3, [r2, #4]
    1a72:	200f      	movs	r0, #15
    1a74:	4001      	ands	r1, r0
    1a76:	0049      	lsls	r1, r1, #1
    1a78:	201e      	movs	r0, #30
    1a7a:	4383      	bics	r3, r0
    1a7c:	430b      	orrs	r3, r1
    1a7e:	6053      	str	r3, [r2, #4]
}
    1a80:	46c0      	nop			; (mov r8, r8)
    1a82:	46bd      	mov	sp, r7
    1a84:	b002      	add	sp, #8
    1a86:	bd80      	pop	{r7, pc}
    1a88:	41004000 	.word	0x41004000

00001a8c <system_switch_performance_level>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid parameter
 * \retval STATUS_OK               Successfully
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{
    1a8c:	b580      	push	{r7, lr}
    1a8e:	b082      	sub	sp, #8
    1a90:	af00      	add	r7, sp, #0
    1a92:	0002      	movs	r2, r0
    1a94:	1dfb      	adds	r3, r7, #7
    1a96:	701a      	strb	r2, [r3, #0]

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    1a98:	4b11      	ldr	r3, [pc, #68]	; (1ae0 <system_switch_performance_level+0x54>)
    1a9a:	789b      	ldrb	r3, [r3, #2]
    1a9c:	b2db      	uxtb	r3, r3
    1a9e:	1dfa      	adds	r2, r7, #7
    1aa0:	7812      	ldrb	r2, [r2, #0]
    1aa2:	429a      	cmp	r2, r3
    1aa4:	d101      	bne.n	1aaa <system_switch_performance_level+0x1e>
		return STATUS_OK;
    1aa6:	2300      	movs	r3, #0
    1aa8:	e015      	b.n	1ad6 <system_switch_performance_level+0x4a>
	}

#if SAML22 || SAML21XXXB
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    1aaa:	4b0d      	ldr	r3, [pc, #52]	; (1ae0 <system_switch_performance_level+0x54>)
    1aac:	789b      	ldrb	r3, [r3, #2]
    1aae:	b2db      	uxtb	r3, r3
    1ab0:	b25b      	sxtb	r3, r3
    1ab2:	2b00      	cmp	r3, #0
    1ab4:	da01      	bge.n	1aba <system_switch_performance_level+0x2e>
		return STATUS_ERR_INVALID_ARG;
    1ab6:	2317      	movs	r3, #23
    1ab8:	e00d      	b.n	1ad6 <system_switch_performance_level+0x4a>
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    1aba:	4b09      	ldr	r3, [pc, #36]	; (1ae0 <system_switch_performance_level+0x54>)
    1abc:	2201      	movs	r2, #1
    1abe:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    1ac0:	4a07      	ldr	r2, [pc, #28]	; (1ae0 <system_switch_performance_level+0x54>)
    1ac2:	1dfb      	adds	r3, r7, #7
    1ac4:	781b      	ldrb	r3, [r3, #0]
    1ac6:	7093      	strb	r3, [r2, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    1ac8:	46c0      	nop			; (mov r8, r8)
    1aca:	4b05      	ldr	r3, [pc, #20]	; (1ae0 <system_switch_performance_level+0x54>)
    1acc:	799b      	ldrb	r3, [r3, #6]
    1ace:	b2db      	uxtb	r3, r3
    1ad0:	2b00      	cmp	r3, #0
    1ad2:	d0fa      	beq.n	1aca <system_switch_performance_level+0x3e>
		;
	}
	return STATUS_OK;
    1ad4:	2300      	movs	r3, #0
}
    1ad6:	0018      	movs	r0, r3
    1ad8:	46bd      	mov	sp, r7
    1ada:	b002      	add	sp, #8
    1adc:	bd80      	pop	{r7, pc}
    1ade:	46c0      	nop			; (mov r8, r8)
    1ae0:	40000400 	.word	0x40000400

00001ae4 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    1ae4:	b580      	push	{r7, lr}
    1ae6:	af00      	add	r7, sp, #0
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    1ae8:	46c0      	nop			; (mov r8, r8)
    1aea:	4b04      	ldr	r3, [pc, #16]	; (1afc <_system_dfll_wait_for_sync+0x18>)
    1aec:	68da      	ldr	r2, [r3, #12]
    1aee:	2380      	movs	r3, #128	; 0x80
    1af0:	005b      	lsls	r3, r3, #1
    1af2:	4013      	ands	r3, r2
    1af4:	d0f9      	beq.n	1aea <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    1af6:	46c0      	nop			; (mov r8, r8)
    1af8:	46bd      	mov	sp, r7
    1afa:	bd80      	pop	{r7, pc}
    1afc:	40001000 	.word	0x40001000

00001b00 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1b00:	b580      	push	{r7, lr}
    1b02:	b082      	sub	sp, #8
    1b04:	af00      	add	r7, sp, #0
    1b06:	0002      	movs	r2, r0
    1b08:	1dfb      	adds	r3, r7, #7
    1b0a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    1b0c:	1dfb      	adds	r3, r7, #7
    1b0e:	781b      	ldrb	r3, [r3, #0]
    1b10:	2b07      	cmp	r3, #7
    1b12:	d83f      	bhi.n	1b94 <system_clock_source_get_hz+0x94>
    1b14:	009a      	lsls	r2, r3, #2
    1b16:	4b22      	ldr	r3, [pc, #136]	; (1ba0 <system_clock_source_get_hz+0xa0>)
    1b18:	18d3      	adds	r3, r2, r3
    1b1a:	681b      	ldr	r3, [r3, #0]
    1b1c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1b1e:	4b21      	ldr	r3, [pc, #132]	; (1ba4 <system_clock_source_get_hz+0xa4>)
    1b20:	691b      	ldr	r3, [r3, #16]
    1b22:	e038      	b.n	1b96 <system_clock_source_get_hz+0x96>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    1b24:	4b20      	ldr	r3, [pc, #128]	; (1ba8 <system_clock_source_get_hz+0xa8>)
    1b26:	7d1b      	ldrb	r3, [r3, #20]
    1b28:	071b      	lsls	r3, r3, #28
    1b2a:	0f9b      	lsrs	r3, r3, #30
    1b2c:	b2db      	uxtb	r3, r3
    1b2e:	3301      	adds	r3, #1
    1b30:	001a      	movs	r2, r3
    1b32:	4b1e      	ldr	r3, [pc, #120]	; (1bac <system_clock_source_get_hz+0xac>)
    1b34:	4353      	muls	r3, r2
    1b36:	e02e      	b.n	1b96 <system_clock_source_get_hz+0x96>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    1b38:	2380      	movs	r3, #128	; 0x80
    1b3a:	021b      	lsls	r3, r3, #8
    1b3c:	e02b      	b.n	1b96 <system_clock_source_get_hz+0x96>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1b3e:	4b19      	ldr	r3, [pc, #100]	; (1ba4 <system_clock_source_get_hz+0xa4>)
    1b40:	695b      	ldr	r3, [r3, #20]
    1b42:	e028      	b.n	1b96 <system_clock_source_get_hz+0x96>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    1b44:	4b17      	ldr	r3, [pc, #92]	; (1ba4 <system_clock_source_get_hz+0xa4>)
    1b46:	681b      	ldr	r3, [r3, #0]
    1b48:	2202      	movs	r2, #2
    1b4a:	4013      	ands	r3, r2
    1b4c:	d101      	bne.n	1b52 <system_clock_source_get_hz+0x52>
			return 0;
    1b4e:	2300      	movs	r3, #0
    1b50:	e021      	b.n	1b96 <system_clock_source_get_hz+0x96>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    1b52:	4b17      	ldr	r3, [pc, #92]	; (1bb0 <system_clock_source_get_hz+0xb0>)
    1b54:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    1b56:	4b13      	ldr	r3, [pc, #76]	; (1ba4 <system_clock_source_get_hz+0xa4>)
    1b58:	681b      	ldr	r3, [r3, #0]
    1b5a:	2224      	movs	r2, #36	; 0x24
    1b5c:	4013      	ands	r3, r2
    1b5e:	2b04      	cmp	r3, #4
    1b60:	d109      	bne.n	1b76 <system_clock_source_get_hz+0x76>
				(OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_USBCRM)) {
		case OSCCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    1b62:	2000      	movs	r0, #0
    1b64:	4b13      	ldr	r3, [pc, #76]	; (1bb4 <system_clock_source_get_hz+0xb4>)
    1b66:	4798      	blx	r3
    1b68:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    1b6a:	4b0e      	ldr	r3, [pc, #56]	; (1ba4 <system_clock_source_get_hz+0xa4>)
    1b6c:	689b      	ldr	r3, [r3, #8]
    1b6e:	041b      	lsls	r3, r3, #16
    1b70:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    1b72:	4353      	muls	r3, r2
    1b74:	e00f      	b.n	1b96 <system_clock_source_get_hz+0x96>
		default:
			return 48000000UL;
    1b76:	4b10      	ldr	r3, [pc, #64]	; (1bb8 <system_clock_source_get_hz+0xb8>)
    1b78:	e00d      	b.n	1b96 <system_clock_source_get_hz+0x96>
		}

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    1b7a:	4a0b      	ldr	r2, [pc, #44]	; (1ba8 <system_clock_source_get_hz+0xa8>)
    1b7c:	2328      	movs	r3, #40	; 0x28
    1b7e:	5cd3      	ldrb	r3, [r2, r3]
    1b80:	b2db      	uxtb	r3, r3
    1b82:	001a      	movs	r2, r3
    1b84:	2302      	movs	r3, #2
    1b86:	4013      	ands	r3, r2
    1b88:	d101      	bne.n	1b8e <system_clock_source_get_hz+0x8e>
			return 0;
    1b8a:	2300      	movs	r3, #0
    1b8c:	e003      	b.n	1b96 <system_clock_source_get_hz+0x96>
		}

		return _system_clock_inst.dpll.frequency;
    1b8e:	4b05      	ldr	r3, [pc, #20]	; (1ba4 <system_clock_source_get_hz+0xa4>)
    1b90:	68db      	ldr	r3, [r3, #12]
    1b92:	e000      	b.n	1b96 <system_clock_source_get_hz+0x96>

	default:
		return 0;
    1b94:	2300      	movs	r3, #0
	}
}
    1b96:	0018      	movs	r0, r3
    1b98:	46bd      	mov	sp, r7
    1b9a:	b002      	add	sp, #8
    1b9c:	bd80      	pop	{r7, pc}
    1b9e:	46c0      	nop			; (mov r8, r8)
    1ba0:	0000283c 	.word	0x0000283c
    1ba4:	200038a0 	.word	0x200038a0
    1ba8:	40001000 	.word	0x40001000
    1bac:	003d0900 	.word	0x003d0900
    1bb0:	00001ae5 	.word	0x00001ae5
    1bb4:	000020a1 	.word	0x000020a1
    1bb8:	02dc6c00 	.word	0x02dc6c00

00001bbc <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1bbc:	b580      	push	{r7, lr}
    1bbe:	b094      	sub	sp, #80	; 0x50
    1bc0:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    1bc2:	4b28      	ldr	r3, [pc, #160]	; (1c64 <system_clock_init+0xa8>)
    1bc4:	2280      	movs	r2, #128	; 0x80
    1bc6:	0052      	lsls	r2, r2, #1
    1bc8:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    1bca:	4b27      	ldr	r3, [pc, #156]	; (1c68 <system_clock_init+0xac>)
    1bcc:	2203      	movs	r2, #3
    1bce:	609a      	str	r2, [r3, #8]

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    1bd0:	2000      	movs	r0, #0
    1bd2:	4b26      	ldr	r3, [pc, #152]	; (1c6c <system_clock_init+0xb0>)
    1bd4:	4798      	blx	r3

	/*  Switch to PL2 to be sure configuration of GCLK0 is safe */
	system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_2);
    1bd6:	2002      	movs	r0, #2
    1bd8:	4b25      	ldr	r3, [pc, #148]	; (1c70 <system_clock_init+0xb4>)
    1bda:	4798      	blx	r3
	}
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
    1bdc:	4a21      	ldr	r2, [pc, #132]	; (1c64 <system_clock_init+0xa8>)
    1bde:	7d13      	ldrb	r3, [r2, #20]
    1be0:	2180      	movs	r1, #128	; 0x80
    1be2:	4249      	negs	r1, r1
    1be4:	430b      	orrs	r3, r1
    1be6:	7513      	strb	r3, [r2, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
    1be8:	4a1e      	ldr	r2, [pc, #120]	; (1c64 <system_clock_init+0xa8>)
    1bea:	7d13      	ldrb	r3, [r2, #20]
    1bec:	2140      	movs	r1, #64	; 0x40
    1bee:	438b      	bics	r3, r1
    1bf0:	7513      	strb	r3, [r2, #20]
	} else {
		_system_clock_source_osc16m_freq_sel();
	}

	uint32_t mask = OSC32KCTRL->OSCULP32K.reg & (~(OSC32KCTRL_OSCULP32K_EN32K | OSC32KCTRL_OSCULP32K_EN1K));
    1bf2:	4b20      	ldr	r3, [pc, #128]	; (1c74 <system_clock_init+0xb8>)
    1bf4:	69db      	ldr	r3, [r3, #28]
    1bf6:	2206      	movs	r2, #6
    1bf8:	4393      	bics	r3, r2
    1bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
	OSC32KCTRL->OSCULP32K.reg = mask | (CONF_CLOCK_OSCULP32K_ENABLE_1KHZ_OUTPUT << OSC32KCTRL_OSCULP32K_EN1K_Pos)
    1bfc:	4b1d      	ldr	r3, [pc, #116]	; (1c74 <system_clock_init+0xb8>)
									 | (CONF_CLOCK_OSCULP32K_ENABLE_32KHZ_OUTPUT << OSC32KCTRL_OSCULP32K_EN32K_Pos);
    1bfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    1c00:	2106      	movs	r1, #6
    1c02:	430a      	orrs	r2, r1
	OSC32KCTRL->OSCULP32K.reg = mask | (CONF_CLOCK_OSCULP32K_ENABLE_1KHZ_OUTPUT << OSC32KCTRL_OSCULP32K_EN1K_Pos)
    1c04:	61da      	str	r2, [r3, #28]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1c06:	4b1c      	ldr	r3, [pc, #112]	; (1c78 <system_clock_init+0xbc>)
    1c08:	4798      	blx	r3
	}

#  endif

	/* CPU and BUS clocks */
	system_backup_clock_set_divider(CONF_CLOCK_BACKUP_DIVIDER);
    1c0a:	2000      	movs	r0, #0
    1c0c:	4b1b      	ldr	r3, [pc, #108]	; (1c7c <system_clock_init+0xc0>)
    1c0e:	4798      	blx	r3
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    1c10:	2000      	movs	r0, #0
    1c12:	4b1b      	ldr	r3, [pc, #108]	; (1c80 <system_clock_init+0xc4>)
    1c14:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1c16:	003b      	movs	r3, r7
    1c18:	0018      	movs	r0, r3
    1c1a:	4b1a      	ldr	r3, [pc, #104]	; (1c84 <system_clock_init+0xc8>)
    1c1c:	4798      	blx	r3
    1c1e:	003b      	movs	r3, r7
    1c20:	2205      	movs	r2, #5
    1c22:	701a      	strb	r2, [r3, #0]
    1c24:	003b      	movs	r3, r7
    1c26:	2201      	movs	r2, #1
    1c28:	605a      	str	r2, [r3, #4]
    1c2a:	003b      	movs	r3, r7
    1c2c:	2200      	movs	r2, #0
    1c2e:	721a      	strb	r2, [r3, #8]
    1c30:	003b      	movs	r3, r7
    1c32:	2200      	movs	r2, #0
    1c34:	725a      	strb	r2, [r3, #9]
    1c36:	003b      	movs	r3, r7
    1c38:	0019      	movs	r1, r3
    1c3a:	2000      	movs	r0, #0
    1c3c:	4b12      	ldr	r3, [pc, #72]	; (1c88 <system_clock_init+0xcc>)
    1c3e:	4798      	blx	r3
    1c40:	2000      	movs	r0, #0
    1c42:	4b12      	ldr	r3, [pc, #72]	; (1c8c <system_clock_init+0xd0>)
    1c44:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 8MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
    1c46:	4b12      	ldr	r3, [pc, #72]	; (1c90 <system_clock_init+0xd4>)
    1c48:	4798      	blx	r3
    1c4a:	0003      	movs	r3, r0
    1c4c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (cpu_freq <= 8000000) {
    1c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1c50:	4a10      	ldr	r2, [pc, #64]	; (1c94 <system_clock_init+0xd8>)
    1c52:	4293      	cmp	r3, r2
    1c54:	d802      	bhi.n	1c5c <system_clock_init+0xa0>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
    1c56:	2000      	movs	r0, #0
    1c58:	4b05      	ldr	r3, [pc, #20]	; (1c70 <system_clock_init+0xb4>)
    1c5a:	4798      	blx	r3
	}
}
    1c5c:	46c0      	nop			; (mov r8, r8)
    1c5e:	46bd      	mov	sp, r7
    1c60:	b014      	add	sp, #80	; 0x50
    1c62:	bd80      	pop	{r7, pc}
    1c64:	40001000 	.word	0x40001000
    1c68:	40001800 	.word	0x40001800
    1c6c:	00001a59 	.word	0x00001a59
    1c70:	00001a8d 	.word	0x00001a8d
    1c74:	40001400 	.word	0x40001400
    1c78:	00001d55 	.word	0x00001d55
    1c7c:	00001a01 	.word	0x00001a01
    1c80:	000019d9 	.word	0x000019d9
    1c84:	000019a9 	.word	0x000019a9
    1c88:	00001d85 	.word	0x00001d85
    1c8c:	00001e95 	.word	0x00001e95
    1c90:	00001a29 	.word	0x00001a29
    1c94:	007a1200 	.word	0x007a1200

00001c98 <system_apb_clock_set_mask>:
{
    1c98:	b580      	push	{r7, lr}
    1c9a:	b082      	sub	sp, #8
    1c9c:	af00      	add	r7, sp, #0
    1c9e:	0002      	movs	r2, r0
    1ca0:	6039      	str	r1, [r7, #0]
    1ca2:	1dfb      	adds	r3, r7, #7
    1ca4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1ca6:	1dfb      	adds	r3, r7, #7
    1ca8:	781b      	ldrb	r3, [r3, #0]
    1caa:	2b01      	cmp	r3, #1
    1cac:	d00a      	beq.n	1cc4 <system_apb_clock_set_mask+0x2c>
    1cae:	2b02      	cmp	r3, #2
    1cb0:	d00f      	beq.n	1cd2 <system_apb_clock_set_mask+0x3a>
    1cb2:	2b00      	cmp	r3, #0
    1cb4:	d114      	bne.n	1ce0 <system_apb_clock_set_mask+0x48>
			MCLK->APBAMASK.reg |= mask;
    1cb6:	4b0e      	ldr	r3, [pc, #56]	; (1cf0 <system_apb_clock_set_mask+0x58>)
    1cb8:	4a0d      	ldr	r2, [pc, #52]	; (1cf0 <system_apb_clock_set_mask+0x58>)
    1cba:	6951      	ldr	r1, [r2, #20]
    1cbc:	683a      	ldr	r2, [r7, #0]
    1cbe:	430a      	orrs	r2, r1
    1cc0:	615a      	str	r2, [r3, #20]
			break;
    1cc2:	e00f      	b.n	1ce4 <system_apb_clock_set_mask+0x4c>
			MCLK->APBBMASK.reg |= mask;
    1cc4:	4b0a      	ldr	r3, [pc, #40]	; (1cf0 <system_apb_clock_set_mask+0x58>)
    1cc6:	4a0a      	ldr	r2, [pc, #40]	; (1cf0 <system_apb_clock_set_mask+0x58>)
    1cc8:	6991      	ldr	r1, [r2, #24]
    1cca:	683a      	ldr	r2, [r7, #0]
    1ccc:	430a      	orrs	r2, r1
    1cce:	619a      	str	r2, [r3, #24]
			break;
    1cd0:	e008      	b.n	1ce4 <system_apb_clock_set_mask+0x4c>
			MCLK->APBCMASK.reg |= mask;
    1cd2:	4b07      	ldr	r3, [pc, #28]	; (1cf0 <system_apb_clock_set_mask+0x58>)
    1cd4:	4a06      	ldr	r2, [pc, #24]	; (1cf0 <system_apb_clock_set_mask+0x58>)
    1cd6:	69d1      	ldr	r1, [r2, #28]
    1cd8:	683a      	ldr	r2, [r7, #0]
    1cda:	430a      	orrs	r2, r1
    1cdc:	61da      	str	r2, [r3, #28]
			break;
    1cde:	e001      	b.n	1ce4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    1ce0:	2317      	movs	r3, #23
    1ce2:	e000      	b.n	1ce6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    1ce4:	2300      	movs	r3, #0
}
    1ce6:	0018      	movs	r0, r3
    1ce8:	46bd      	mov	sp, r7
    1cea:	b002      	add	sp, #8
    1cec:	bd80      	pop	{r7, pc}
    1cee:	46c0      	nop			; (mov r8, r8)
    1cf0:	40000800 	.word	0x40000800

00001cf4 <system_interrupt_enter_critical_section>:
{
    1cf4:	b580      	push	{r7, lr}
    1cf6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    1cf8:	4b02      	ldr	r3, [pc, #8]	; (1d04 <system_interrupt_enter_critical_section+0x10>)
    1cfa:	4798      	blx	r3
}
    1cfc:	46c0      	nop			; (mov r8, r8)
    1cfe:	46bd      	mov	sp, r7
    1d00:	bd80      	pop	{r7, pc}
    1d02:	46c0      	nop			; (mov r8, r8)
    1d04:	00001741 	.word	0x00001741

00001d08 <system_interrupt_leave_critical_section>:
{
    1d08:	b580      	push	{r7, lr}
    1d0a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    1d0c:	4b02      	ldr	r3, [pc, #8]	; (1d18 <system_interrupt_leave_critical_section+0x10>)
    1d0e:	4798      	blx	r3
}
    1d10:	46c0      	nop			; (mov r8, r8)
    1d12:	46bd      	mov	sp, r7
    1d14:	bd80      	pop	{r7, pc}
    1d16:	46c0      	nop			; (mov r8, r8)
    1d18:	00001795 	.word	0x00001795

00001d1c <system_gclk_is_syncing>:
  *
  * \retval false if the module has completed synchronization
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{
    1d1c:	b580      	push	{r7, lr}
    1d1e:	b082      	sub	sp, #8
    1d20:	af00      	add	r7, sp, #0
    1d22:	0002      	movs	r2, r0
    1d24:	1dfb      	adds	r3, r7, #7
    1d26:	701a      	strb	r2, [r3, #0]

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1d28:	4b09      	ldr	r3, [pc, #36]	; (1d50 <system_gclk_is_syncing+0x34>)
    1d2a:	685b      	ldr	r3, [r3, #4]
    1d2c:	1dfa      	adds	r2, r7, #7
    1d2e:	7812      	ldrb	r2, [r2, #0]
    1d30:	2101      	movs	r1, #1
    1d32:	4091      	lsls	r1, r2
    1d34:	000a      	movs	r2, r1
    1d36:	0092      	lsls	r2, r2, #2
    1d38:	4013      	ands	r3, r2
    1d3a:	227c      	movs	r2, #124	; 0x7c
    1d3c:	4013      	ands	r3, r2
    1d3e:	d001      	beq.n	1d44 <system_gclk_is_syncing+0x28>
		 return true;
    1d40:	2301      	movs	r3, #1
    1d42:	e000      	b.n	1d46 <system_gclk_is_syncing+0x2a>
	}

	 return false;
    1d44:	2300      	movs	r3, #0
}
    1d46:	0018      	movs	r0, r3
    1d48:	46bd      	mov	sp, r7
    1d4a:	b002      	add	sp, #8
    1d4c:	bd80      	pop	{r7, pc}
    1d4e:	46c0      	nop			; (mov r8, r8)
    1d50:	40001c00 	.word	0x40001c00

00001d54 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    1d54:	b580      	push	{r7, lr}
    1d56:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);
    1d58:	2180      	movs	r1, #128	; 0x80
    1d5a:	2000      	movs	r0, #0
    1d5c:	4b07      	ldr	r3, [pc, #28]	; (1d7c <system_gclk_init+0x28>)
    1d5e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    1d60:	4b07      	ldr	r3, [pc, #28]	; (1d80 <system_gclk_init+0x2c>)
    1d62:	2201      	movs	r2, #1
    1d64:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    1d66:	46c0      	nop			; (mov r8, r8)
    1d68:	4b05      	ldr	r3, [pc, #20]	; (1d80 <system_gclk_init+0x2c>)
    1d6a:	781b      	ldrb	r3, [r3, #0]
    1d6c:	b2db      	uxtb	r3, r3
    1d6e:	001a      	movs	r2, r3
    1d70:	2301      	movs	r3, #1
    1d72:	4013      	ands	r3, r2
    1d74:	d1f8      	bne.n	1d68 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    1d76:	46c0      	nop			; (mov r8, r8)
    1d78:	46bd      	mov	sp, r7
    1d7a:	bd80      	pop	{r7, pc}
    1d7c:	00001c99 	.word	0x00001c99
    1d80:	40001c00 	.word	0x40001c00

00001d84 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1d84:	b580      	push	{r7, lr}
    1d86:	b086      	sub	sp, #24
    1d88:	af00      	add	r7, sp, #0
    1d8a:	0002      	movs	r2, r0
    1d8c:	6039      	str	r1, [r7, #0]
    1d8e:	1dfb      	adds	r3, r7, #7
    1d90:	701a      	strb	r2, [r3, #0]
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1d92:	683b      	ldr	r3, [r7, #0]
    1d94:	781b      	ldrb	r3, [r3, #0]
    1d96:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1d98:	683b      	ldr	r3, [r7, #0]
    1d9a:	785b      	ldrb	r3, [r3, #1]
    1d9c:	2b00      	cmp	r3, #0
    1d9e:	d004      	beq.n	1daa <system_gclk_gen_set_config+0x26>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1da0:	697b      	ldr	r3, [r7, #20]
    1da2:	2280      	movs	r2, #128	; 0x80
    1da4:	00d2      	lsls	r2, r2, #3
    1da6:	4313      	orrs	r3, r2
    1da8:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1daa:	683b      	ldr	r3, [r7, #0]
    1dac:	7a5b      	ldrb	r3, [r3, #9]
    1dae:	2b00      	cmp	r3, #0
    1db0:	d004      	beq.n	1dbc <system_gclk_gen_set_config+0x38>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1db2:	697b      	ldr	r3, [r7, #20]
    1db4:	2280      	movs	r2, #128	; 0x80
    1db6:	0112      	lsls	r2, r2, #4
    1db8:	4313      	orrs	r3, r2
    1dba:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1dbc:	683b      	ldr	r3, [r7, #0]
    1dbe:	685b      	ldr	r3, [r3, #4]
    1dc0:	2b01      	cmp	r3, #1
    1dc2:	d92c      	bls.n	1e1e <system_gclk_gen_set_config+0x9a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1dc4:	683b      	ldr	r3, [r7, #0]
    1dc6:	685a      	ldr	r2, [r3, #4]
    1dc8:	683b      	ldr	r3, [r7, #0]
    1dca:	685b      	ldr	r3, [r3, #4]
    1dcc:	3b01      	subs	r3, #1
    1dce:	4013      	ands	r3, r2
    1dd0:	d11a      	bne.n	1e08 <system_gclk_gen_set_config+0x84>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    1dd2:	2300      	movs	r3, #0
    1dd4:	613b      	str	r3, [r7, #16]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1dd6:	2302      	movs	r3, #2
    1dd8:	60fb      	str	r3, [r7, #12]
    1dda:	e005      	b.n	1de8 <system_gclk_gen_set_config+0x64>
						mask <<= 1) {
				div2_count++;
    1ddc:	693b      	ldr	r3, [r7, #16]
    1dde:	3301      	adds	r3, #1
    1de0:	613b      	str	r3, [r7, #16]
						mask <<= 1) {
    1de2:	68fb      	ldr	r3, [r7, #12]
    1de4:	005b      	lsls	r3, r3, #1
    1de6:	60fb      	str	r3, [r7, #12]
			for (mask = (1UL << 1); mask < config->division_factor;
    1de8:	683b      	ldr	r3, [r7, #0]
    1dea:	685a      	ldr	r2, [r3, #4]
    1dec:	68fb      	ldr	r3, [r7, #12]
    1dee:	429a      	cmp	r2, r3
    1df0:	d8f4      	bhi.n	1ddc <system_gclk_gen_set_config+0x58>
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    1df2:	693b      	ldr	r3, [r7, #16]
    1df4:	041b      	lsls	r3, r3, #16
    1df6:	697a      	ldr	r2, [r7, #20]
    1df8:	4313      	orrs	r3, r2
    1dfa:	617b      	str	r3, [r7, #20]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1dfc:	697b      	ldr	r3, [r7, #20]
    1dfe:	2280      	movs	r2, #128	; 0x80
    1e00:	0152      	lsls	r2, r2, #5
    1e02:	4313      	orrs	r3, r2
    1e04:	617b      	str	r3, [r7, #20]
    1e06:	e00a      	b.n	1e1e <system_gclk_gen_set_config+0x9a>
		} else {
			/* Set integer division factor */

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    1e08:	683b      	ldr	r3, [r7, #0]
    1e0a:	685b      	ldr	r3, [r3, #4]
    1e0c:	041b      	lsls	r3, r3, #16
			new_genctrl_config  |=
    1e0e:	697a      	ldr	r2, [r7, #20]
    1e10:	4313      	orrs	r3, r2
    1e12:	617b      	str	r3, [r7, #20]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1e14:	697b      	ldr	r3, [r7, #20]
    1e16:	2280      	movs	r2, #128	; 0x80
    1e18:	0092      	lsls	r2, r2, #2
    1e1a:	4313      	orrs	r3, r2
    1e1c:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1e1e:	683b      	ldr	r3, [r7, #0]
    1e20:	7a1b      	ldrb	r3, [r3, #8]
    1e22:	2b00      	cmp	r3, #0
    1e24:	d004      	beq.n	1e30 <system_gclk_gen_set_config+0xac>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1e26:	697b      	ldr	r3, [r7, #20]
    1e28:	2280      	movs	r2, #128	; 0x80
    1e2a:	0192      	lsls	r2, r2, #6
    1e2c:	4313      	orrs	r3, r2
    1e2e:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing(generator)) {
    1e30:	46c0      	nop			; (mov r8, r8)
    1e32:	1dfb      	adds	r3, r7, #7
    1e34:	781b      	ldrb	r3, [r3, #0]
    1e36:	0018      	movs	r0, r3
    1e38:	4b12      	ldr	r3, [pc, #72]	; (1e84 <system_gclk_gen_set_config+0x100>)
    1e3a:	4798      	blx	r3
    1e3c:	1e03      	subs	r3, r0, #0
    1e3e:	d1f8      	bne.n	1e32 <system_gclk_gen_set_config+0xae>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    1e40:	4b11      	ldr	r3, [pc, #68]	; (1e88 <system_gclk_gen_set_config+0x104>)
    1e42:	4798      	blx	r3

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    1e44:	4811      	ldr	r0, [pc, #68]	; (1e8c <system_gclk_gen_set_config+0x108>)
    1e46:	1dfb      	adds	r3, r7, #7
    1e48:	781b      	ldrb	r3, [r3, #0]
    1e4a:	4910      	ldr	r1, [pc, #64]	; (1e8c <system_gclk_gen_set_config+0x108>)
    1e4c:	1dfa      	adds	r2, r7, #7
    1e4e:	7812      	ldrb	r2, [r2, #0]
    1e50:	3208      	adds	r2, #8
    1e52:	0092      	lsls	r2, r2, #2
    1e54:	5851      	ldr	r1, [r2, r1]
    1e56:	2280      	movs	r2, #128	; 0x80
    1e58:	0052      	lsls	r2, r2, #1
    1e5a:	4011      	ands	r1, r2
    1e5c:	697a      	ldr	r2, [r7, #20]
    1e5e:	430a      	orrs	r2, r1
    1e60:	3308      	adds	r3, #8
    1e62:	009b      	lsls	r3, r3, #2
    1e64:	501a      	str	r2, [r3, r0]

	while (system_gclk_is_syncing(generator)) {
    1e66:	46c0      	nop			; (mov r8, r8)
    1e68:	1dfb      	adds	r3, r7, #7
    1e6a:	781b      	ldrb	r3, [r3, #0]
    1e6c:	0018      	movs	r0, r3
    1e6e:	4b05      	ldr	r3, [pc, #20]	; (1e84 <system_gclk_gen_set_config+0x100>)
    1e70:	4798      	blx	r3
    1e72:	1e03      	subs	r3, r0, #0
    1e74:	d1f8      	bne.n	1e68 <system_gclk_gen_set_config+0xe4>
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
    1e76:	4b06      	ldr	r3, [pc, #24]	; (1e90 <system_gclk_gen_set_config+0x10c>)
    1e78:	4798      	blx	r3
}
    1e7a:	46c0      	nop			; (mov r8, r8)
    1e7c:	46bd      	mov	sp, r7
    1e7e:	b006      	add	sp, #24
    1e80:	bd80      	pop	{r7, pc}
    1e82:	46c0      	nop			; (mov r8, r8)
    1e84:	00001d1d 	.word	0x00001d1d
    1e88:	00001cf5 	.word	0x00001cf5
    1e8c:	40001c00 	.word	0x40001c00
    1e90:	00001d09 	.word	0x00001d09

00001e94 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1e94:	b580      	push	{r7, lr}
    1e96:	b082      	sub	sp, #8
    1e98:	af00      	add	r7, sp, #0
    1e9a:	0002      	movs	r2, r0
    1e9c:	1dfb      	adds	r3, r7, #7
    1e9e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing(generator)) {
    1ea0:	46c0      	nop			; (mov r8, r8)
    1ea2:	1dfb      	adds	r3, r7, #7
    1ea4:	781b      	ldrb	r3, [r3, #0]
    1ea6:	0018      	movs	r0, r3
    1ea8:	4b0d      	ldr	r3, [pc, #52]	; (1ee0 <system_gclk_gen_enable+0x4c>)
    1eaa:	4798      	blx	r3
    1eac:	1e03      	subs	r3, r0, #0
    1eae:	d1f8      	bne.n	1ea2 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    1eb0:	4b0c      	ldr	r3, [pc, #48]	; (1ee4 <system_gclk_gen_enable+0x50>)
    1eb2:	4798      	blx	r3

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    1eb4:	480c      	ldr	r0, [pc, #48]	; (1ee8 <system_gclk_gen_enable+0x54>)
    1eb6:	1dfb      	adds	r3, r7, #7
    1eb8:	781b      	ldrb	r3, [r3, #0]
    1eba:	490b      	ldr	r1, [pc, #44]	; (1ee8 <system_gclk_gen_enable+0x54>)
    1ebc:	1dfa      	adds	r2, r7, #7
    1ebe:	7812      	ldrb	r2, [r2, #0]
    1ec0:	3208      	adds	r2, #8
    1ec2:	0092      	lsls	r2, r2, #2
    1ec4:	5852      	ldr	r2, [r2, r1]
    1ec6:	2180      	movs	r1, #128	; 0x80
    1ec8:	0049      	lsls	r1, r1, #1
    1eca:	430a      	orrs	r2, r1
    1ecc:	3308      	adds	r3, #8
    1ece:	009b      	lsls	r3, r3, #2
    1ed0:	501a      	str	r2, [r3, r0]

	system_interrupt_leave_critical_section();
    1ed2:	4b06      	ldr	r3, [pc, #24]	; (1eec <system_gclk_gen_enable+0x58>)
    1ed4:	4798      	blx	r3
}
    1ed6:	46c0      	nop			; (mov r8, r8)
    1ed8:	46bd      	mov	sp, r7
    1eda:	b002      	add	sp, #8
    1edc:	bd80      	pop	{r7, pc}
    1ede:	46c0      	nop			; (mov r8, r8)
    1ee0:	00001d1d 	.word	0x00001d1d
    1ee4:	00001cf5 	.word	0x00001cf5
    1ee8:	40001c00 	.word	0x40001c00
    1eec:	00001d09 	.word	0x00001d09

00001ef0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1ef0:	b580      	push	{r7, lr}
    1ef2:	b086      	sub	sp, #24
    1ef4:	af00      	add	r7, sp, #0
    1ef6:	0002      	movs	r2, r0
    1ef8:	1dfb      	adds	r3, r7, #7
    1efa:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing(generator)) {
    1efc:	46c0      	nop			; (mov r8, r8)
    1efe:	1dfb      	adds	r3, r7, #7
    1f00:	781b      	ldrb	r3, [r3, #0]
    1f02:	0018      	movs	r0, r3
    1f04:	4b24      	ldr	r3, [pc, #144]	; (1f98 <system_gclk_gen_get_hz+0xa8>)
    1f06:	4798      	blx	r3
    1f08:	1e03      	subs	r3, r0, #0
    1f0a:	d1f8      	bne.n	1efe <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    1f0c:	4b23      	ldr	r3, [pc, #140]	; (1f9c <system_gclk_gen_get_hz+0xac>)
    1f0e:	4798      	blx	r3

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    1f10:	4a23      	ldr	r2, [pc, #140]	; (1fa0 <system_gclk_gen_get_hz+0xb0>)
    1f12:	1dfb      	adds	r3, r7, #7
    1f14:	781b      	ldrb	r3, [r3, #0]
    1f16:	3308      	adds	r3, #8
    1f18:	009b      	lsls	r3, r3, #2
    1f1a:	589b      	ldr	r3, [r3, r2]
    1f1c:	075b      	lsls	r3, r3, #29
    1f1e:	0f5b      	lsrs	r3, r3, #29
    1f20:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1f22:	0018      	movs	r0, r3
    1f24:	4b1f      	ldr	r3, [pc, #124]	; (1fa4 <system_gclk_gen_get_hz+0xb4>)
    1f26:	4798      	blx	r3
    1f28:	0003      	movs	r3, r0
    1f2a:	617b      	str	r3, [r7, #20]

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    1f2c:	4a1c      	ldr	r2, [pc, #112]	; (1fa0 <system_gclk_gen_get_hz+0xb0>)
    1f2e:	1dfb      	adds	r3, r7, #7
    1f30:	781b      	ldrb	r3, [r3, #0]
    1f32:	3308      	adds	r3, #8
    1f34:	009b      	lsls	r3, r3, #2
    1f36:	589b      	ldr	r3, [r3, r2]
    1f38:	04db      	lsls	r3, r3, #19
    1f3a:	0fdb      	lsrs	r3, r3, #31
    1f3c:	b2da      	uxtb	r2, r3
    1f3e:	2313      	movs	r3, #19
    1f40:	18fb      	adds	r3, r7, r3
    1f42:	701a      	strb	r2, [r3, #0]
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    1f44:	4a16      	ldr	r2, [pc, #88]	; (1fa0 <system_gclk_gen_get_hz+0xb0>)
    1f46:	1dfb      	adds	r3, r7, #7
    1f48:	781b      	ldrb	r3, [r3, #0]
    1f4a:	3308      	adds	r3, #8
    1f4c:	009b      	lsls	r3, r3, #2
    1f4e:	589b      	ldr	r3, [r3, r2]
    1f50:	0c1b      	lsrs	r3, r3, #16
    1f52:	b29b      	uxth	r3, r3
    1f54:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    1f56:	4b14      	ldr	r3, [pc, #80]	; (1fa8 <system_gclk_gen_get_hz+0xb8>)
    1f58:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1f5a:	2313      	movs	r3, #19
    1f5c:	18fb      	adds	r3, r7, r3
    1f5e:	781b      	ldrb	r3, [r3, #0]
    1f60:	2b00      	cmp	r3, #0
    1f62:	d109      	bne.n	1f78 <system_gclk_gen_get_hz+0x88>
    1f64:	68fb      	ldr	r3, [r7, #12]
    1f66:	2b01      	cmp	r3, #1
    1f68:	d906      	bls.n	1f78 <system_gclk_gen_get_hz+0x88>
		gen_input_hz /= divider;
    1f6a:	4b10      	ldr	r3, [pc, #64]	; (1fac <system_gclk_gen_get_hz+0xbc>)
    1f6c:	68f9      	ldr	r1, [r7, #12]
    1f6e:	6978      	ldr	r0, [r7, #20]
    1f70:	4798      	blx	r3
    1f72:	0003      	movs	r3, r0
    1f74:	617b      	str	r3, [r7, #20]
    1f76:	e00a      	b.n	1f8e <system_gclk_gen_get_hz+0x9e>
	} else if (divsel) {
    1f78:	2313      	movs	r3, #19
    1f7a:	18fb      	adds	r3, r7, r3
    1f7c:	781b      	ldrb	r3, [r3, #0]
    1f7e:	2b00      	cmp	r3, #0
    1f80:	d005      	beq.n	1f8e <system_gclk_gen_get_hz+0x9e>
		gen_input_hz >>= (divider+1);
    1f82:	68fb      	ldr	r3, [r7, #12]
    1f84:	3301      	adds	r3, #1
    1f86:	697a      	ldr	r2, [r7, #20]
    1f88:	40da      	lsrs	r2, r3
    1f8a:	0013      	movs	r3, r2
    1f8c:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    1f8e:	697b      	ldr	r3, [r7, #20]
}
    1f90:	0018      	movs	r0, r3
    1f92:	46bd      	mov	sp, r7
    1f94:	b006      	add	sp, #24
    1f96:	bd80      	pop	{r7, pc}
    1f98:	00001d1d 	.word	0x00001d1d
    1f9c:	00001cf5 	.word	0x00001cf5
    1fa0:	40001c00 	.word	0x40001c00
    1fa4:	00001b01 	.word	0x00001b01
    1fa8:	00001d09 	.word	0x00001d09
    1fac:	00002699 	.word	0x00002699

00001fb0 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1fb0:	b580      	push	{r7, lr}
    1fb2:	b082      	sub	sp, #8
    1fb4:	af00      	add	r7, sp, #0
    1fb6:	0002      	movs	r2, r0
    1fb8:	6039      	str	r1, [r7, #0]
    1fba:	1dfb      	adds	r3, r7, #7
    1fbc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1fbe:	1dfb      	adds	r3, r7, #7
    1fc0:	781b      	ldrb	r3, [r3, #0]
    1fc2:	0018      	movs	r0, r3
    1fc4:	4b08      	ldr	r3, [pc, #32]	; (1fe8 <system_gclk_chan_set_config+0x38>)
    1fc6:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    1fc8:	4908      	ldr	r1, [pc, #32]	; (1fec <system_gclk_chan_set_config+0x3c>)
    1fca:	1dfb      	adds	r3, r7, #7
    1fcc:	781b      	ldrb	r3, [r3, #0]
    1fce:	683a      	ldr	r2, [r7, #0]
    1fd0:	7812      	ldrb	r2, [r2, #0]
    1fd2:	0010      	movs	r0, r2
    1fd4:	2207      	movs	r2, #7
    1fd6:	4002      	ands	r2, r0
    1fd8:	3320      	adds	r3, #32
    1fda:	009b      	lsls	r3, r3, #2
    1fdc:	505a      	str	r2, [r3, r1]


}
    1fde:	46c0      	nop			; (mov r8, r8)
    1fe0:	46bd      	mov	sp, r7
    1fe2:	b002      	add	sp, #8
    1fe4:	bd80      	pop	{r7, pc}
    1fe6:	46c0      	nop			; (mov r8, r8)
    1fe8:	00002049 	.word	0x00002049
    1fec:	40001c00 	.word	0x40001c00

00001ff0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1ff0:	b580      	push	{r7, lr}
    1ff2:	b082      	sub	sp, #8
    1ff4:	af00      	add	r7, sp, #0
    1ff6:	0002      	movs	r2, r0
    1ff8:	1dfb      	adds	r3, r7, #7
    1ffa:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    1ffc:	4b0f      	ldr	r3, [pc, #60]	; (203c <STACK_SIZE+0x3c>)
    1ffe:	4798      	blx	r3

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    2000:	490f      	ldr	r1, [pc, #60]	; (2040 <STACK_SIZE+0x40>)
    2002:	1dfb      	adds	r3, r7, #7
    2004:	781b      	ldrb	r3, [r3, #0]
    2006:	480e      	ldr	r0, [pc, #56]	; (2040 <STACK_SIZE+0x40>)
    2008:	1dfa      	adds	r2, r7, #7
    200a:	7812      	ldrb	r2, [r2, #0]
    200c:	3220      	adds	r2, #32
    200e:	0092      	lsls	r2, r2, #2
    2010:	5812      	ldr	r2, [r2, r0]
    2012:	2040      	movs	r0, #64	; 0x40
    2014:	4302      	orrs	r2, r0
    2016:	3320      	adds	r3, #32
    2018:	009b      	lsls	r3, r3, #2
    201a:	505a      	str	r2, [r3, r1]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    201c:	46c0      	nop			; (mov r8, r8)
    201e:	4a08      	ldr	r2, [pc, #32]	; (2040 <STACK_SIZE+0x40>)
    2020:	1dfb      	adds	r3, r7, #7
    2022:	781b      	ldrb	r3, [r3, #0]
    2024:	3320      	adds	r3, #32
    2026:	009b      	lsls	r3, r3, #2
    2028:	589b      	ldr	r3, [r3, r2]
    202a:	2240      	movs	r2, #64	; 0x40
    202c:	4013      	ands	r3, r2
    202e:	d0f6      	beq.n	201e <STACK_SIZE+0x1e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
    2030:	4b04      	ldr	r3, [pc, #16]	; (2044 <STACK_SIZE+0x44>)
    2032:	4798      	blx	r3
}
    2034:	46c0      	nop			; (mov r8, r8)
    2036:	46bd      	mov	sp, r7
    2038:	b002      	add	sp, #8
    203a:	bd80      	pop	{r7, pc}
    203c:	00001cf5 	.word	0x00001cf5
    2040:	40001c00 	.word	0x40001c00
    2044:	00001d09 	.word	0x00001d09

00002048 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2048:	b580      	push	{r7, lr}
    204a:	b082      	sub	sp, #8
    204c:	af00      	add	r7, sp, #0
    204e:	0002      	movs	r2, r0
    2050:	1dfb      	adds	r3, r7, #7
    2052:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    2054:	4b0f      	ldr	r3, [pc, #60]	; (2094 <system_gclk_chan_disable+0x4c>)
    2056:	4798      	blx	r3

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    2058:	490f      	ldr	r1, [pc, #60]	; (2098 <system_gclk_chan_disable+0x50>)
    205a:	1dfb      	adds	r3, r7, #7
    205c:	781b      	ldrb	r3, [r3, #0]
    205e:	480e      	ldr	r0, [pc, #56]	; (2098 <system_gclk_chan_disable+0x50>)
    2060:	1dfa      	adds	r2, r7, #7
    2062:	7812      	ldrb	r2, [r2, #0]
    2064:	3220      	adds	r2, #32
    2066:	0092      	lsls	r2, r2, #2
    2068:	5812      	ldr	r2, [r2, r0]
    206a:	2040      	movs	r0, #64	; 0x40
    206c:	4382      	bics	r2, r0
    206e:	3320      	adds	r3, #32
    2070:	009b      	lsls	r3, r3, #2
    2072:	505a      	str	r2, [r3, r1]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    2074:	46c0      	nop			; (mov r8, r8)
    2076:	4a08      	ldr	r2, [pc, #32]	; (2098 <system_gclk_chan_disable+0x50>)
    2078:	1dfb      	adds	r3, r7, #7
    207a:	781b      	ldrb	r3, [r3, #0]
    207c:	3320      	adds	r3, #32
    207e:	009b      	lsls	r3, r3, #2
    2080:	589b      	ldr	r3, [r3, r2]
    2082:	2240      	movs	r2, #64	; 0x40
    2084:	4013      	ands	r3, r2
    2086:	d1f6      	bne.n	2076 <system_gclk_chan_disable+0x2e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
    2088:	4b04      	ldr	r3, [pc, #16]	; (209c <system_gclk_chan_disable+0x54>)
    208a:	4798      	blx	r3
}
    208c:	46c0      	nop			; (mov r8, r8)
    208e:	46bd      	mov	sp, r7
    2090:	b002      	add	sp, #8
    2092:	bd80      	pop	{r7, pc}
    2094:	00001cf5 	.word	0x00001cf5
    2098:	40001c00 	.word	0x40001c00
    209c:	00001d09 	.word	0x00001d09

000020a0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    20a0:	b580      	push	{r7, lr}
    20a2:	b084      	sub	sp, #16
    20a4:	af00      	add	r7, sp, #0
    20a6:	0002      	movs	r2, r0
    20a8:	1dfb      	adds	r3, r7, #7
    20aa:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    20ac:	4b0d      	ldr	r3, [pc, #52]	; (20e4 <system_gclk_chan_get_hz+0x44>)
    20ae:	4798      	blx	r3
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    20b0:	4a0d      	ldr	r2, [pc, #52]	; (20e8 <system_gclk_chan_get_hz+0x48>)
    20b2:	1dfb      	adds	r3, r7, #7
    20b4:	781b      	ldrb	r3, [r3, #0]
    20b6:	3320      	adds	r3, #32
    20b8:	009b      	lsls	r3, r3, #2
    20ba:	589b      	ldr	r3, [r3, r2]
    20bc:	075b      	lsls	r3, r3, #29
    20be:	0f5b      	lsrs	r3, r3, #29
    20c0:	b2da      	uxtb	r2, r3
    20c2:	230f      	movs	r3, #15
    20c4:	18fb      	adds	r3, r7, r3
    20c6:	701a      	strb	r2, [r3, #0]
	system_interrupt_leave_critical_section();
    20c8:	4b08      	ldr	r3, [pc, #32]	; (20ec <system_gclk_chan_get_hz+0x4c>)
    20ca:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    20cc:	230f      	movs	r3, #15
    20ce:	18fb      	adds	r3, r7, r3
    20d0:	781b      	ldrb	r3, [r3, #0]
    20d2:	0018      	movs	r0, r3
    20d4:	4b06      	ldr	r3, [pc, #24]	; (20f0 <system_gclk_chan_get_hz+0x50>)
    20d6:	4798      	blx	r3
    20d8:	0003      	movs	r3, r0
}
    20da:	0018      	movs	r0, r3
    20dc:	46bd      	mov	sp, r7
    20de:	b004      	add	sp, #16
    20e0:	bd80      	pop	{r7, pc}
    20e2:	46c0      	nop			; (mov r8, r8)
    20e4:	00001cf5 	.word	0x00001cf5
    20e8:	40001c00 	.word	0x40001c00
    20ec:	00001d09 	.word	0x00001d09
    20f0:	00001ef1 	.word	0x00001ef1

000020f4 <system_pinmux_get_group_from_gpio_pin>:
{
    20f4:	b580      	push	{r7, lr}
    20f6:	b084      	sub	sp, #16
    20f8:	af00      	add	r7, sp, #0
    20fa:	0002      	movs	r2, r0
    20fc:	1dfb      	adds	r3, r7, #7
    20fe:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2100:	230f      	movs	r3, #15
    2102:	18fb      	adds	r3, r7, r3
    2104:	1dfa      	adds	r2, r7, #7
    2106:	7812      	ldrb	r2, [r2, #0]
    2108:	09d2      	lsrs	r2, r2, #7
    210a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    210c:	230e      	movs	r3, #14
    210e:	18fb      	adds	r3, r7, r3
    2110:	1dfa      	adds	r2, r7, #7
    2112:	7812      	ldrb	r2, [r2, #0]
    2114:	0952      	lsrs	r2, r2, #5
    2116:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2118:	4b0d      	ldr	r3, [pc, #52]	; (2150 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    211a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    211c:	230f      	movs	r3, #15
    211e:	18fb      	adds	r3, r7, r3
    2120:	781b      	ldrb	r3, [r3, #0]
    2122:	2b00      	cmp	r3, #0
    2124:	d10f      	bne.n	2146 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    2126:	230f      	movs	r3, #15
    2128:	18fb      	adds	r3, r7, r3
    212a:	781b      	ldrb	r3, [r3, #0]
    212c:	009b      	lsls	r3, r3, #2
    212e:	2210      	movs	r2, #16
    2130:	4694      	mov	ip, r2
    2132:	44bc      	add	ip, r7
    2134:	4463      	add	r3, ip
    2136:	3b08      	subs	r3, #8
    2138:	681a      	ldr	r2, [r3, #0]
    213a:	230e      	movs	r3, #14
    213c:	18fb      	adds	r3, r7, r3
    213e:	781b      	ldrb	r3, [r3, #0]
    2140:	01db      	lsls	r3, r3, #7
    2142:	18d3      	adds	r3, r2, r3
    2144:	e000      	b.n	2148 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    2146:	2300      	movs	r3, #0
}
    2148:	0018      	movs	r0, r3
    214a:	46bd      	mov	sp, r7
    214c:	b004      	add	sp, #16
    214e:	bd80      	pop	{r7, pc}
    2150:	41006000 	.word	0x41006000

00002154 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2154:	b580      	push	{r7, lr}
    2156:	b088      	sub	sp, #32
    2158:	af00      	add	r7, sp, #0
    215a:	60f8      	str	r0, [r7, #12]
    215c:	60b9      	str	r1, [r7, #8]
    215e:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    2160:	2300      	movs	r3, #0
    2162:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2164:	687b      	ldr	r3, [r7, #4]
    2166:	78db      	ldrb	r3, [r3, #3]
    2168:	2201      	movs	r2, #1
    216a:	4053      	eors	r3, r2
    216c:	b2db      	uxtb	r3, r3
    216e:	2b00      	cmp	r3, #0
    2170:	d035      	beq.n	21de <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2172:	687b      	ldr	r3, [r7, #4]
    2174:	781b      	ldrb	r3, [r3, #0]
    2176:	2b80      	cmp	r3, #128	; 0x80
    2178:	d00b      	beq.n	2192 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    217a:	69fb      	ldr	r3, [r7, #28]
    217c:	2280      	movs	r2, #128	; 0x80
    217e:	0252      	lsls	r2, r2, #9
    2180:	4313      	orrs	r3, r2
    2182:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2184:	687b      	ldr	r3, [r7, #4]
    2186:	781b      	ldrb	r3, [r3, #0]
    2188:	061b      	lsls	r3, r3, #24
    218a:	001a      	movs	r2, r3
    218c:	69fb      	ldr	r3, [r7, #28]
    218e:	4313      	orrs	r3, r2
    2190:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2192:	687b      	ldr	r3, [r7, #4]
    2194:	785b      	ldrb	r3, [r3, #1]
    2196:	2b00      	cmp	r3, #0
    2198:	d003      	beq.n	21a2 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    219a:	687b      	ldr	r3, [r7, #4]
    219c:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    219e:	2b02      	cmp	r3, #2
    21a0:	d110      	bne.n	21c4 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    21a2:	69fb      	ldr	r3, [r7, #28]
    21a4:	2280      	movs	r2, #128	; 0x80
    21a6:	0292      	lsls	r2, r2, #10
    21a8:	4313      	orrs	r3, r2
    21aa:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    21ac:	687b      	ldr	r3, [r7, #4]
    21ae:	789b      	ldrb	r3, [r3, #2]
    21b0:	2b00      	cmp	r3, #0
    21b2:	d004      	beq.n	21be <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    21b4:	69fb      	ldr	r3, [r7, #28]
    21b6:	2280      	movs	r2, #128	; 0x80
    21b8:	02d2      	lsls	r2, r2, #11
    21ba:	4313      	orrs	r3, r2
    21bc:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    21be:	68fb      	ldr	r3, [r7, #12]
    21c0:	68ba      	ldr	r2, [r7, #8]
    21c2:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    21c4:	687b      	ldr	r3, [r7, #4]
    21c6:	785b      	ldrb	r3, [r3, #1]
    21c8:	2b01      	cmp	r3, #1
    21ca:	d003      	beq.n	21d4 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    21cc:	687b      	ldr	r3, [r7, #4]
    21ce:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    21d0:	2b02      	cmp	r3, #2
    21d2:	d107      	bne.n	21e4 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    21d4:	69fb      	ldr	r3, [r7, #28]
    21d6:	4a22      	ldr	r2, [pc, #136]	; (2260 <_system_pinmux_config+0x10c>)
    21d8:	4013      	ands	r3, r2
    21da:	61fb      	str	r3, [r7, #28]
    21dc:	e002      	b.n	21e4 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    21de:	68fb      	ldr	r3, [r7, #12]
    21e0:	68ba      	ldr	r2, [r7, #8]
    21e2:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    21e4:	68bb      	ldr	r3, [r7, #8]
    21e6:	041b      	lsls	r3, r3, #16
    21e8:	0c1b      	lsrs	r3, r3, #16
    21ea:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    21ec:	68bb      	ldr	r3, [r7, #8]
    21ee:	0c1b      	lsrs	r3, r3, #16
    21f0:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    21f2:	69ba      	ldr	r2, [r7, #24]
    21f4:	69fb      	ldr	r3, [r7, #28]
    21f6:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    21f8:	22a0      	movs	r2, #160	; 0xa0
    21fa:	05d2      	lsls	r2, r2, #23
    21fc:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    21fe:	68fb      	ldr	r3, [r7, #12]
    2200:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2202:	697a      	ldr	r2, [r7, #20]
    2204:	69fb      	ldr	r3, [r7, #28]
    2206:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2208:	22d0      	movs	r2, #208	; 0xd0
    220a:	0612      	lsls	r2, r2, #24
    220c:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    220e:	68fb      	ldr	r3, [r7, #12]
    2210:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2212:	687b      	ldr	r3, [r7, #4]
    2214:	78db      	ldrb	r3, [r3, #3]
    2216:	2201      	movs	r2, #1
    2218:	4053      	eors	r3, r2
    221a:	b2db      	uxtb	r3, r3
    221c:	2b00      	cmp	r3, #0
    221e:	d01a      	beq.n	2256 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2220:	69fa      	ldr	r2, [r7, #28]
    2222:	2380      	movs	r3, #128	; 0x80
    2224:	02db      	lsls	r3, r3, #11
    2226:	4013      	ands	r3, r2
    2228:	d00a      	beq.n	2240 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    222a:	687b      	ldr	r3, [r7, #4]
    222c:	789b      	ldrb	r3, [r3, #2]
    222e:	2b01      	cmp	r3, #1
    2230:	d103      	bne.n	223a <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    2232:	68fb      	ldr	r3, [r7, #12]
    2234:	68ba      	ldr	r2, [r7, #8]
    2236:	619a      	str	r2, [r3, #24]
    2238:	e002      	b.n	2240 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    223a:	68fb      	ldr	r3, [r7, #12]
    223c:	68ba      	ldr	r2, [r7, #8]
    223e:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2240:	687b      	ldr	r3, [r7, #4]
    2242:	785b      	ldrb	r3, [r3, #1]
    2244:	2b01      	cmp	r3, #1
    2246:	d003      	beq.n	2250 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    2248:	687b      	ldr	r3, [r7, #4]
    224a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    224c:	2b02      	cmp	r3, #2
    224e:	d102      	bne.n	2256 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    2250:	68fb      	ldr	r3, [r7, #12]
    2252:	68ba      	ldr	r2, [r7, #8]
    2254:	609a      	str	r2, [r3, #8]
		}
	}
}
    2256:	46c0      	nop			; (mov r8, r8)
    2258:	46bd      	mov	sp, r7
    225a:	b008      	add	sp, #32
    225c:	bd80      	pop	{r7, pc}
    225e:	46c0      	nop			; (mov r8, r8)
    2260:	fffbffff 	.word	0xfffbffff

00002264 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2264:	b580      	push	{r7, lr}
    2266:	b084      	sub	sp, #16
    2268:	af00      	add	r7, sp, #0
    226a:	0002      	movs	r2, r0
    226c:	6039      	str	r1, [r7, #0]
    226e:	1dfb      	adds	r3, r7, #7
    2270:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2272:	1dfb      	adds	r3, r7, #7
    2274:	781b      	ldrb	r3, [r3, #0]
    2276:	0018      	movs	r0, r3
    2278:	4b0a      	ldr	r3, [pc, #40]	; (22a4 <system_pinmux_pin_set_config+0x40>)
    227a:	4798      	blx	r3
    227c:	0003      	movs	r3, r0
    227e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2280:	1dfb      	adds	r3, r7, #7
    2282:	781b      	ldrb	r3, [r3, #0]
    2284:	221f      	movs	r2, #31
    2286:	4013      	ands	r3, r2
    2288:	2201      	movs	r2, #1
    228a:	409a      	lsls	r2, r3
    228c:	0013      	movs	r3, r2
    228e:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    2290:	683a      	ldr	r2, [r7, #0]
    2292:	68b9      	ldr	r1, [r7, #8]
    2294:	68fb      	ldr	r3, [r7, #12]
    2296:	0018      	movs	r0, r3
    2298:	4b03      	ldr	r3, [pc, #12]	; (22a8 <system_pinmux_pin_set_config+0x44>)
    229a:	4798      	blx	r3
}
    229c:	46c0      	nop			; (mov r8, r8)
    229e:	46bd      	mov	sp, r7
    22a0:	b004      	add	sp, #16
    22a2:	bd80      	pop	{r7, pc}
    22a4:	000020f5 	.word	0x000020f5
    22a8:	00002155 	.word	0x00002155

000022ac <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    22ac:	b580      	push	{r7, lr}
    22ae:	af00      	add	r7, sp, #0
	return;
    22b0:	46c0      	nop			; (mov r8, r8)
}
    22b2:	46bd      	mov	sp, r7
    22b4:	bd80      	pop	{r7, pc}
	...

000022b8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    22b8:	b580      	push	{r7, lr}
    22ba:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    22bc:	4b06      	ldr	r3, [pc, #24]	; (22d8 <system_init+0x20>)
    22be:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    22c0:	4b06      	ldr	r3, [pc, #24]	; (22dc <system_init+0x24>)
    22c2:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    22c4:	4b06      	ldr	r3, [pc, #24]	; (22e0 <system_init+0x28>)
    22c6:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    22c8:	4b06      	ldr	r3, [pc, #24]	; (22e4 <system_init+0x2c>)
    22ca:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    22cc:	4b06      	ldr	r3, [pc, #24]	; (22e8 <system_init+0x30>)
    22ce:	4798      	blx	r3
}
    22d0:	46c0      	nop			; (mov r8, r8)
    22d2:	46bd      	mov	sp, r7
    22d4:	bd80      	pop	{r7, pc}
    22d6:	46c0      	nop			; (mov r8, r8)
    22d8:	00001bbd 	.word	0x00001bbd
    22dc:	000018d1 	.word	0x000018d1
    22e0:	000022ad 	.word	0x000022ad
    22e4:	000022ad 	.word	0x000022ad
    22e8:	000022ad 	.word	0x000022ad

000022ec <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    22ec:	b580      	push	{r7, lr}
    22ee:	b082      	sub	sp, #8
    22f0:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    22f2:	4b16      	ldr	r3, [pc, #88]	; (234c <Reset_Handler+0x60>)
    22f4:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    22f6:	4b16      	ldr	r3, [pc, #88]	; (2350 <Reset_Handler+0x64>)
    22f8:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	683b      	ldr	r3, [r7, #0]
    22fe:	429a      	cmp	r2, r3
    2300:	d00c      	beq.n	231c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    2302:	e007      	b.n	2314 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    2304:	683b      	ldr	r3, [r7, #0]
    2306:	1d1a      	adds	r2, r3, #4
    2308:	603a      	str	r2, [r7, #0]
    230a:	687a      	ldr	r2, [r7, #4]
    230c:	1d11      	adds	r1, r2, #4
    230e:	6079      	str	r1, [r7, #4]
    2310:	6812      	ldr	r2, [r2, #0]
    2312:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    2314:	683a      	ldr	r2, [r7, #0]
    2316:	4b0f      	ldr	r3, [pc, #60]	; (2354 <Reset_Handler+0x68>)
    2318:	429a      	cmp	r2, r3
    231a:	d3f3      	bcc.n	2304 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    231c:	4b0e      	ldr	r3, [pc, #56]	; (2358 <Reset_Handler+0x6c>)
    231e:	603b      	str	r3, [r7, #0]
    2320:	e004      	b.n	232c <Reset_Handler+0x40>
                *pDest++ = 0;
    2322:	683b      	ldr	r3, [r7, #0]
    2324:	1d1a      	adds	r2, r3, #4
    2326:	603a      	str	r2, [r7, #0]
    2328:	2200      	movs	r2, #0
    232a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    232c:	683a      	ldr	r2, [r7, #0]
    232e:	4b0b      	ldr	r3, [pc, #44]	; (235c <Reset_Handler+0x70>)
    2330:	429a      	cmp	r2, r3
    2332:	d3f6      	bcc.n	2322 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    2334:	4b0a      	ldr	r3, [pc, #40]	; (2360 <Reset_Handler+0x74>)
    2336:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2338:	4b0a      	ldr	r3, [pc, #40]	; (2364 <Reset_Handler+0x78>)
    233a:	687a      	ldr	r2, [r7, #4]
    233c:	21ff      	movs	r1, #255	; 0xff
    233e:	438a      	bics	r2, r1
    2340:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    2342:	4b09      	ldr	r3, [pc, #36]	; (2368 <Reset_Handler+0x7c>)
    2344:	4798      	blx	r3

        /* Branch to main function */
        main();
    2346:	4b09      	ldr	r3, [pc, #36]	; (236c <Reset_Handler+0x80>)
    2348:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    234a:	e7fe      	b.n	234a <Reset_Handler+0x5e>
    234c:	0000287c 	.word	0x0000287c
    2350:	20000000 	.word	0x20000000
    2354:	2000000c 	.word	0x2000000c
    2358:	2000000c 	.word	0x2000000c
    235c:	200038e8 	.word	0x200038e8
    2360:	00000000 	.word	0x00000000
    2364:	e000ed00 	.word	0xe000ed00
    2368:	000027b1 	.word	0x000027b1
    236c:	00002645 	.word	0x00002645

00002370 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2370:	b580      	push	{r7, lr}
    2372:	af00      	add	r7, sp, #0
        while (1) {
    2374:	e7fe      	b.n	2374 <Dummy_Handler+0x4>
	...

00002378 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    2378:	b5b0      	push	{r4, r5, r7, lr}
    237a:	b082      	sub	sp, #8
    237c:	af00      	add	r7, sp, #0
    237e:	0002      	movs	r2, r0
    2380:	6039      	str	r1, [r7, #0]
    2382:	1dfb      	adds	r3, r7, #7
    2384:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
    2386:	1dfb      	adds	r3, r7, #7
    2388:	781b      	ldrb	r3, [r3, #0]
    238a:	2b7f      	cmp	r3, #127	; 0x7f
    238c:	d932      	bls.n	23f4 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    238e:	4c2f      	ldr	r4, [pc, #188]	; (244c <NVIC_SetPriority+0xd4>)
    2390:	1dfb      	adds	r3, r7, #7
    2392:	781b      	ldrb	r3, [r3, #0]
    2394:	001a      	movs	r2, r3
    2396:	230f      	movs	r3, #15
    2398:	4013      	ands	r3, r2
    239a:	3b08      	subs	r3, #8
    239c:	0899      	lsrs	r1, r3, #2
    239e:	4a2b      	ldr	r2, [pc, #172]	; (244c <NVIC_SetPriority+0xd4>)
    23a0:	1dfb      	adds	r3, r7, #7
    23a2:	781b      	ldrb	r3, [r3, #0]
    23a4:	0018      	movs	r0, r3
    23a6:	230f      	movs	r3, #15
    23a8:	4003      	ands	r3, r0
    23aa:	3b08      	subs	r3, #8
    23ac:	089b      	lsrs	r3, r3, #2
    23ae:	3306      	adds	r3, #6
    23b0:	009b      	lsls	r3, r3, #2
    23b2:	18d3      	adds	r3, r2, r3
    23b4:	3304      	adds	r3, #4
    23b6:	681b      	ldr	r3, [r3, #0]
    23b8:	1dfa      	adds	r2, r7, #7
    23ba:	7812      	ldrb	r2, [r2, #0]
    23bc:	0010      	movs	r0, r2
    23be:	2203      	movs	r2, #3
    23c0:	4002      	ands	r2, r0
    23c2:	00d2      	lsls	r2, r2, #3
    23c4:	20ff      	movs	r0, #255	; 0xff
    23c6:	4090      	lsls	r0, r2
    23c8:	0002      	movs	r2, r0
    23ca:	43d2      	mvns	r2, r2
    23cc:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    23ce:	683b      	ldr	r3, [r7, #0]
    23d0:	019b      	lsls	r3, r3, #6
    23d2:	20ff      	movs	r0, #255	; 0xff
    23d4:	4018      	ands	r0, r3
    23d6:	1dfb      	adds	r3, r7, #7
    23d8:	781b      	ldrb	r3, [r3, #0]
    23da:	001d      	movs	r5, r3
    23dc:	2303      	movs	r3, #3
    23de:	402b      	ands	r3, r5
    23e0:	00db      	lsls	r3, r3, #3
    23e2:	4098      	lsls	r0, r3
    23e4:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    23e6:	431a      	orrs	r2, r3
    23e8:	1d8b      	adds	r3, r1, #6
    23ea:	009b      	lsls	r3, r3, #2
    23ec:	18e3      	adds	r3, r4, r3
    23ee:	3304      	adds	r3, #4
    23f0:	601a      	str	r2, [r3, #0]
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
    23f2:	e027      	b.n	2444 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    23f4:	4c16      	ldr	r4, [pc, #88]	; (2450 <NVIC_SetPriority+0xd8>)
    23f6:	1dfb      	adds	r3, r7, #7
    23f8:	781b      	ldrb	r3, [r3, #0]
    23fa:	b25b      	sxtb	r3, r3
    23fc:	089b      	lsrs	r3, r3, #2
    23fe:	4914      	ldr	r1, [pc, #80]	; (2450 <NVIC_SetPriority+0xd8>)
    2400:	1dfa      	adds	r2, r7, #7
    2402:	7812      	ldrb	r2, [r2, #0]
    2404:	b252      	sxtb	r2, r2
    2406:	0892      	lsrs	r2, r2, #2
    2408:	32c0      	adds	r2, #192	; 0xc0
    240a:	0092      	lsls	r2, r2, #2
    240c:	5852      	ldr	r2, [r2, r1]
    240e:	1df9      	adds	r1, r7, #7
    2410:	7809      	ldrb	r1, [r1, #0]
    2412:	0008      	movs	r0, r1
    2414:	2103      	movs	r1, #3
    2416:	4001      	ands	r1, r0
    2418:	00c9      	lsls	r1, r1, #3
    241a:	20ff      	movs	r0, #255	; 0xff
    241c:	4088      	lsls	r0, r1
    241e:	0001      	movs	r1, r0
    2420:	43c9      	mvns	r1, r1
    2422:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    2424:	683a      	ldr	r2, [r7, #0]
    2426:	0192      	lsls	r2, r2, #6
    2428:	20ff      	movs	r0, #255	; 0xff
    242a:	4010      	ands	r0, r2
    242c:	1dfa      	adds	r2, r7, #7
    242e:	7812      	ldrb	r2, [r2, #0]
    2430:	0015      	movs	r5, r2
    2432:	2203      	movs	r2, #3
    2434:	402a      	ands	r2, r5
    2436:	00d2      	lsls	r2, r2, #3
    2438:	4090      	lsls	r0, r2
    243a:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    243c:	430a      	orrs	r2, r1
    243e:	33c0      	adds	r3, #192	; 0xc0
    2440:	009b      	lsls	r3, r3, #2
    2442:	511a      	str	r2, [r3, r4]
}
    2444:	46c0      	nop			; (mov r8, r8)
    2446:	46bd      	mov	sp, r7
    2448:	b002      	add	sp, #8
    244a:	bdb0      	pop	{r4, r5, r7, pc}
    244c:	e000ed00 	.word	0xe000ed00
    2450:	e000e100 	.word	0xe000e100

00002454 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
    2454:	b580      	push	{r7, lr}
    2456:	b082      	sub	sp, #8
    2458:	af00      	add	r7, sp, #0
    245a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
    245c:	687b      	ldr	r3, [r7, #4]
    245e:	3b01      	subs	r3, #1
    2460:	4a0c      	ldr	r2, [pc, #48]	; (2494 <SysTick_Config+0x40>)
    2462:	4293      	cmp	r3, r2
    2464:	d901      	bls.n	246a <SysTick_Config+0x16>
    2466:	2301      	movs	r3, #1
    2468:	e010      	b.n	248c <SysTick_Config+0x38>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
    246a:	4b0b      	ldr	r3, [pc, #44]	; (2498 <SysTick_Config+0x44>)
    246c:	687a      	ldr	r2, [r7, #4]
    246e:	3a01      	subs	r2, #1
    2470:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
    2472:	2301      	movs	r3, #1
    2474:	425b      	negs	r3, r3
    2476:	2103      	movs	r1, #3
    2478:	0018      	movs	r0, r3
    247a:	4b08      	ldr	r3, [pc, #32]	; (249c <SysTick_Config+0x48>)
    247c:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    247e:	4b06      	ldr	r3, [pc, #24]	; (2498 <SysTick_Config+0x44>)
    2480:	2200      	movs	r2, #0
    2482:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    2484:	4b04      	ldr	r3, [pc, #16]	; (2498 <SysTick_Config+0x44>)
    2486:	2207      	movs	r2, #7
    2488:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
    248a:	2300      	movs	r3, #0
}
    248c:	0018      	movs	r0, r3
    248e:	46bd      	mov	sp, r7
    2490:	b002      	add	sp, #8
    2492:	bd80      	pop	{r7, pc}
    2494:	00ffffff 	.word	0x00ffffff
    2498:	e000e010 	.word	0xe000e010
    249c:	00002379 	.word	0x00002379

000024a0 <system_pinmux_get_group_from_gpio_pin>:
{
    24a0:	b580      	push	{r7, lr}
    24a2:	b084      	sub	sp, #16
    24a4:	af00      	add	r7, sp, #0
    24a6:	0002      	movs	r2, r0
    24a8:	1dfb      	adds	r3, r7, #7
    24aa:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    24ac:	230f      	movs	r3, #15
    24ae:	18fb      	adds	r3, r7, r3
    24b0:	1dfa      	adds	r2, r7, #7
    24b2:	7812      	ldrb	r2, [r2, #0]
    24b4:	09d2      	lsrs	r2, r2, #7
    24b6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    24b8:	230e      	movs	r3, #14
    24ba:	18fb      	adds	r3, r7, r3
    24bc:	1dfa      	adds	r2, r7, #7
    24be:	7812      	ldrb	r2, [r2, #0]
    24c0:	0952      	lsrs	r2, r2, #5
    24c2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    24c4:	4b0d      	ldr	r3, [pc, #52]	; (24fc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    24c6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    24c8:	230f      	movs	r3, #15
    24ca:	18fb      	adds	r3, r7, r3
    24cc:	781b      	ldrb	r3, [r3, #0]
    24ce:	2b00      	cmp	r3, #0
    24d0:	d10f      	bne.n	24f2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    24d2:	230f      	movs	r3, #15
    24d4:	18fb      	adds	r3, r7, r3
    24d6:	781b      	ldrb	r3, [r3, #0]
    24d8:	009b      	lsls	r3, r3, #2
    24da:	2210      	movs	r2, #16
    24dc:	4694      	mov	ip, r2
    24de:	44bc      	add	ip, r7
    24e0:	4463      	add	r3, ip
    24e2:	3b08      	subs	r3, #8
    24e4:	681a      	ldr	r2, [r3, #0]
    24e6:	230e      	movs	r3, #14
    24e8:	18fb      	adds	r3, r7, r3
    24ea:	781b      	ldrb	r3, [r3, #0]
    24ec:	01db      	lsls	r3, r3, #7
    24ee:	18d3      	adds	r3, r2, r3
    24f0:	e000      	b.n	24f4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    24f2:	2300      	movs	r3, #0
}
    24f4:	0018      	movs	r0, r3
    24f6:	46bd      	mov	sp, r7
    24f8:	b004      	add	sp, #16
    24fa:	bd80      	pop	{r7, pc}
    24fc:	41006000 	.word	0x41006000

00002500 <port_get_group_from_gpio_pin>:
{
    2500:	b580      	push	{r7, lr}
    2502:	b082      	sub	sp, #8
    2504:	af00      	add	r7, sp, #0
    2506:	0002      	movs	r2, r0
    2508:	1dfb      	adds	r3, r7, #7
    250a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    250c:	1dfb      	adds	r3, r7, #7
    250e:	781b      	ldrb	r3, [r3, #0]
    2510:	0018      	movs	r0, r3
    2512:	4b03      	ldr	r3, [pc, #12]	; (2520 <port_get_group_from_gpio_pin+0x20>)
    2514:	4798      	blx	r3
    2516:	0003      	movs	r3, r0
}
    2518:	0018      	movs	r0, r3
    251a:	46bd      	mov	sp, r7
    251c:	b002      	add	sp, #8
    251e:	bd80      	pop	{r7, pc}
    2520:	000024a1 	.word	0x000024a1

00002524 <port_get_config_defaults>:
{
    2524:	b580      	push	{r7, lr}
    2526:	b082      	sub	sp, #8
    2528:	af00      	add	r7, sp, #0
    252a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    252c:	687b      	ldr	r3, [r7, #4]
    252e:	2200      	movs	r2, #0
    2530:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    2532:	687b      	ldr	r3, [r7, #4]
    2534:	2201      	movs	r2, #1
    2536:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    2538:	687b      	ldr	r3, [r7, #4]
    253a:	2200      	movs	r2, #0
    253c:	709a      	strb	r2, [r3, #2]
}
    253e:	46c0      	nop			; (mov r8, r8)
    2540:	46bd      	mov	sp, r7
    2542:	b002      	add	sp, #8
    2544:	bd80      	pop	{r7, pc}
	...

00002548 <port_pin_set_output_level>:
{
    2548:	b580      	push	{r7, lr}
    254a:	b084      	sub	sp, #16
    254c:	af00      	add	r7, sp, #0
    254e:	0002      	movs	r2, r0
    2550:	1dfb      	adds	r3, r7, #7
    2552:	701a      	strb	r2, [r3, #0]
    2554:	1dbb      	adds	r3, r7, #6
    2556:	1c0a      	adds	r2, r1, #0
    2558:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    255a:	1dfb      	adds	r3, r7, #7
    255c:	781b      	ldrb	r3, [r3, #0]
    255e:	0018      	movs	r0, r3
    2560:	4b0d      	ldr	r3, [pc, #52]	; (2598 <port_pin_set_output_level+0x50>)
    2562:	4798      	blx	r3
    2564:	0003      	movs	r3, r0
    2566:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2568:	1dfb      	adds	r3, r7, #7
    256a:	781b      	ldrb	r3, [r3, #0]
    256c:	221f      	movs	r2, #31
    256e:	4013      	ands	r3, r2
    2570:	2201      	movs	r2, #1
    2572:	409a      	lsls	r2, r3
    2574:	0013      	movs	r3, r2
    2576:	60bb      	str	r3, [r7, #8]
	if (level) {
    2578:	1dbb      	adds	r3, r7, #6
    257a:	781b      	ldrb	r3, [r3, #0]
    257c:	2b00      	cmp	r3, #0
    257e:	d003      	beq.n	2588 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    2580:	68fb      	ldr	r3, [r7, #12]
    2582:	68ba      	ldr	r2, [r7, #8]
    2584:	619a      	str	r2, [r3, #24]
}
    2586:	e002      	b.n	258e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    2588:	68fb      	ldr	r3, [r7, #12]
    258a:	68ba      	ldr	r2, [r7, #8]
    258c:	615a      	str	r2, [r3, #20]
}
    258e:	46c0      	nop			; (mov r8, r8)
    2590:	46bd      	mov	sp, r7
    2592:	b004      	add	sp, #16
    2594:	bd80      	pop	{r7, pc}
    2596:	46c0      	nop			; (mov r8, r8)
    2598:	00002501 	.word	0x00002501

0000259c <port_pin_toggle_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to toggle
 */
static inline void port_pin_toggle_output_level(
		const uint8_t gpio_pin)
{
    259c:	b580      	push	{r7, lr}
    259e:	b084      	sub	sp, #16
    25a0:	af00      	add	r7, sp, #0
    25a2:	0002      	movs	r2, r0
    25a4:	1dfb      	adds	r3, r7, #7
    25a6:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    25a8:	1dfb      	adds	r3, r7, #7
    25aa:	781b      	ldrb	r3, [r3, #0]
    25ac:	0018      	movs	r0, r3
    25ae:	4b09      	ldr	r3, [pc, #36]	; (25d4 <port_pin_toggle_output_level+0x38>)
    25b0:	4798      	blx	r3
    25b2:	0003      	movs	r3, r0
    25b4:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    25b6:	1dfb      	adds	r3, r7, #7
    25b8:	781b      	ldrb	r3, [r3, #0]
    25ba:	221f      	movs	r2, #31
    25bc:	4013      	ands	r3, r2
    25be:	2201      	movs	r2, #1
    25c0:	409a      	lsls	r2, r3
    25c2:	0013      	movs	r3, r2
    25c4:	60bb      	str	r3, [r7, #8]

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    25c6:	68fb      	ldr	r3, [r7, #12]
    25c8:	68ba      	ldr	r2, [r7, #8]
    25ca:	61da      	str	r2, [r3, #28]
}
    25cc:	46c0      	nop			; (mov r8, r8)
    25ce:	46bd      	mov	sp, r7
    25d0:	b004      	add	sp, #16
    25d2:	bd80      	pop	{r7, pc}
    25d4:	00002501 	.word	0x00002501

000025d8 <system_interrupt_enable_global>:
{
    25d8:	b580      	push	{r7, lr}
    25da:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    25dc:	4b04      	ldr	r3, [pc, #16]	; (25f0 <system_interrupt_enable_global+0x18>)
    25de:	2201      	movs	r2, #1
    25e0:	701a      	strb	r2, [r3, #0]
    25e2:	f3bf 8f5f 	dmb	sy
    25e6:	b662      	cpsie	i
}
    25e8:	46c0      	nop			; (mov r8, r8)
    25ea:	46bd      	mov	sp, r7
    25ec:	bd80      	pop	{r7, pc}
    25ee:	46c0      	nop			; (mov r8, r8)
    25f0:	20000008 	.word	0x20000008

000025f4 <SysTick_Handler>:
 *  \note As this is a raw device interrupt, the function name is significant
 *        and must not be altered to ensure it is hooked into the device's
 *        vector table.
 */
void SysTick_Handler(void)
{
    25f4:	b580      	push	{r7, lr}
    25f6:	af00      	add	r7, sp, #0
	port_pin_toggle_output_level(LED_0_PIN);
    25f8:	205b      	movs	r0, #91	; 0x5b
    25fa:	4b02      	ldr	r3, [pc, #8]	; (2604 <SysTick_Handler+0x10>)
    25fc:	4798      	blx	r3
}
    25fe:	46c0      	nop			; (mov r8, r8)
    2600:	46bd      	mov	sp, r7
    2602:	bd80      	pop	{r7, pc}
    2604:	0000259d 	.word	0x0000259d

00002608 <config_led>:

/** Configure LED0, turn it off*/
static void config_led(void)
{
    2608:	b580      	push	{r7, lr}
    260a:	b082      	sub	sp, #8
    260c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    260e:	1d3b      	adds	r3, r7, #4
    2610:	0018      	movs	r0, r3
    2612:	4b09      	ldr	r3, [pc, #36]	; (2638 <config_led+0x30>)
    2614:	4798      	blx	r3

	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2616:	1d3b      	adds	r3, r7, #4
    2618:	2201      	movs	r2, #1
    261a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    261c:	1d3b      	adds	r3, r7, #4
    261e:	0019      	movs	r1, r3
    2620:	205b      	movs	r0, #91	; 0x5b
    2622:	4b06      	ldr	r3, [pc, #24]	; (263c <config_led+0x34>)
    2624:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    2626:	2101      	movs	r1, #1
    2628:	205b      	movs	r0, #91	; 0x5b
    262a:	4b05      	ldr	r3, [pc, #20]	; (2640 <config_led+0x38>)
    262c:	4798      	blx	r3
}
    262e:	46c0      	nop			; (mov r8, r8)
    2630:	46bd      	mov	sp, r7
    2632:	b002      	add	sp, #8
    2634:	bd80      	pop	{r7, pc}
    2636:	46c0      	nop			; (mov r8, r8)
    2638:	00002525 	.word	0x00002525
    263c:	00001949 	.word	0x00001949
    2640:	00002549 	.word	0x00002549

00002644 <main>:

int main(void)
{
    2644:	b580      	push	{r7, lr}
    2646:	af00      	add	r7, sp, #0
	system_init();
    2648:	4b0a      	ldr	r3, [pc, #40]	; (2674 <main+0x30>)
    264a:	4798      	blx	r3

	/*Configure system tick to generate periodic interrupts */
	SysTick_Config(system_gclk_gen_get_hz(GCLK_GENERATOR_0));
    264c:	2000      	movs	r0, #0
    264e:	4b0a      	ldr	r3, [pc, #40]	; (2678 <main+0x34>)
    2650:	4798      	blx	r3
    2652:	0003      	movs	r3, r0
    2654:	0018      	movs	r0, r3
    2656:	4b09      	ldr	r3, [pc, #36]	; (267c <main+0x38>)
    2658:	4798      	blx	r3
	
	//! [setup_init]
	configure_tc();
    265a:	4b09      	ldr	r3, [pc, #36]	; (2680 <main+0x3c>)
    265c:	4798      	blx	r3
	configure_tc_callbacks();
    265e:	4b09      	ldr	r3, [pc, #36]	; (2684 <main+0x40>)
    2660:	4798      	blx	r3
	//! [enable_global_interrupts]
	system_interrupt_enable_global();
    2662:	4b09      	ldr	r3, [pc, #36]	; (2688 <main+0x44>)
    2664:	4798      	blx	r3
	//! [enable_global_interrupts]
	

	config_led();
    2666:	4b09      	ldr	r3, [pc, #36]	; (268c <main+0x48>)
    2668:	4798      	blx	r3
	
	FreeRtosTasks();
    266a:	4b09      	ldr	r3, [pc, #36]	; (2690 <main+0x4c>)
    266c:	4798      	blx	r3
	
	vTaskStartScheduler();
    266e:	4b09      	ldr	r3, [pc, #36]	; (2694 <main+0x50>)
    2670:	4798      	blx	r3

	while (true) {
    2672:	e7fe      	b.n	2672 <main+0x2e>
    2674:	000022b9 	.word	0x000022b9
    2678:	00001ef1 	.word	0x00001ef1
    267c:	00002455 	.word	0x00002455
    2680:	000016ad 	.word	0x000016ad
    2684:	00001711 	.word	0x00001711
    2688:	000025d9 	.word	0x000025d9
    268c:	00002609 	.word	0x00002609
    2690:	00000109 	.word	0x00000109
    2694:	000007d1 	.word	0x000007d1

00002698 <__udivsi3>:
    2698:	2200      	movs	r2, #0
    269a:	0843      	lsrs	r3, r0, #1
    269c:	428b      	cmp	r3, r1
    269e:	d374      	bcc.n	278a <__udivsi3+0xf2>
    26a0:	0903      	lsrs	r3, r0, #4
    26a2:	428b      	cmp	r3, r1
    26a4:	d35f      	bcc.n	2766 <__udivsi3+0xce>
    26a6:	0a03      	lsrs	r3, r0, #8
    26a8:	428b      	cmp	r3, r1
    26aa:	d344      	bcc.n	2736 <__udivsi3+0x9e>
    26ac:	0b03      	lsrs	r3, r0, #12
    26ae:	428b      	cmp	r3, r1
    26b0:	d328      	bcc.n	2704 <__udivsi3+0x6c>
    26b2:	0c03      	lsrs	r3, r0, #16
    26b4:	428b      	cmp	r3, r1
    26b6:	d30d      	bcc.n	26d4 <__udivsi3+0x3c>
    26b8:	22ff      	movs	r2, #255	; 0xff
    26ba:	0209      	lsls	r1, r1, #8
    26bc:	ba12      	rev	r2, r2
    26be:	0c03      	lsrs	r3, r0, #16
    26c0:	428b      	cmp	r3, r1
    26c2:	d302      	bcc.n	26ca <__udivsi3+0x32>
    26c4:	1212      	asrs	r2, r2, #8
    26c6:	0209      	lsls	r1, r1, #8
    26c8:	d065      	beq.n	2796 <__udivsi3+0xfe>
    26ca:	0b03      	lsrs	r3, r0, #12
    26cc:	428b      	cmp	r3, r1
    26ce:	d319      	bcc.n	2704 <__udivsi3+0x6c>
    26d0:	e000      	b.n	26d4 <__udivsi3+0x3c>
    26d2:	0a09      	lsrs	r1, r1, #8
    26d4:	0bc3      	lsrs	r3, r0, #15
    26d6:	428b      	cmp	r3, r1
    26d8:	d301      	bcc.n	26de <__udivsi3+0x46>
    26da:	03cb      	lsls	r3, r1, #15
    26dc:	1ac0      	subs	r0, r0, r3
    26de:	4152      	adcs	r2, r2
    26e0:	0b83      	lsrs	r3, r0, #14
    26e2:	428b      	cmp	r3, r1
    26e4:	d301      	bcc.n	26ea <__udivsi3+0x52>
    26e6:	038b      	lsls	r3, r1, #14
    26e8:	1ac0      	subs	r0, r0, r3
    26ea:	4152      	adcs	r2, r2
    26ec:	0b43      	lsrs	r3, r0, #13
    26ee:	428b      	cmp	r3, r1
    26f0:	d301      	bcc.n	26f6 <__udivsi3+0x5e>
    26f2:	034b      	lsls	r3, r1, #13
    26f4:	1ac0      	subs	r0, r0, r3
    26f6:	4152      	adcs	r2, r2
    26f8:	0b03      	lsrs	r3, r0, #12
    26fa:	428b      	cmp	r3, r1
    26fc:	d301      	bcc.n	2702 <__udivsi3+0x6a>
    26fe:	030b      	lsls	r3, r1, #12
    2700:	1ac0      	subs	r0, r0, r3
    2702:	4152      	adcs	r2, r2
    2704:	0ac3      	lsrs	r3, r0, #11
    2706:	428b      	cmp	r3, r1
    2708:	d301      	bcc.n	270e <__udivsi3+0x76>
    270a:	02cb      	lsls	r3, r1, #11
    270c:	1ac0      	subs	r0, r0, r3
    270e:	4152      	adcs	r2, r2
    2710:	0a83      	lsrs	r3, r0, #10
    2712:	428b      	cmp	r3, r1
    2714:	d301      	bcc.n	271a <__udivsi3+0x82>
    2716:	028b      	lsls	r3, r1, #10
    2718:	1ac0      	subs	r0, r0, r3
    271a:	4152      	adcs	r2, r2
    271c:	0a43      	lsrs	r3, r0, #9
    271e:	428b      	cmp	r3, r1
    2720:	d301      	bcc.n	2726 <__udivsi3+0x8e>
    2722:	024b      	lsls	r3, r1, #9
    2724:	1ac0      	subs	r0, r0, r3
    2726:	4152      	adcs	r2, r2
    2728:	0a03      	lsrs	r3, r0, #8
    272a:	428b      	cmp	r3, r1
    272c:	d301      	bcc.n	2732 <__udivsi3+0x9a>
    272e:	020b      	lsls	r3, r1, #8
    2730:	1ac0      	subs	r0, r0, r3
    2732:	4152      	adcs	r2, r2
    2734:	d2cd      	bcs.n	26d2 <__udivsi3+0x3a>
    2736:	09c3      	lsrs	r3, r0, #7
    2738:	428b      	cmp	r3, r1
    273a:	d301      	bcc.n	2740 <__udivsi3+0xa8>
    273c:	01cb      	lsls	r3, r1, #7
    273e:	1ac0      	subs	r0, r0, r3
    2740:	4152      	adcs	r2, r2
    2742:	0983      	lsrs	r3, r0, #6
    2744:	428b      	cmp	r3, r1
    2746:	d301      	bcc.n	274c <__udivsi3+0xb4>
    2748:	018b      	lsls	r3, r1, #6
    274a:	1ac0      	subs	r0, r0, r3
    274c:	4152      	adcs	r2, r2
    274e:	0943      	lsrs	r3, r0, #5
    2750:	428b      	cmp	r3, r1
    2752:	d301      	bcc.n	2758 <__udivsi3+0xc0>
    2754:	014b      	lsls	r3, r1, #5
    2756:	1ac0      	subs	r0, r0, r3
    2758:	4152      	adcs	r2, r2
    275a:	0903      	lsrs	r3, r0, #4
    275c:	428b      	cmp	r3, r1
    275e:	d301      	bcc.n	2764 <__udivsi3+0xcc>
    2760:	010b      	lsls	r3, r1, #4
    2762:	1ac0      	subs	r0, r0, r3
    2764:	4152      	adcs	r2, r2
    2766:	08c3      	lsrs	r3, r0, #3
    2768:	428b      	cmp	r3, r1
    276a:	d301      	bcc.n	2770 <__udivsi3+0xd8>
    276c:	00cb      	lsls	r3, r1, #3
    276e:	1ac0      	subs	r0, r0, r3
    2770:	4152      	adcs	r2, r2
    2772:	0883      	lsrs	r3, r0, #2
    2774:	428b      	cmp	r3, r1
    2776:	d301      	bcc.n	277c <__udivsi3+0xe4>
    2778:	008b      	lsls	r3, r1, #2
    277a:	1ac0      	subs	r0, r0, r3
    277c:	4152      	adcs	r2, r2
    277e:	0843      	lsrs	r3, r0, #1
    2780:	428b      	cmp	r3, r1
    2782:	d301      	bcc.n	2788 <__udivsi3+0xf0>
    2784:	004b      	lsls	r3, r1, #1
    2786:	1ac0      	subs	r0, r0, r3
    2788:	4152      	adcs	r2, r2
    278a:	1a41      	subs	r1, r0, r1
    278c:	d200      	bcs.n	2790 <__udivsi3+0xf8>
    278e:	4601      	mov	r1, r0
    2790:	4152      	adcs	r2, r2
    2792:	4610      	mov	r0, r2
    2794:	4770      	bx	lr
    2796:	e7ff      	b.n	2798 <__udivsi3+0x100>
    2798:	b501      	push	{r0, lr}
    279a:	2000      	movs	r0, #0
    279c:	f000 f806 	bl	27ac <__aeabi_idiv0>
    27a0:	bd02      	pop	{r1, pc}
    27a2:	46c0      	nop			; (mov r8, r8)

000027a4 <__aeabi_uidivmod>:
    27a4:	2900      	cmp	r1, #0
    27a6:	d0f7      	beq.n	2798 <__udivsi3+0x100>
    27a8:	e776      	b.n	2698 <__udivsi3>
    27aa:	4770      	bx	lr

000027ac <__aeabi_idiv0>:
    27ac:	4770      	bx	lr
    27ae:	46c0      	nop			; (mov r8, r8)

000027b0 <__libc_init_array>:
    27b0:	b570      	push	{r4, r5, r6, lr}
    27b2:	2600      	movs	r6, #0
    27b4:	4d0c      	ldr	r5, [pc, #48]	; (27e8 <__libc_init_array+0x38>)
    27b6:	4c0d      	ldr	r4, [pc, #52]	; (27ec <__libc_init_array+0x3c>)
    27b8:	1b64      	subs	r4, r4, r5
    27ba:	10a4      	asrs	r4, r4, #2
    27bc:	42a6      	cmp	r6, r4
    27be:	d109      	bne.n	27d4 <__libc_init_array+0x24>
    27c0:	2600      	movs	r6, #0
    27c2:	f000 f84b 	bl	285c <_init>
    27c6:	4d0a      	ldr	r5, [pc, #40]	; (27f0 <__libc_init_array+0x40>)
    27c8:	4c0a      	ldr	r4, [pc, #40]	; (27f4 <__libc_init_array+0x44>)
    27ca:	1b64      	subs	r4, r4, r5
    27cc:	10a4      	asrs	r4, r4, #2
    27ce:	42a6      	cmp	r6, r4
    27d0:	d105      	bne.n	27de <__libc_init_array+0x2e>
    27d2:	bd70      	pop	{r4, r5, r6, pc}
    27d4:	00b3      	lsls	r3, r6, #2
    27d6:	58eb      	ldr	r3, [r5, r3]
    27d8:	4798      	blx	r3
    27da:	3601      	adds	r6, #1
    27dc:	e7ee      	b.n	27bc <__libc_init_array+0xc>
    27de:	00b3      	lsls	r3, r6, #2
    27e0:	58eb      	ldr	r3, [r5, r3]
    27e2:	4798      	blx	r3
    27e4:	3601      	adds	r6, #1
    27e6:	e7f2      	b.n	27ce <__libc_init_array+0x1e>
    27e8:	00002868 	.word	0x00002868
    27ec:	00002868 	.word	0x00002868
    27f0:	00002868 	.word	0x00002868
    27f4:	0000286c 	.word	0x0000286c
    27f8:	5f44454c 	.word	0x5f44454c
    27fc:	00004e4f 	.word	0x00004e4f
    2800:	454c4449 	.word	0x454c4449
    2804:	00000000 	.word	0x00000000
    2808:	42002000 	.word	0x42002000
    280c:	42002400 	.word	0x42002400
    2810:	42002800 	.word	0x42002800
    2814:	42002c00 	.word	0x42002c00
    2818:	18181717 	.word	0x18181717
    281c:	00000002 	.word	0x00000002
    2820:	00000100 	.word	0x00000100
    2824:	00000002 	.word	0x00000002
    2828:	00000200 	.word	0x00000200
    282c:	00000002 	.word	0x00000002
    2830:	00000400 	.word	0x00000400
    2834:	00000002 	.word	0x00000002
    2838:	00000800 	.word	0x00000800
    283c:	00001b1e 	.word	0x00001b1e
    2840:	00001b94 	.word	0x00001b94
    2844:	00001b94 	.word	0x00001b94
    2848:	00001b38 	.word	0x00001b38
    284c:	00001b3e 	.word	0x00001b3e
    2850:	00001b24 	.word	0x00001b24
    2854:	00001b44 	.word	0x00001b44
    2858:	00001b7a 	.word	0x00001b7a

0000285c <_init>:
    285c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    285e:	46c0      	nop			; (mov r8, r8)
    2860:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2862:	bc08      	pop	{r3}
    2864:	469e      	mov	lr, r3
    2866:	4770      	bx	lr

00002868 <__init_array_start>:
    2868:	000000d1 	.word	0x000000d1

0000286c <_fini>:
    286c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    286e:	46c0      	nop			; (mov r8, r8)
    2870:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2872:	bc08      	pop	{r3}
    2874:	469e      	mov	lr, r3
    2876:	4770      	bx	lr

00002878 <__fini_array_start>:
    2878:	000000a9 	.word	0x000000a9
