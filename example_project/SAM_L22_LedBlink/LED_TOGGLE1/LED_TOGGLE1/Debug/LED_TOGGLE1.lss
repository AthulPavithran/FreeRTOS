
LED_TOGGLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f60  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000008  20000000  00001f60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000038c0  20000008  00001f68  00020008  2**2
                  ALLOC
  3 .stack        00002000  200038c8  00005828  00020008  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
  6 .debug_info   00014653  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000286d  00000000  00000000  000346dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001e2f  00000000  00000000  00036f49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000628  00000000  00000000  00038d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000528  00000000  00000000  000393a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001e429  00000000  00000000  000398c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b1f6  00000000  00000000  00057cf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a1cef  00000000  00000000  00062ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000132c  00000000  00000000  00104bd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c8 58 00 20 81 1a 00 00 05 1b 00 00 05 1b 00 00     .X. ............
	...
      2c:	41 04 00 00 00 00 00 00 00 00 00 00 61 05 00 00     A...........a...
      3c:	a9 05 00 00 05 1b 00 00 05 1b 00 00 05 1b 00 00     ................
      4c:	05 1b 00 00 05 1b 00 00 05 1b 00 00 05 1b 00 00     ................
      5c:	05 1b 00 00 05 1b 00 00 05 1b 00 00 05 1b 00 00     ................
      6c:	05 1b 00 00 05 1b 00 00 05 1b 00 00 05 1b 00 00     ................
      7c:	05 1b 00 00 bd 0e 00 00 d1 0e 00 00 e5 0e 00 00     ................
      8c:	f9 0e 00 00 05 1b 00 00 05 1b 00 00 05 1b 00 00     ................
      9c:	05 1b 00 00 05 1b 00 00 05 1b 00 00                 ............

000000a8 <__do_global_dtors_aux>:
      a8:	b510      	push	{r4, lr}
      aa:	4c06      	ldr	r4, [pc, #24]	; (c4 <__do_global_dtors_aux+0x1c>)
      ac:	7823      	ldrb	r3, [r4, #0]
      ae:	2b00      	cmp	r3, #0
      b0:	d107      	bne.n	c2 <__do_global_dtors_aux+0x1a>
      b2:	4b05      	ldr	r3, [pc, #20]	; (c8 <__do_global_dtors_aux+0x20>)
      b4:	2b00      	cmp	r3, #0
      b6:	d002      	beq.n	be <__do_global_dtors_aux+0x16>
      b8:	4804      	ldr	r0, [pc, #16]	; (cc <__do_global_dtors_aux+0x24>)
      ba:	e000      	b.n	be <__do_global_dtors_aux+0x16>
      bc:	bf00      	nop
      be:	2301      	movs	r3, #1
      c0:	7023      	strb	r3, [r4, #0]
      c2:	bd10      	pop	{r4, pc}
      c4:	20000008 	.word	0x20000008
      c8:	00000000 	.word	0x00000000
      cc:	00001f60 	.word	0x00001f60

000000d0 <frame_dummy>:
      d0:	4b08      	ldr	r3, [pc, #32]	; (f4 <frame_dummy+0x24>)
      d2:	b510      	push	{r4, lr}
      d4:	2b00      	cmp	r3, #0
      d6:	d003      	beq.n	e0 <frame_dummy+0x10>
      d8:	4907      	ldr	r1, [pc, #28]	; (f8 <frame_dummy+0x28>)
      da:	4808      	ldr	r0, [pc, #32]	; (fc <frame_dummy+0x2c>)
      dc:	e000      	b.n	e0 <frame_dummy+0x10>
      de:	bf00      	nop
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x30>)
      e2:	6803      	ldr	r3, [r0, #0]
      e4:	2b00      	cmp	r3, #0
      e6:	d100      	bne.n	ea <frame_dummy+0x1a>
      e8:	bd10      	pop	{r4, pc}
      ea:	4b06      	ldr	r3, [pc, #24]	; (104 <frame_dummy+0x34>)
      ec:	2b00      	cmp	r3, #0
      ee:	d0fb      	beq.n	e8 <frame_dummy+0x18>
      f0:	4798      	blx	r3
      f2:	e7f9      	b.n	e8 <frame_dummy+0x18>
      f4:	00000000 	.word	0x00000000
      f8:	2000000c 	.word	0x2000000c
      fc:	00001f60 	.word	0x00001f60
     100:	00001f60 	.word	0x00001f60
     104:	00000000 	.word	0x00000000

00000108 <FreeRtosTasks>:
TaskHandle_t sLedOnTask;
TaskHandle_t sLedffTask;


BaseType_t FreeRtosTasks(void)
{
     108:	b590      	push	{r4, r7, lr}
     10a:	b085      	sub	sp, #20
     10c:	af02      	add	r7, sp, #8
BaseType_t u32RetType; 	
	
	u32RetType =  xTaskCreate( led_on,"LED_ON", 40, 0u, 1u,&sLedOnTask );
     10e:	4910      	ldr	r1, [pc, #64]	; (150 <FreeRtosTasks+0x48>)
     110:	4810      	ldr	r0, [pc, #64]	; (154 <FreeRtosTasks+0x4c>)
     112:	4b11      	ldr	r3, [pc, #68]	; (158 <FreeRtosTasks+0x50>)
     114:	9301      	str	r3, [sp, #4]
     116:	2301      	movs	r3, #1
     118:	9300      	str	r3, [sp, #0]
     11a:	2300      	movs	r3, #0
     11c:	2228      	movs	r2, #40	; 0x28
     11e:	4c0f      	ldr	r4, [pc, #60]	; (15c <FreeRtosTasks+0x54>)
     120:	47a0      	blx	r4
     122:	0003      	movs	r3, r0
     124:	607b      	str	r3, [r7, #4]

    if(u32RetType == 1u)
     126:	687b      	ldr	r3, [r7, #4]
     128:	2b01      	cmp	r3, #1
     12a:	d10b      	bne.n	144 <FreeRtosTasks+0x3c>
	{
		u32RetType =  xTaskCreate( led_off,"LED_FF", 40, 0u, 1u,&sLedffTask );
     12c:	490c      	ldr	r1, [pc, #48]	; (160 <FreeRtosTasks+0x58>)
     12e:	480d      	ldr	r0, [pc, #52]	; (164 <FreeRtosTasks+0x5c>)
     130:	4b0d      	ldr	r3, [pc, #52]	; (168 <FreeRtosTasks+0x60>)
     132:	9301      	str	r3, [sp, #4]
     134:	2301      	movs	r3, #1
     136:	9300      	str	r3, [sp, #0]
     138:	2300      	movs	r3, #0
     13a:	2228      	movs	r2, #40	; 0x28
     13c:	4c07      	ldr	r4, [pc, #28]	; (15c <FreeRtosTasks+0x54>)
     13e:	47a0      	blx	r4
     140:	0003      	movs	r3, r0
     142:	607b      	str	r3, [r7, #4]
	}
	

return u32RetType;
     144:	687b      	ldr	r3, [r7, #4]
     146:	0018      	movs	r0, r3
     148:	46bd      	mov	sp, r7
     14a:	b003      	add	sp, #12
     14c:	bd90      	pop	{r4, r7, pc}
     14e:	46c0      	nop			; (mov r8, r8)
     150:	00001f08 	.word	0x00001f08
     154:	00000245 	.word	0x00000245
     158:	200038b0 	.word	0x200038b0
     15c:	000006c1 	.word	0x000006c1
     160:	00001f10 	.word	0x00001f10
     164:	00000261 	.word	0x00000261
     168:	200038b4 	.word	0x200038b4

0000016c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     16c:	b580      	push	{r7, lr}
     16e:	b084      	sub	sp, #16
     170:	af00      	add	r7, sp, #0
     172:	0002      	movs	r2, r0
     174:	1dfb      	adds	r3, r7, #7
     176:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     178:	230f      	movs	r3, #15
     17a:	18fb      	adds	r3, r7, r3
     17c:	1dfa      	adds	r2, r7, #7
     17e:	7812      	ldrb	r2, [r2, #0]
     180:	09d2      	lsrs	r2, r2, #7
     182:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     184:	230e      	movs	r3, #14
     186:	18fb      	adds	r3, r7, r3
     188:	1dfa      	adds	r2, r7, #7
     18a:	7812      	ldrb	r2, [r2, #0]
     18c:	0952      	lsrs	r2, r2, #5
     18e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     190:	4b0d      	ldr	r3, [pc, #52]	; (1c8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     192:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     194:	230f      	movs	r3, #15
     196:	18fb      	adds	r3, r7, r3
     198:	781b      	ldrb	r3, [r3, #0]
     19a:	2b00      	cmp	r3, #0
     19c:	d10f      	bne.n	1be <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     19e:	230f      	movs	r3, #15
     1a0:	18fb      	adds	r3, r7, r3
     1a2:	781b      	ldrb	r3, [r3, #0]
     1a4:	009b      	lsls	r3, r3, #2
     1a6:	2210      	movs	r2, #16
     1a8:	4694      	mov	ip, r2
     1aa:	44bc      	add	ip, r7
     1ac:	4463      	add	r3, ip
     1ae:	3b08      	subs	r3, #8
     1b0:	681a      	ldr	r2, [r3, #0]
     1b2:	230e      	movs	r3, #14
     1b4:	18fb      	adds	r3, r7, r3
     1b6:	781b      	ldrb	r3, [r3, #0]
     1b8:	01db      	lsls	r3, r3, #7
     1ba:	18d3      	adds	r3, r2, r3
     1bc:	e000      	b.n	1c0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     1be:	2300      	movs	r3, #0
	}
}
     1c0:	0018      	movs	r0, r3
     1c2:	46bd      	mov	sp, r7
     1c4:	b004      	add	sp, #16
     1c6:	bd80      	pop	{r7, pc}
     1c8:	41006000 	.word	0x41006000

000001cc <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     1cc:	b580      	push	{r7, lr}
     1ce:	b082      	sub	sp, #8
     1d0:	af00      	add	r7, sp, #0
     1d2:	0002      	movs	r2, r0
     1d4:	1dfb      	adds	r3, r7, #7
     1d6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     1d8:	1dfb      	adds	r3, r7, #7
     1da:	781b      	ldrb	r3, [r3, #0]
     1dc:	0018      	movs	r0, r3
     1de:	4b03      	ldr	r3, [pc, #12]	; (1ec <port_get_group_from_gpio_pin+0x20>)
     1e0:	4798      	blx	r3
     1e2:	0003      	movs	r3, r0
}
     1e4:	0018      	movs	r0, r3
     1e6:	46bd      	mov	sp, r7
     1e8:	b002      	add	sp, #8
     1ea:	bd80      	pop	{r7, pc}
     1ec:	0000016d 	.word	0x0000016d

000001f0 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     1f0:	b580      	push	{r7, lr}
     1f2:	b084      	sub	sp, #16
     1f4:	af00      	add	r7, sp, #0
     1f6:	0002      	movs	r2, r0
     1f8:	1dfb      	adds	r3, r7, #7
     1fa:	701a      	strb	r2, [r3, #0]
     1fc:	1dbb      	adds	r3, r7, #6
     1fe:	1c0a      	adds	r2, r1, #0
     200:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     202:	1dfb      	adds	r3, r7, #7
     204:	781b      	ldrb	r3, [r3, #0]
     206:	0018      	movs	r0, r3
     208:	4b0d      	ldr	r3, [pc, #52]	; (240 <port_pin_set_output_level+0x50>)
     20a:	4798      	blx	r3
     20c:	0003      	movs	r3, r0
     20e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     210:	1dfb      	adds	r3, r7, #7
     212:	781b      	ldrb	r3, [r3, #0]
     214:	221f      	movs	r2, #31
     216:	4013      	ands	r3, r2
     218:	2201      	movs	r2, #1
     21a:	409a      	lsls	r2, r3
     21c:	0013      	movs	r3, r2
     21e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     220:	1dbb      	adds	r3, r7, #6
     222:	781b      	ldrb	r3, [r3, #0]
     224:	2b00      	cmp	r3, #0
     226:	d003      	beq.n	230 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     228:	68fb      	ldr	r3, [r7, #12]
     22a:	68ba      	ldr	r2, [r7, #8]
     22c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     22e:	e002      	b.n	236 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     230:	68fb      	ldr	r3, [r7, #12]
     232:	68ba      	ldr	r2, [r7, #8]
     234:	615a      	str	r2, [r3, #20]
}
     236:	46c0      	nop			; (mov r8, r8)
     238:	46bd      	mov	sp, r7
     23a:	b004      	add	sp, #16
     23c:	bd80      	pop	{r7, pc}
     23e:	46c0      	nop			; (mov r8, r8)
     240:	000001cd 	.word	0x000001cd

00000244 <led_on>:




void led_on(void)
{
     244:	b580      	push	{r7, lr}
     246:	af00      	add	r7, sp, #0
	while(1)
	{
		
		 port_pin_set_output_level(LED_0_PIN, true);
     248:	2101      	movs	r1, #1
     24a:	205b      	movs	r0, #91	; 0x5b
     24c:	4b02      	ldr	r3, [pc, #8]	; (258 <led_on+0x14>)
     24e:	4798      	blx	r3
		 vTaskDelay( 30 );
     250:	201e      	movs	r0, #30
     252:	4b02      	ldr	r3, [pc, #8]	; (25c <led_on+0x18>)
     254:	4798      	blx	r3
		 port_pin_set_output_level(LED_0_PIN, true);
     256:	e7f7      	b.n	248 <led_on+0x4>
     258:	000001f1 	.word	0x000001f1
     25c:	00000931 	.word	0x00000931

00000260 <led_off>:
	
}


void led_off(void)
{
     260:	b580      	push	{r7, lr}
     262:	af00      	add	r7, sp, #0
	while(1)
	{
		port_pin_set_output_level(LED_0_PIN, false);
     264:	2100      	movs	r1, #0
     266:	205b      	movs	r0, #91	; 0x5b
     268:	4b02      	ldr	r3, [pc, #8]	; (274 <led_off+0x14>)
     26a:	4798      	blx	r3
		vTaskDelay( 30 );
     26c:	201e      	movs	r0, #30
     26e:	4b02      	ldr	r3, [pc, #8]	; (278 <led_off+0x18>)
     270:	4798      	blx	r3
		port_pin_set_output_level(LED_0_PIN, false);
     272:	e7f7      	b.n	264 <led_off+0x4>
     274:	000001f1 	.word	0x000001f1
     278:	00000931 	.word	0x00000931

0000027c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     27c:	b580      	push	{r7, lr}
     27e:	b082      	sub	sp, #8
     280:	af00      	add	r7, sp, #0
     282:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     284:	687b      	ldr	r3, [r7, #4]
     286:	3308      	adds	r3, #8
     288:	001a      	movs	r2, r3
     28a:	687b      	ldr	r3, [r7, #4]
     28c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     28e:	687b      	ldr	r3, [r7, #4]
     290:	2201      	movs	r2, #1
     292:	4252      	negs	r2, r2
     294:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     296:	687b      	ldr	r3, [r7, #4]
     298:	3308      	adds	r3, #8
     29a:	001a      	movs	r2, r3
     29c:	687b      	ldr	r3, [r7, #4]
     29e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     2a0:	687b      	ldr	r3, [r7, #4]
     2a2:	3308      	adds	r3, #8
     2a4:	001a      	movs	r2, r3
     2a6:	687b      	ldr	r3, [r7, #4]
     2a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     2aa:	687b      	ldr	r3, [r7, #4]
     2ac:	2200      	movs	r2, #0
     2ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     2b0:	46c0      	nop			; (mov r8, r8)
     2b2:	46bd      	mov	sp, r7
     2b4:	b002      	add	sp, #8
     2b6:	bd80      	pop	{r7, pc}

000002b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     2b8:	b580      	push	{r7, lr}
     2ba:	b082      	sub	sp, #8
     2bc:	af00      	add	r7, sp, #0
     2be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
     2c0:	687b      	ldr	r3, [r7, #4]
     2c2:	2200      	movs	r2, #0
     2c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     2c6:	46c0      	nop			; (mov r8, r8)
     2c8:	46bd      	mov	sp, r7
     2ca:	b002      	add	sp, #8
     2cc:	bd80      	pop	{r7, pc}

000002ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     2ce:	b580      	push	{r7, lr}
     2d0:	b084      	sub	sp, #16
     2d2:	af00      	add	r7, sp, #0
     2d4:	6078      	str	r0, [r7, #4]
     2d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	685b      	ldr	r3, [r3, #4]
     2dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     2de:	683b      	ldr	r3, [r7, #0]
     2e0:	68fa      	ldr	r2, [r7, #12]
     2e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     2e4:	68fb      	ldr	r3, [r7, #12]
     2e6:	689a      	ldr	r2, [r3, #8]
     2e8:	683b      	ldr	r3, [r7, #0]
     2ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     2ec:	68fb      	ldr	r3, [r7, #12]
     2ee:	689b      	ldr	r3, [r3, #8]
     2f0:	683a      	ldr	r2, [r7, #0]
     2f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
     2f4:	68fb      	ldr	r3, [r7, #12]
     2f6:	683a      	ldr	r2, [r7, #0]
     2f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
     2fa:	683b      	ldr	r3, [r7, #0]
     2fc:	687a      	ldr	r2, [r7, #4]
     2fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
     300:	687b      	ldr	r3, [r7, #4]
     302:	681b      	ldr	r3, [r3, #0]
     304:	1c5a      	adds	r2, r3, #1
     306:	687b      	ldr	r3, [r7, #4]
     308:	601a      	str	r2, [r3, #0]
}
     30a:	46c0      	nop			; (mov r8, r8)
     30c:	46bd      	mov	sp, r7
     30e:	b004      	add	sp, #16
     310:	bd80      	pop	{r7, pc}

00000312 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     312:	b580      	push	{r7, lr}
     314:	b084      	sub	sp, #16
     316:	af00      	add	r7, sp, #0
     318:	6078      	str	r0, [r7, #4]
     31a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     31c:	683b      	ldr	r3, [r7, #0]
     31e:	681b      	ldr	r3, [r3, #0]
     320:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     322:	68bb      	ldr	r3, [r7, #8]
     324:	3301      	adds	r3, #1
     326:	d103      	bne.n	330 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     328:	687b      	ldr	r3, [r7, #4]
     32a:	691b      	ldr	r3, [r3, #16]
     32c:	60fb      	str	r3, [r7, #12]
     32e:	e00c      	b.n	34a <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     330:	687b      	ldr	r3, [r7, #4]
     332:	3308      	adds	r3, #8
     334:	60fb      	str	r3, [r7, #12]
     336:	e002      	b.n	33e <vListInsert+0x2c>
     338:	68fb      	ldr	r3, [r7, #12]
     33a:	685b      	ldr	r3, [r3, #4]
     33c:	60fb      	str	r3, [r7, #12]
     33e:	68fb      	ldr	r3, [r7, #12]
     340:	685b      	ldr	r3, [r3, #4]
     342:	681a      	ldr	r2, [r3, #0]
     344:	68bb      	ldr	r3, [r7, #8]
     346:	429a      	cmp	r2, r3
     348:	d9f6      	bls.n	338 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     34a:	68fb      	ldr	r3, [r7, #12]
     34c:	685a      	ldr	r2, [r3, #4]
     34e:	683b      	ldr	r3, [r7, #0]
     350:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     352:	683b      	ldr	r3, [r7, #0]
     354:	685b      	ldr	r3, [r3, #4]
     356:	683a      	ldr	r2, [r7, #0]
     358:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
     35a:	683b      	ldr	r3, [r7, #0]
     35c:	68fa      	ldr	r2, [r7, #12]
     35e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
     360:	68fb      	ldr	r3, [r7, #12]
     362:	683a      	ldr	r2, [r7, #0]
     364:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
     366:	683b      	ldr	r3, [r7, #0]
     368:	687a      	ldr	r2, [r7, #4]
     36a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
     36c:	687b      	ldr	r3, [r7, #4]
     36e:	681b      	ldr	r3, [r3, #0]
     370:	1c5a      	adds	r2, r3, #1
     372:	687b      	ldr	r3, [r7, #4]
     374:	601a      	str	r2, [r3, #0]
}
     376:	46c0      	nop			; (mov r8, r8)
     378:	46bd      	mov	sp, r7
     37a:	b004      	add	sp, #16
     37c:	bd80      	pop	{r7, pc}

0000037e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     37e:	b580      	push	{r7, lr}
     380:	b084      	sub	sp, #16
     382:	af00      	add	r7, sp, #0
     384:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     386:	687b      	ldr	r3, [r7, #4]
     388:	691b      	ldr	r3, [r3, #16]
     38a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     38c:	687b      	ldr	r3, [r7, #4]
     38e:	685b      	ldr	r3, [r3, #4]
     390:	687a      	ldr	r2, [r7, #4]
     392:	6892      	ldr	r2, [r2, #8]
     394:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     396:	687b      	ldr	r3, [r7, #4]
     398:	689b      	ldr	r3, [r3, #8]
     39a:	687a      	ldr	r2, [r7, #4]
     39c:	6852      	ldr	r2, [r2, #4]
     39e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     3a0:	68fb      	ldr	r3, [r7, #12]
     3a2:	685a      	ldr	r2, [r3, #4]
     3a4:	687b      	ldr	r3, [r7, #4]
     3a6:	429a      	cmp	r2, r3
     3a8:	d103      	bne.n	3b2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     3aa:	687b      	ldr	r3, [r7, #4]
     3ac:	689a      	ldr	r2, [r3, #8]
     3ae:	68fb      	ldr	r3, [r7, #12]
     3b0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
     3b2:	687b      	ldr	r3, [r7, #4]
     3b4:	2200      	movs	r2, #0
     3b6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
     3b8:	68fb      	ldr	r3, [r7, #12]
     3ba:	681b      	ldr	r3, [r3, #0]
     3bc:	1e5a      	subs	r2, r3, #1
     3be:	68fb      	ldr	r3, [r7, #12]
     3c0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
     3c2:	68fb      	ldr	r3, [r7, #12]
     3c4:	681b      	ldr	r3, [r3, #0]
}
     3c6:	0018      	movs	r0, r3
     3c8:	46bd      	mov	sp, r7
     3ca:	b004      	add	sp, #16
     3cc:	bd80      	pop	{r7, pc}
	...

000003d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
     3d0:	b580      	push	{r7, lr}
     3d2:	b084      	sub	sp, #16
     3d4:	af00      	add	r7, sp, #0
     3d6:	60f8      	str	r0, [r7, #12]
     3d8:	60b9      	str	r1, [r7, #8]
     3da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
     3dc:	68fb      	ldr	r3, [r7, #12]
     3de:	3b04      	subs	r3, #4
     3e0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
     3e2:	68fb      	ldr	r3, [r7, #12]
     3e4:	2280      	movs	r2, #128	; 0x80
     3e6:	0452      	lsls	r2, r2, #17
     3e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
     3ea:	68fb      	ldr	r3, [r7, #12]
     3ec:	3b04      	subs	r3, #4
     3ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
     3f0:	68ba      	ldr	r2, [r7, #8]
     3f2:	68fb      	ldr	r3, [r7, #12]
     3f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
     3f6:	68fb      	ldr	r3, [r7, #12]
     3f8:	3b04      	subs	r3, #4
     3fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
     3fc:	4a08      	ldr	r2, [pc, #32]	; (420 <pxPortInitialiseStack+0x50>)
     3fe:	68fb      	ldr	r3, [r7, #12]
     400:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
     402:	68fb      	ldr	r3, [r7, #12]
     404:	3b14      	subs	r3, #20
     406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
     408:	687a      	ldr	r2, [r7, #4]
     40a:	68fb      	ldr	r3, [r7, #12]
     40c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
     40e:	68fb      	ldr	r3, [r7, #12]
     410:	3b20      	subs	r3, #32
     412:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
     414:	68fb      	ldr	r3, [r7, #12]
}
     416:	0018      	movs	r0, r3
     418:	46bd      	mov	sp, r7
     41a:	b004      	add	sp, #16
     41c:	bd80      	pop	{r7, pc}
     41e:	46c0      	nop			; (mov r8, r8)
     420:	00000425 	.word	0x00000425

00000424 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
     424:	b580      	push	{r7, lr}
     426:	b082      	sub	sp, #8
     428:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
     42a:	2300      	movs	r3, #0
     42c:	607b      	str	r3, [r7, #4]
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
     42e:	b672      	cpsid	i
	while( ulDummy == 0 )
     430:	46c0      	nop			; (mov r8, r8)
     432:	687b      	ldr	r3, [r7, #4]
     434:	2b00      	cmp	r3, #0
     436:	d0fc      	beq.n	432 <prvTaskExitError+0xe>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
     438:	46c0      	nop			; (mov r8, r8)
     43a:	46bd      	mov	sp, r7
     43c:	b002      	add	sp, #8
     43e:	bd80      	pop	{r7, pc}

00000440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
     440:	b580      	push	{r7, lr}
     442:	af00      	add	r7, sp, #0

	/* This function is no longer used, but retained for backward
	compatibility. */
}
     444:	46c0      	nop			; (mov r8, r8)
     446:	46bd      	mov	sp, r7
     448:	bd80      	pop	{r7, pc}
     44a:	0000      	movs	r0, r0
     44c:	0000      	movs	r0, r0
	...

00000450 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
     450:	4a0b      	ldr	r2, [pc, #44]	; (480 <pxCurrentTCBConst2>)
     452:	6813      	ldr	r3, [r2, #0]
     454:	6818      	ldr	r0, [r3, #0]
     456:	3020      	adds	r0, #32
     458:	f380 8809 	msr	PSP, r0
     45c:	2002      	movs	r0, #2
     45e:	f380 8814 	msr	CONTROL, r0
     462:	f3bf 8f6f 	isb	sy
     466:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
     468:	46ae      	mov	lr, r5
     46a:	bc08      	pop	{r3}
     46c:	bc04      	pop	{r2}
     46e:	b662      	cpsie	i
     470:	4718      	bx	r3
     472:	46c0      	nop			; (mov r8, r8)
     474:	46c0      	nop			; (mov r8, r8)
     476:	46c0      	nop			; (mov r8, r8)
     478:	46c0      	nop			; (mov r8, r8)
     47a:	46c0      	nop			; (mov r8, r8)
     47c:	46c0      	nop			; (mov r8, r8)
     47e:	46c0      	nop			; (mov r8, r8)

00000480 <pxCurrentTCBConst2>:
     480:	200037a4 	.word	0x200037a4
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
     484:	46c0      	nop			; (mov r8, r8)
     486:	46c0      	nop			; (mov r8, r8)

00000488 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
     488:	b580      	push	{r7, lr}
     48a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
     48c:	4b0e      	ldr	r3, [pc, #56]	; (4c8 <xPortStartScheduler+0x40>)
     48e:	4a0e      	ldr	r2, [pc, #56]	; (4c8 <xPortStartScheduler+0x40>)
     490:	6812      	ldr	r2, [r2, #0]
     492:	21ff      	movs	r1, #255	; 0xff
     494:	0409      	lsls	r1, r1, #16
     496:	430a      	orrs	r2, r1
     498:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
     49a:	4b0b      	ldr	r3, [pc, #44]	; (4c8 <xPortStartScheduler+0x40>)
     49c:	4a0a      	ldr	r2, [pc, #40]	; (4c8 <xPortStartScheduler+0x40>)
     49e:	6812      	ldr	r2, [r2, #0]
     4a0:	21ff      	movs	r1, #255	; 0xff
     4a2:	0609      	lsls	r1, r1, #24
     4a4:	430a      	orrs	r2, r1
     4a6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
     4a8:	4b08      	ldr	r3, [pc, #32]	; (4cc <xPortStartScheduler+0x44>)
     4aa:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
     4ac:	4b08      	ldr	r3, [pc, #32]	; (4d0 <xPortStartScheduler+0x48>)
     4ae:	2200      	movs	r2, #0
     4b0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
     4b2:	4b08      	ldr	r3, [pc, #32]	; (4d4 <xPortStartScheduler+0x4c>)
     4b4:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
     4b6:	4b08      	ldr	r3, [pc, #32]	; (4d8 <xPortStartScheduler+0x50>)
     4b8:	4798      	blx	r3
	prvTaskExitError();
     4ba:	4b08      	ldr	r3, [pc, #32]	; (4dc <xPortStartScheduler+0x54>)
     4bc:	4798      	blx	r3

	/* Should not get here! */
	return 0;
     4be:	2300      	movs	r3, #0
}
     4c0:	0018      	movs	r0, r3
     4c2:	46bd      	mov	sp, r7
     4c4:	bd80      	pop	{r7, pc}
     4c6:	46c0      	nop			; (mov r8, r8)
     4c8:	e000ed20 	.word	0xe000ed20
     4cc:	000005e9 	.word	0x000005e9
     4d0:	20000000 	.word	0x20000000
     4d4:	00000451 	.word	0x00000451
     4d8:	00000c81 	.word	0x00000c81
     4dc:	00000425 	.word	0x00000425

000004e0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
     4e0:	b580      	push	{r7, lr}
     4e2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
     4e4:	4b05      	ldr	r3, [pc, #20]	; (4fc <vPortYield+0x1c>)
     4e6:	2280      	movs	r2, #128	; 0x80
     4e8:	0552      	lsls	r2, r2, #21
     4ea:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
     4ec:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     4f0:	f3bf 8f6f 	isb	sy
}
     4f4:	46c0      	nop			; (mov r8, r8)
     4f6:	46bd      	mov	sp, r7
     4f8:	bd80      	pop	{r7, pc}
     4fa:	46c0      	nop			; (mov r8, r8)
     4fc:	e000ed04 	.word	0xe000ed04

00000500 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
     500:	b580      	push	{r7, lr}
     502:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
     504:	b672      	cpsid	i
    uxCriticalNesting++;
     506:	4b06      	ldr	r3, [pc, #24]	; (520 <vPortEnterCritical+0x20>)
     508:	681b      	ldr	r3, [r3, #0]
     50a:	1c5a      	adds	r2, r3, #1
     50c:	4b04      	ldr	r3, [pc, #16]	; (520 <vPortEnterCritical+0x20>)
     50e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
     510:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     514:	f3bf 8f6f 	isb	sy
}
     518:	46c0      	nop			; (mov r8, r8)
     51a:	46bd      	mov	sp, r7
     51c:	bd80      	pop	{r7, pc}
     51e:	46c0      	nop			; (mov r8, r8)
     520:	20000000 	.word	0x20000000

00000524 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
     524:	b580      	push	{r7, lr}
     526:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
     528:	4b06      	ldr	r3, [pc, #24]	; (544 <vPortExitCritical+0x20>)
     52a:	681b      	ldr	r3, [r3, #0]
     52c:	1e5a      	subs	r2, r3, #1
     52e:	4b05      	ldr	r3, [pc, #20]	; (544 <vPortExitCritical+0x20>)
     530:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
     532:	4b04      	ldr	r3, [pc, #16]	; (544 <vPortExitCritical+0x20>)
     534:	681b      	ldr	r3, [r3, #0]
     536:	2b00      	cmp	r3, #0
     538:	d100      	bne.n	53c <vPortExitCritical+0x18>
    {
        portENABLE_INTERRUPTS();
     53a:	b662      	cpsie	i
    }
}
     53c:	46c0      	nop			; (mov r8, r8)
     53e:	46bd      	mov	sp, r7
     540:	bd80      	pop	{r7, pc}
     542:	46c0      	nop			; (mov r8, r8)
     544:	20000000 	.word	0x20000000

00000548 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
     548:	f3ef 8010 	mrs	r0, PRIMASK
     54c:	b672      	cpsid	i
     54e:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
     550:	46c0      	nop			; (mov r8, r8)
     552:	0018      	movs	r0, r3

00000554 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
     554:	f380 8810 	msr	PRIMASK, r0
     558:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
     55a:	46c0      	nop			; (mov r8, r8)
     55c:	0000      	movs	r0, r0
	...

00000560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
     560:	f3ef 8009 	mrs	r0, PSP
     564:	4b0e      	ldr	r3, [pc, #56]	; (5a0 <pxCurrentTCBConst>)
     566:	681a      	ldr	r2, [r3, #0]
     568:	3820      	subs	r0, #32
     56a:	6010      	str	r0, [r2, #0]
     56c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     56e:	4644      	mov	r4, r8
     570:	464d      	mov	r5, r9
     572:	4656      	mov	r6, sl
     574:	465f      	mov	r7, fp
     576:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     578:	b508      	push	{r3, lr}
     57a:	b672      	cpsid	i
     57c:	f000 fb80 	bl	c80 <vTaskSwitchContext>
     580:	b662      	cpsie	i
     582:	bc0c      	pop	{r2, r3}
     584:	6811      	ldr	r1, [r2, #0]
     586:	6808      	ldr	r0, [r1, #0]
     588:	3010      	adds	r0, #16
     58a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     58c:	46a0      	mov	r8, r4
     58e:	46a9      	mov	r9, r5
     590:	46b2      	mov	sl, r6
     592:	46bb      	mov	fp, r7
     594:	f380 8809 	msr	PSP, r0
     598:	3820      	subs	r0, #32
     59a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     59c:	4718      	bx	r3
     59e:	46c0      	nop			; (mov r8, r8)

000005a0 <pxCurrentTCBConst>:
     5a0:	200037a4 	.word	0x200037a4
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
     5a4:	46c0      	nop			; (mov r8, r8)
     5a6:	46c0      	nop			; (mov r8, r8)

000005a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
     5a8:	b580      	push	{r7, lr}
     5aa:	b082      	sub	sp, #8
     5ac:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
     5ae:	4b0a      	ldr	r3, [pc, #40]	; (5d8 <SysTick_Handler+0x30>)
     5b0:	4798      	blx	r3
     5b2:	0003      	movs	r3, r0
     5b4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
     5b6:	4b09      	ldr	r3, [pc, #36]	; (5dc <SysTick_Handler+0x34>)
     5b8:	4798      	blx	r3
     5ba:	1e03      	subs	r3, r0, #0
     5bc:	d003      	beq.n	5c6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
     5be:	4b08      	ldr	r3, [pc, #32]	; (5e0 <SysTick_Handler+0x38>)
     5c0:	2280      	movs	r2, #128	; 0x80
     5c2:	0552      	lsls	r2, r2, #21
     5c4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
     5c6:	687b      	ldr	r3, [r7, #4]
     5c8:	0018      	movs	r0, r3
     5ca:	4b06      	ldr	r3, [pc, #24]	; (5e4 <SysTick_Handler+0x3c>)
     5cc:	4798      	blx	r3
}
     5ce:	46c0      	nop			; (mov r8, r8)
     5d0:	46bd      	mov	sp, r7
     5d2:	b002      	add	sp, #8
     5d4:	bd80      	pop	{r7, pc}
     5d6:	46c0      	nop			; (mov r8, r8)
     5d8:	00000549 	.word	0x00000549
     5dc:	00000b25 	.word	0x00000b25
     5e0:	e000ed04 	.word	0xe000ed04
     5e4:	00000555 	.word	0x00000555

000005e8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
     5e8:	b580      	push	{r7, lr}
     5ea:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
     5ec:	4b07      	ldr	r3, [pc, #28]	; (60c <prvSetupTimerInterrupt+0x24>)
     5ee:	2200      	movs	r2, #0
     5f0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
     5f2:	4b07      	ldr	r3, [pc, #28]	; (610 <prvSetupTimerInterrupt+0x28>)
     5f4:	2200      	movs	r2, #0
     5f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
     5f8:	4b06      	ldr	r3, [pc, #24]	; (614 <prvSetupTimerInterrupt+0x2c>)
     5fa:	4a07      	ldr	r2, [pc, #28]	; (618 <prvSetupTimerInterrupt+0x30>)
     5fc:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
     5fe:	4b03      	ldr	r3, [pc, #12]	; (60c <prvSetupTimerInterrupt+0x24>)
     600:	2207      	movs	r2, #7
     602:	601a      	str	r2, [r3, #0]
}
     604:	46c0      	nop			; (mov r8, r8)
     606:	46bd      	mov	sp, r7
     608:	bd80      	pop	{r7, pc}
     60a:	46c0      	nop			; (mov r8, r8)
     60c:	e000e010 	.word	0xe000e010
     610:	e000e018 	.word	0xe000e018
     614:	e000e014 	.word	0xe000e014
     618:	0000bb32 	.word	0x0000bb32

0000061c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     61c:	b580      	push	{r7, lr}
     61e:	b084      	sub	sp, #16
     620:	af00      	add	r7, sp, #0
     622:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
     624:	2300      	movs	r3, #0
     626:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
     628:	687b      	ldr	r3, [r7, #4]
     62a:	2207      	movs	r2, #7
     62c:	4013      	ands	r3, r2
     62e:	d004      	beq.n	63a <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
     630:	687b      	ldr	r3, [r7, #4]
     632:	2207      	movs	r2, #7
     634:	4393      	bics	r3, r2
     636:	3308      	adds	r3, #8
     638:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
     63a:	4b17      	ldr	r3, [pc, #92]	; (698 <pvPortMalloc+0x7c>)
     63c:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
     63e:	4b17      	ldr	r3, [pc, #92]	; (69c <pvPortMalloc+0x80>)
     640:	681b      	ldr	r3, [r3, #0]
     642:	2b00      	cmp	r3, #0
     644:	d105      	bne.n	652 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     646:	4b16      	ldr	r3, [pc, #88]	; (6a0 <pvPortMalloc+0x84>)
     648:	2207      	movs	r2, #7
     64a:	4393      	bics	r3, r2
     64c:	001a      	movs	r2, r3
     64e:	4b13      	ldr	r3, [pc, #76]	; (69c <pvPortMalloc+0x80>)
     650:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     652:	4b14      	ldr	r3, [pc, #80]	; (6a4 <pvPortMalloc+0x88>)
     654:	681a      	ldr	r2, [r3, #0]
     656:	687b      	ldr	r3, [r7, #4]
     658:	18d3      	adds	r3, r2, r3
     65a:	4a13      	ldr	r2, [pc, #76]	; (6a8 <pvPortMalloc+0x8c>)
     65c:	4293      	cmp	r3, r2
     65e:	d813      	bhi.n	688 <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
     660:	4b10      	ldr	r3, [pc, #64]	; (6a4 <pvPortMalloc+0x88>)
     662:	681a      	ldr	r2, [r3, #0]
     664:	687b      	ldr	r3, [r7, #4]
     666:	18d2      	adds	r2, r2, r3
     668:	4b0e      	ldr	r3, [pc, #56]	; (6a4 <pvPortMalloc+0x88>)
     66a:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     66c:	429a      	cmp	r2, r3
     66e:	d90b      	bls.n	688 <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     670:	4b0a      	ldr	r3, [pc, #40]	; (69c <pvPortMalloc+0x80>)
     672:	681a      	ldr	r2, [r3, #0]
     674:	4b0b      	ldr	r3, [pc, #44]	; (6a4 <pvPortMalloc+0x88>)
     676:	681b      	ldr	r3, [r3, #0]
     678:	18d3      	adds	r3, r2, r3
     67a:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
     67c:	4b09      	ldr	r3, [pc, #36]	; (6a4 <pvPortMalloc+0x88>)
     67e:	681a      	ldr	r2, [r3, #0]
     680:	687b      	ldr	r3, [r7, #4]
     682:	18d2      	adds	r2, r2, r3
     684:	4b07      	ldr	r3, [pc, #28]	; (6a4 <pvPortMalloc+0x88>)
     686:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     688:	4b08      	ldr	r3, [pc, #32]	; (6ac <pvPortMalloc+0x90>)
     68a:	4798      	blx	r3
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
     68c:	68fb      	ldr	r3, [r7, #12]
}
     68e:	0018      	movs	r0, r3
     690:	46bd      	mov	sp, r7
     692:	b004      	add	sp, #16
     694:	bd80      	pop	{r7, pc}
     696:	46c0      	nop			; (mov r8, r8)
     698:	000009e5 	.word	0x000009e5
     69c:	200037a0 	.word	0x200037a0
     6a0:	2000002c 	.word	0x2000002c
     6a4:	2000379c 	.word	0x2000379c
     6a8:	0000376f 	.word	0x0000376f
     6ac:	000009fd 	.word	0x000009fd

000006b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     6b0:	b580      	push	{r7, lr}
     6b2:	b082      	sub	sp, #8
     6b4:	af00      	add	r7, sp, #0
     6b6:	6078      	str	r0, [r7, #4]
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
     6b8:	46c0      	nop			; (mov r8, r8)
     6ba:	46bd      	mov	sp, r7
     6bc:	b002      	add	sp, #8
     6be:	bd80      	pop	{r7, pc}

000006c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
     6c0:	b590      	push	{r4, r7, lr}
     6c2:	b08d      	sub	sp, #52	; 0x34
     6c4:	af04      	add	r7, sp, #16
     6c6:	60f8      	str	r0, [r7, #12]
     6c8:	60b9      	str	r1, [r7, #8]
     6ca:	603b      	str	r3, [r7, #0]
     6cc:	1dbb      	adds	r3, r7, #6
     6ce:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
     6d0:	1dbb      	adds	r3, r7, #6
     6d2:	881b      	ldrh	r3, [r3, #0]
     6d4:	009b      	lsls	r3, r3, #2
     6d6:	0018      	movs	r0, r3
     6d8:	4b1d      	ldr	r3, [pc, #116]	; (750 <xTaskCreate+0x90>)
     6da:	4798      	blx	r3
     6dc:	0003      	movs	r3, r0
     6de:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
     6e0:	697b      	ldr	r3, [r7, #20]
     6e2:	2b00      	cmp	r3, #0
     6e4:	d010      	beq.n	708 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
     6e6:	204c      	movs	r0, #76	; 0x4c
     6e8:	4b19      	ldr	r3, [pc, #100]	; (750 <xTaskCreate+0x90>)
     6ea:	4798      	blx	r3
     6ec:	0003      	movs	r3, r0
     6ee:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
     6f0:	69fb      	ldr	r3, [r7, #28]
     6f2:	2b00      	cmp	r3, #0
     6f4:	d003      	beq.n	6fe <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
     6f6:	69fb      	ldr	r3, [r7, #28]
     6f8:	697a      	ldr	r2, [r7, #20]
     6fa:	631a      	str	r2, [r3, #48]	; 0x30
     6fc:	e006      	b.n	70c <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
     6fe:	697b      	ldr	r3, [r7, #20]
     700:	0018      	movs	r0, r3
     702:	4b14      	ldr	r3, [pc, #80]	; (754 <xTaskCreate+0x94>)
     704:	4798      	blx	r3
     706:	e001      	b.n	70c <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
     708:	2300      	movs	r3, #0
     70a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
     70c:	69fb      	ldr	r3, [r7, #28]
     70e:	2b00      	cmp	r3, #0
     710:	d016      	beq.n	740 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
     712:	1dbb      	adds	r3, r7, #6
     714:	881a      	ldrh	r2, [r3, #0]
     716:	683c      	ldr	r4, [r7, #0]
     718:	68b9      	ldr	r1, [r7, #8]
     71a:	68f8      	ldr	r0, [r7, #12]
     71c:	2300      	movs	r3, #0
     71e:	9303      	str	r3, [sp, #12]
     720:	69fb      	ldr	r3, [r7, #28]
     722:	9302      	str	r3, [sp, #8]
     724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     726:	9301      	str	r3, [sp, #4]
     728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     72a:	9300      	str	r3, [sp, #0]
     72c:	0023      	movs	r3, r4
     72e:	4c0a      	ldr	r4, [pc, #40]	; (758 <xTaskCreate+0x98>)
     730:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
     732:	69fb      	ldr	r3, [r7, #28]
     734:	0018      	movs	r0, r3
     736:	4b09      	ldr	r3, [pc, #36]	; (75c <xTaskCreate+0x9c>)
     738:	4798      	blx	r3
			xReturn = pdPASS;
     73a:	2301      	movs	r3, #1
     73c:	61bb      	str	r3, [r7, #24]
     73e:	e002      	b.n	746 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     740:	2301      	movs	r3, #1
     742:	425b      	negs	r3, r3
     744:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
     746:	69bb      	ldr	r3, [r7, #24]
	}
     748:	0018      	movs	r0, r3
     74a:	46bd      	mov	sp, r7
     74c:	b009      	add	sp, #36	; 0x24
     74e:	bd90      	pop	{r4, r7, pc}
     750:	0000061d 	.word	0x0000061d
     754:	000006b1 	.word	0x000006b1
     758:	00000761 	.word	0x00000761
     75c:	00000855 	.word	0x00000855

00000760 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
     760:	b580      	push	{r7, lr}
     762:	b086      	sub	sp, #24
     764:	af00      	add	r7, sp, #0
     766:	60f8      	str	r0, [r7, #12]
     768:	60b9      	str	r1, [r7, #8]
     76a:	607a      	str	r2, [r7, #4]
     76c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
     76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
     770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
     772:	687b      	ldr	r3, [r7, #4]
     774:	4934      	ldr	r1, [pc, #208]	; (848 <prvInitialiseNewTask+0xe8>)
     776:	468c      	mov	ip, r1
     778:	4463      	add	r3, ip
     77a:	009b      	lsls	r3, r3, #2
     77c:	18d3      	adds	r3, r2, r3
     77e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
     780:	693b      	ldr	r3, [r7, #16]
     782:	2207      	movs	r2, #7
     784:	4393      	bics	r3, r2
     786:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
     788:	68bb      	ldr	r3, [r7, #8]
     78a:	2b00      	cmp	r3, #0
     78c:	d020      	beq.n	7d0 <prvInitialiseNewTask+0x70>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
     78e:	2300      	movs	r3, #0
     790:	617b      	str	r3, [r7, #20]
     792:	e013      	b.n	7bc <prvInitialiseNewTask+0x5c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
     794:	68ba      	ldr	r2, [r7, #8]
     796:	697b      	ldr	r3, [r7, #20]
     798:	18d3      	adds	r3, r2, r3
     79a:	7818      	ldrb	r0, [r3, #0]
     79c:	6aba      	ldr	r2, [r7, #40]	; 0x28
     79e:	2134      	movs	r1, #52	; 0x34
     7a0:	697b      	ldr	r3, [r7, #20]
     7a2:	18d3      	adds	r3, r2, r3
     7a4:	185b      	adds	r3, r3, r1
     7a6:	1c02      	adds	r2, r0, #0
     7a8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
     7aa:	68ba      	ldr	r2, [r7, #8]
     7ac:	697b      	ldr	r3, [r7, #20]
     7ae:	18d3      	adds	r3, r2, r3
     7b0:	781b      	ldrb	r3, [r3, #0]
     7b2:	2b00      	cmp	r3, #0
     7b4:	d006      	beq.n	7c4 <prvInitialiseNewTask+0x64>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
     7b6:	697b      	ldr	r3, [r7, #20]
     7b8:	3301      	adds	r3, #1
     7ba:	617b      	str	r3, [r7, #20]
     7bc:	697b      	ldr	r3, [r7, #20]
     7be:	2b0f      	cmp	r3, #15
     7c0:	d9e8      	bls.n	794 <prvInitialiseNewTask+0x34>
     7c2:	e000      	b.n	7c6 <prvInitialiseNewTask+0x66>
			{
				break;
     7c4:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
     7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
     7c8:	2243      	movs	r2, #67	; 0x43
     7ca:	2100      	movs	r1, #0
     7cc:	5499      	strb	r1, [r3, r2]
     7ce:	e003      	b.n	7d8 <prvInitialiseNewTask+0x78>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
     7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
     7d2:	2234      	movs	r2, #52	; 0x34
     7d4:	2100      	movs	r1, #0
     7d6:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
     7d8:	6a3b      	ldr	r3, [r7, #32]
     7da:	2b04      	cmp	r3, #4
     7dc:	d901      	bls.n	7e2 <prvInitialiseNewTask+0x82>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
     7de:	2304      	movs	r3, #4
     7e0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
     7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
     7e4:	6a3a      	ldr	r2, [r7, #32]
     7e6:	62da      	str	r2, [r3, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
     7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
     7ea:	3304      	adds	r3, #4
     7ec:	0018      	movs	r0, r3
     7ee:	4b17      	ldr	r3, [pc, #92]	; (84c <prvInitialiseNewTask+0xec>)
     7f0:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
     7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
     7f4:	3318      	adds	r3, #24
     7f6:	0018      	movs	r0, r3
     7f8:	4b14      	ldr	r3, [pc, #80]	; (84c <prvInitialiseNewTask+0xec>)
     7fa:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
     7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
     7fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
     800:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     802:	6a3b      	ldr	r3, [r7, #32]
     804:	2205      	movs	r2, #5
     806:	1ad2      	subs	r2, r2, r3
     808:	6abb      	ldr	r3, [r7, #40]	; 0x28
     80a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
     80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
     80e:	6aba      	ldr	r2, [r7, #40]	; 0x28
     810:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
     812:	6abb      	ldr	r3, [r7, #40]	; 0x28
     814:	2200      	movs	r2, #0
     816:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
     818:	6abb      	ldr	r3, [r7, #40]	; 0x28
     81a:	2248      	movs	r2, #72	; 0x48
     81c:	2100      	movs	r1, #0
     81e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
     820:	683a      	ldr	r2, [r7, #0]
     822:	68f9      	ldr	r1, [r7, #12]
     824:	693b      	ldr	r3, [r7, #16]
     826:	0018      	movs	r0, r3
     828:	4b09      	ldr	r3, [pc, #36]	; (850 <prvInitialiseNewTask+0xf0>)
     82a:	4798      	blx	r3
     82c:	0002      	movs	r2, r0
     82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
     830:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
     832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     834:	2b00      	cmp	r3, #0
     836:	d002      	beq.n	83e <prvInitialiseNewTask+0xde>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
     838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     83a:	6aba      	ldr	r2, [r7, #40]	; 0x28
     83c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
     83e:	46c0      	nop			; (mov r8, r8)
     840:	46bd      	mov	sp, r7
     842:	b006      	add	sp, #24
     844:	bd80      	pop	{r7, pc}
     846:	46c0      	nop			; (mov r8, r8)
     848:	3fffffff 	.word	0x3fffffff
     84c:	000002b9 	.word	0x000002b9
     850:	000003d1 	.word	0x000003d1

00000854 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
     854:	b580      	push	{r7, lr}
     856:	b082      	sub	sp, #8
     858:	af00      	add	r7, sp, #0
     85a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
     85c:	4b29      	ldr	r3, [pc, #164]	; (904 <prvAddNewTaskToReadyList+0xb0>)
     85e:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
     860:	4b29      	ldr	r3, [pc, #164]	; (908 <prvAddNewTaskToReadyList+0xb4>)
     862:	681b      	ldr	r3, [r3, #0]
     864:	1c5a      	adds	r2, r3, #1
     866:	4b28      	ldr	r3, [pc, #160]	; (908 <prvAddNewTaskToReadyList+0xb4>)
     868:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
     86a:	4b28      	ldr	r3, [pc, #160]	; (90c <prvAddNewTaskToReadyList+0xb8>)
     86c:	681b      	ldr	r3, [r3, #0]
     86e:	2b00      	cmp	r3, #0
     870:	d109      	bne.n	886 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
     872:	4b26      	ldr	r3, [pc, #152]	; (90c <prvAddNewTaskToReadyList+0xb8>)
     874:	687a      	ldr	r2, [r7, #4]
     876:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
     878:	4b23      	ldr	r3, [pc, #140]	; (908 <prvAddNewTaskToReadyList+0xb4>)
     87a:	681b      	ldr	r3, [r3, #0]
     87c:	2b01      	cmp	r3, #1
     87e:	d110      	bne.n	8a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
     880:	4b23      	ldr	r3, [pc, #140]	; (910 <prvAddNewTaskToReadyList+0xbc>)
     882:	4798      	blx	r3
     884:	e00d      	b.n	8a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
     886:	4b23      	ldr	r3, [pc, #140]	; (914 <prvAddNewTaskToReadyList+0xc0>)
     888:	681b      	ldr	r3, [r3, #0]
     88a:	2b00      	cmp	r3, #0
     88c:	d109      	bne.n	8a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
     88e:	4b1f      	ldr	r3, [pc, #124]	; (90c <prvAddNewTaskToReadyList+0xb8>)
     890:	681b      	ldr	r3, [r3, #0]
     892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     894:	687b      	ldr	r3, [r7, #4]
     896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     898:	429a      	cmp	r2, r3
     89a:	d802      	bhi.n	8a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
     89c:	4b1b      	ldr	r3, [pc, #108]	; (90c <prvAddNewTaskToReadyList+0xb8>)
     89e:	687a      	ldr	r2, [r7, #4]
     8a0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
     8a2:	4b1d      	ldr	r3, [pc, #116]	; (918 <prvAddNewTaskToReadyList+0xc4>)
     8a4:	681b      	ldr	r3, [r3, #0]
     8a6:	1c5a      	adds	r2, r3, #1
     8a8:	4b1b      	ldr	r3, [pc, #108]	; (918 <prvAddNewTaskToReadyList+0xc4>)
     8aa:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
     8ac:	687b      	ldr	r3, [r7, #4]
     8ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     8b0:	4b1a      	ldr	r3, [pc, #104]	; (91c <prvAddNewTaskToReadyList+0xc8>)
     8b2:	681b      	ldr	r3, [r3, #0]
     8b4:	429a      	cmp	r2, r3
     8b6:	d903      	bls.n	8c0 <prvAddNewTaskToReadyList+0x6c>
     8b8:	687b      	ldr	r3, [r7, #4]
     8ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     8bc:	4b17      	ldr	r3, [pc, #92]	; (91c <prvAddNewTaskToReadyList+0xc8>)
     8be:	601a      	str	r2, [r3, #0]
     8c0:	687b      	ldr	r3, [r7, #4]
     8c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     8c4:	0013      	movs	r3, r2
     8c6:	009b      	lsls	r3, r3, #2
     8c8:	189b      	adds	r3, r3, r2
     8ca:	009b      	lsls	r3, r3, #2
     8cc:	4a14      	ldr	r2, [pc, #80]	; (920 <prvAddNewTaskToReadyList+0xcc>)
     8ce:	189a      	adds	r2, r3, r2
     8d0:	687b      	ldr	r3, [r7, #4]
     8d2:	3304      	adds	r3, #4
     8d4:	0019      	movs	r1, r3
     8d6:	0010      	movs	r0, r2
     8d8:	4b12      	ldr	r3, [pc, #72]	; (924 <prvAddNewTaskToReadyList+0xd0>)
     8da:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
     8dc:	4b12      	ldr	r3, [pc, #72]	; (928 <prvAddNewTaskToReadyList+0xd4>)
     8de:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
     8e0:	4b0c      	ldr	r3, [pc, #48]	; (914 <prvAddNewTaskToReadyList+0xc0>)
     8e2:	681b      	ldr	r3, [r3, #0]
     8e4:	2b00      	cmp	r3, #0
     8e6:	d008      	beq.n	8fa <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
     8e8:	4b08      	ldr	r3, [pc, #32]	; (90c <prvAddNewTaskToReadyList+0xb8>)
     8ea:	681b      	ldr	r3, [r3, #0]
     8ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     8ee:	687b      	ldr	r3, [r7, #4]
     8f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     8f2:	429a      	cmp	r2, r3
     8f4:	d201      	bcs.n	8fa <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
     8f6:	4b0d      	ldr	r3, [pc, #52]	; (92c <prvAddNewTaskToReadyList+0xd8>)
     8f8:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
     8fa:	46c0      	nop			; (mov r8, r8)
     8fc:	46bd      	mov	sp, r7
     8fe:	b002      	add	sp, #8
     900:	bd80      	pop	{r7, pc}
     902:	46c0      	nop			; (mov r8, r8)
     904:	00000501 	.word	0x00000501
     908:	20003864 	.word	0x20003864
     90c:	200037a4 	.word	0x200037a4
     910:	00000d41 	.word	0x00000d41
     914:	20003870 	.word	0x20003870
     918:	20003880 	.word	0x20003880
     91c:	2000386c 	.word	0x2000386c
     920:	200037a8 	.word	0x200037a8
     924:	000002cf 	.word	0x000002cf
     928:	00000525 	.word	0x00000525
     92c:	000004e1 	.word	0x000004e1

00000930 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
     930:	b580      	push	{r7, lr}
     932:	b084      	sub	sp, #16
     934:	af00      	add	r7, sp, #0
     936:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
     938:	2300      	movs	r3, #0
     93a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
     93c:	687b      	ldr	r3, [r7, #4]
     93e:	2b00      	cmp	r3, #0
     940:	d00a      	beq.n	958 <vTaskDelay+0x28>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
     942:	4b0a      	ldr	r3, [pc, #40]	; (96c <vTaskDelay+0x3c>)
     944:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
     946:	687b      	ldr	r3, [r7, #4]
     948:	2100      	movs	r1, #0
     94a:	0018      	movs	r0, r3
     94c:	4b08      	ldr	r3, [pc, #32]	; (970 <vTaskDelay+0x40>)
     94e:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
     950:	4b08      	ldr	r3, [pc, #32]	; (974 <vTaskDelay+0x44>)
     952:	4798      	blx	r3
     954:	0003      	movs	r3, r0
     956:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
     958:	68fb      	ldr	r3, [r7, #12]
     95a:	2b00      	cmp	r3, #0
     95c:	d101      	bne.n	962 <vTaskDelay+0x32>
		{
			portYIELD_WITHIN_API();
     95e:	4b06      	ldr	r3, [pc, #24]	; (978 <vTaskDelay+0x48>)
     960:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
     962:	46c0      	nop			; (mov r8, r8)
     964:	46bd      	mov	sp, r7
     966:	b004      	add	sp, #16
     968:	bd80      	pop	{r7, pc}
     96a:	46c0      	nop			; (mov r8, r8)
     96c:	000009e5 	.word	0x000009e5
     970:	00000e09 	.word	0x00000e09
     974:	000009fd 	.word	0x000009fd
     978:	000004e1 	.word	0x000004e1

0000097c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
     97c:	b590      	push	{r4, r7, lr}
     97e:	b085      	sub	sp, #20
     980:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
     982:	4910      	ldr	r1, [pc, #64]	; (9c4 <vTaskStartScheduler+0x48>)
     984:	4810      	ldr	r0, [pc, #64]	; (9c8 <vTaskStartScheduler+0x4c>)
     986:	4b11      	ldr	r3, [pc, #68]	; (9cc <vTaskStartScheduler+0x50>)
     988:	9301      	str	r3, [sp, #4]
     98a:	2300      	movs	r3, #0
     98c:	9300      	str	r3, [sp, #0]
     98e:	2300      	movs	r3, #0
     990:	2264      	movs	r2, #100	; 0x64
     992:	4c0f      	ldr	r4, [pc, #60]	; (9d0 <vTaskStartScheduler+0x54>)
     994:	47a0      	blx	r4
     996:	0003      	movs	r3, r0
     998:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
     99a:	687b      	ldr	r3, [r7, #4]
     99c:	2b01      	cmp	r3, #1
     99e:	d10c      	bne.n	9ba <vTaskStartScheduler+0x3e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
     9a0:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
     9a2:	4b0c      	ldr	r3, [pc, #48]	; (9d4 <vTaskStartScheduler+0x58>)
     9a4:	2201      	movs	r2, #1
     9a6:	4252      	negs	r2, r2
     9a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
     9aa:	4b0b      	ldr	r3, [pc, #44]	; (9d8 <vTaskStartScheduler+0x5c>)
     9ac:	2201      	movs	r2, #1
     9ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
     9b0:	4b0a      	ldr	r3, [pc, #40]	; (9dc <vTaskStartScheduler+0x60>)
     9b2:	2200      	movs	r2, #0
     9b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
     9b6:	4b0a      	ldr	r3, [pc, #40]	; (9e0 <vTaskStartScheduler+0x64>)
     9b8:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
     9ba:	46c0      	nop			; (mov r8, r8)
     9bc:	46bd      	mov	sp, r7
     9be:	b003      	add	sp, #12
     9c0:	bd90      	pop	{r4, r7, pc}
     9c2:	46c0      	nop			; (mov r8, r8)
     9c4:	00001f18 	.word	0x00001f18
     9c8:	00000d19 	.word	0x00000d19
     9cc:	20003888 	.word	0x20003888
     9d0:	000006c1 	.word	0x000006c1
     9d4:	20003884 	.word	0x20003884
     9d8:	20003870 	.word	0x20003870
     9dc:	20003868 	.word	0x20003868
     9e0:	00000489 	.word	0x00000489

000009e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
     9e4:	b580      	push	{r7, lr}
     9e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
     9e8:	4b03      	ldr	r3, [pc, #12]	; (9f8 <vTaskSuspendAll+0x14>)
     9ea:	681b      	ldr	r3, [r3, #0]
     9ec:	1c5a      	adds	r2, r3, #1
     9ee:	4b02      	ldr	r3, [pc, #8]	; (9f8 <vTaskSuspendAll+0x14>)
     9f0:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
     9f2:	46c0      	nop			; (mov r8, r8)
     9f4:	46bd      	mov	sp, r7
     9f6:	bd80      	pop	{r7, pc}
     9f8:	2000388c 	.word	0x2000388c

000009fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
     9fc:	b580      	push	{r7, lr}
     9fe:	b084      	sub	sp, #16
     a00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
     a02:	2300      	movs	r3, #0
     a04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
     a06:	2300      	movs	r3, #0
     a08:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
     a0a:	4b37      	ldr	r3, [pc, #220]	; (ae8 <xTaskResumeAll+0xec>)
     a0c:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
     a0e:	4b37      	ldr	r3, [pc, #220]	; (aec <xTaskResumeAll+0xf0>)
     a10:	681b      	ldr	r3, [r3, #0]
     a12:	1e5a      	subs	r2, r3, #1
     a14:	4b35      	ldr	r3, [pc, #212]	; (aec <xTaskResumeAll+0xf0>)
     a16:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     a18:	4b34      	ldr	r3, [pc, #208]	; (aec <xTaskResumeAll+0xf0>)
     a1a:	681b      	ldr	r3, [r3, #0]
     a1c:	2b00      	cmp	r3, #0
     a1e:	d15b      	bne.n	ad8 <xTaskResumeAll+0xdc>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
     a20:	4b33      	ldr	r3, [pc, #204]	; (af0 <xTaskResumeAll+0xf4>)
     a22:	681b      	ldr	r3, [r3, #0]
     a24:	2b00      	cmp	r3, #0
     a26:	d057      	beq.n	ad8 <xTaskResumeAll+0xdc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
     a28:	e02f      	b.n	a8a <xTaskResumeAll+0x8e>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     a2a:	4b32      	ldr	r3, [pc, #200]	; (af4 <xTaskResumeAll+0xf8>)
     a2c:	68db      	ldr	r3, [r3, #12]
     a2e:	68db      	ldr	r3, [r3, #12]
     a30:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
     a32:	68fb      	ldr	r3, [r7, #12]
     a34:	3318      	adds	r3, #24
     a36:	0018      	movs	r0, r3
     a38:	4b2f      	ldr	r3, [pc, #188]	; (af8 <xTaskResumeAll+0xfc>)
     a3a:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     a3c:	68fb      	ldr	r3, [r7, #12]
     a3e:	3304      	adds	r3, #4
     a40:	0018      	movs	r0, r3
     a42:	4b2d      	ldr	r3, [pc, #180]	; (af8 <xTaskResumeAll+0xfc>)
     a44:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
     a46:	68fb      	ldr	r3, [r7, #12]
     a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     a4a:	4b2c      	ldr	r3, [pc, #176]	; (afc <xTaskResumeAll+0x100>)
     a4c:	681b      	ldr	r3, [r3, #0]
     a4e:	429a      	cmp	r2, r3
     a50:	d903      	bls.n	a5a <xTaskResumeAll+0x5e>
     a52:	68fb      	ldr	r3, [r7, #12]
     a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     a56:	4b29      	ldr	r3, [pc, #164]	; (afc <xTaskResumeAll+0x100>)
     a58:	601a      	str	r2, [r3, #0]
     a5a:	68fb      	ldr	r3, [r7, #12]
     a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     a5e:	0013      	movs	r3, r2
     a60:	009b      	lsls	r3, r3, #2
     a62:	189b      	adds	r3, r3, r2
     a64:	009b      	lsls	r3, r3, #2
     a66:	4a26      	ldr	r2, [pc, #152]	; (b00 <xTaskResumeAll+0x104>)
     a68:	189a      	adds	r2, r3, r2
     a6a:	68fb      	ldr	r3, [r7, #12]
     a6c:	3304      	adds	r3, #4
     a6e:	0019      	movs	r1, r3
     a70:	0010      	movs	r0, r2
     a72:	4b24      	ldr	r3, [pc, #144]	; (b04 <xTaskResumeAll+0x108>)
     a74:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     a76:	68fb      	ldr	r3, [r7, #12]
     a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     a7a:	4b23      	ldr	r3, [pc, #140]	; (b08 <xTaskResumeAll+0x10c>)
     a7c:	681b      	ldr	r3, [r3, #0]
     a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     a80:	429a      	cmp	r2, r3
     a82:	d302      	bcc.n	a8a <xTaskResumeAll+0x8e>
					{
						xYieldPending = pdTRUE;
     a84:	4b21      	ldr	r3, [pc, #132]	; (b0c <xTaskResumeAll+0x110>)
     a86:	2201      	movs	r2, #1
     a88:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
     a8a:	4b1a      	ldr	r3, [pc, #104]	; (af4 <xTaskResumeAll+0xf8>)
     a8c:	681b      	ldr	r3, [r3, #0]
     a8e:	2b00      	cmp	r3, #0
     a90:	d1cb      	bne.n	a2a <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
     a92:	68fb      	ldr	r3, [r7, #12]
     a94:	2b00      	cmp	r3, #0
     a96:	d001      	beq.n	a9c <xTaskResumeAll+0xa0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
     a98:	4b1d      	ldr	r3, [pc, #116]	; (b10 <xTaskResumeAll+0x114>)
     a9a:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
     a9c:	4b1d      	ldr	r3, [pc, #116]	; (b14 <xTaskResumeAll+0x118>)
     a9e:	681b      	ldr	r3, [r3, #0]
     aa0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
     aa2:	687b      	ldr	r3, [r7, #4]
     aa4:	2b00      	cmp	r3, #0
     aa6:	d00f      	beq.n	ac8 <xTaskResumeAll+0xcc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
     aa8:	4b1b      	ldr	r3, [pc, #108]	; (b18 <xTaskResumeAll+0x11c>)
     aaa:	4798      	blx	r3
     aac:	1e03      	subs	r3, r0, #0
     aae:	d002      	beq.n	ab6 <xTaskResumeAll+0xba>
							{
								xYieldPending = pdTRUE;
     ab0:	4b16      	ldr	r3, [pc, #88]	; (b0c <xTaskResumeAll+0x110>)
     ab2:	2201      	movs	r2, #1
     ab4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
     ab6:	687b      	ldr	r3, [r7, #4]
     ab8:	3b01      	subs	r3, #1
     aba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
     abc:	687b      	ldr	r3, [r7, #4]
     abe:	2b00      	cmp	r3, #0
     ac0:	d1f2      	bne.n	aa8 <xTaskResumeAll+0xac>

						uxPendedTicks = 0;
     ac2:	4b14      	ldr	r3, [pc, #80]	; (b14 <xTaskResumeAll+0x118>)
     ac4:	2200      	movs	r2, #0
     ac6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
     ac8:	4b10      	ldr	r3, [pc, #64]	; (b0c <xTaskResumeAll+0x110>)
     aca:	681b      	ldr	r3, [r3, #0]
     acc:	2b00      	cmp	r3, #0
     ace:	d003      	beq.n	ad8 <xTaskResumeAll+0xdc>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
     ad0:	2301      	movs	r3, #1
     ad2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
     ad4:	4b11      	ldr	r3, [pc, #68]	; (b1c <xTaskResumeAll+0x120>)
     ad6:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
     ad8:	4b11      	ldr	r3, [pc, #68]	; (b20 <xTaskResumeAll+0x124>)
     ada:	4798      	blx	r3

	return xAlreadyYielded;
     adc:	68bb      	ldr	r3, [r7, #8]
}
     ade:	0018      	movs	r0, r3
     ae0:	46bd      	mov	sp, r7
     ae2:	b004      	add	sp, #16
     ae4:	bd80      	pop	{r7, pc}
     ae6:	46c0      	nop			; (mov r8, r8)
     ae8:	00000501 	.word	0x00000501
     aec:	2000388c 	.word	0x2000388c
     af0:	20003864 	.word	0x20003864
     af4:	2000383c 	.word	0x2000383c
     af8:	0000037f 	.word	0x0000037f
     afc:	2000386c 	.word	0x2000386c
     b00:	200037a8 	.word	0x200037a8
     b04:	000002cf 	.word	0x000002cf
     b08:	200037a4 	.word	0x200037a4
     b0c:	20003878 	.word	0x20003878
     b10:	00000dcd 	.word	0x00000dcd
     b14:	20003874 	.word	0x20003874
     b18:	00000b25 	.word	0x00000b25
     b1c:	000004e1 	.word	0x000004e1
     b20:	00000525 	.word	0x00000525

00000b24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
     b24:	b580      	push	{r7, lr}
     b26:	b086      	sub	sp, #24
     b28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
     b2a:	2300      	movs	r3, #0
     b2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     b2e:	4b46      	ldr	r3, [pc, #280]	; (c48 <xTaskIncrementTick+0x124>)
     b30:	681b      	ldr	r3, [r3, #0]
     b32:	2b00      	cmp	r3, #0
     b34:	d000      	beq.n	b38 <xTaskIncrementTick+0x14>
     b36:	e077      	b.n	c28 <xTaskIncrementTick+0x104>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
     b38:	4b44      	ldr	r3, [pc, #272]	; (c4c <xTaskIncrementTick+0x128>)
     b3a:	681b      	ldr	r3, [r3, #0]
     b3c:	3301      	adds	r3, #1
     b3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
     b40:	4b42      	ldr	r3, [pc, #264]	; (c4c <xTaskIncrementTick+0x128>)
     b42:	693a      	ldr	r2, [r7, #16]
     b44:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
     b46:	693b      	ldr	r3, [r7, #16]
     b48:	2b00      	cmp	r3, #0
     b4a:	d110      	bne.n	b6e <xTaskIncrementTick+0x4a>
		{
			taskSWITCH_DELAYED_LISTS();
     b4c:	4b40      	ldr	r3, [pc, #256]	; (c50 <xTaskIncrementTick+0x12c>)
     b4e:	681b      	ldr	r3, [r3, #0]
     b50:	60fb      	str	r3, [r7, #12]
     b52:	4b40      	ldr	r3, [pc, #256]	; (c54 <xTaskIncrementTick+0x130>)
     b54:	681a      	ldr	r2, [r3, #0]
     b56:	4b3e      	ldr	r3, [pc, #248]	; (c50 <xTaskIncrementTick+0x12c>)
     b58:	601a      	str	r2, [r3, #0]
     b5a:	4b3e      	ldr	r3, [pc, #248]	; (c54 <xTaskIncrementTick+0x130>)
     b5c:	68fa      	ldr	r2, [r7, #12]
     b5e:	601a      	str	r2, [r3, #0]
     b60:	4b3d      	ldr	r3, [pc, #244]	; (c58 <xTaskIncrementTick+0x134>)
     b62:	681b      	ldr	r3, [r3, #0]
     b64:	1c5a      	adds	r2, r3, #1
     b66:	4b3c      	ldr	r3, [pc, #240]	; (c58 <xTaskIncrementTick+0x134>)
     b68:	601a      	str	r2, [r3, #0]
     b6a:	4b3c      	ldr	r3, [pc, #240]	; (c5c <xTaskIncrementTick+0x138>)
     b6c:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
     b6e:	4b3c      	ldr	r3, [pc, #240]	; (c60 <xTaskIncrementTick+0x13c>)
     b70:	681b      	ldr	r3, [r3, #0]
     b72:	693a      	ldr	r2, [r7, #16]
     b74:	429a      	cmp	r2, r3
     b76:	d349      	bcc.n	c0c <xTaskIncrementTick+0xe8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     b78:	4b35      	ldr	r3, [pc, #212]	; (c50 <xTaskIncrementTick+0x12c>)
     b7a:	681b      	ldr	r3, [r3, #0]
     b7c:	681b      	ldr	r3, [r3, #0]
     b7e:	2b00      	cmp	r3, #0
     b80:	d104      	bne.n	b8c <xTaskIncrementTick+0x68>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     b82:	4b37      	ldr	r3, [pc, #220]	; (c60 <xTaskIncrementTick+0x13c>)
     b84:	2201      	movs	r2, #1
     b86:	4252      	negs	r2, r2
     b88:	601a      	str	r2, [r3, #0]
					break;
     b8a:	e03f      	b.n	c0c <xTaskIncrementTick+0xe8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     b8c:	4b30      	ldr	r3, [pc, #192]	; (c50 <xTaskIncrementTick+0x12c>)
     b8e:	681b      	ldr	r3, [r3, #0]
     b90:	68db      	ldr	r3, [r3, #12]
     b92:	68db      	ldr	r3, [r3, #12]
     b94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
     b96:	68bb      	ldr	r3, [r7, #8]
     b98:	685b      	ldr	r3, [r3, #4]
     b9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
     b9c:	693a      	ldr	r2, [r7, #16]
     b9e:	687b      	ldr	r3, [r7, #4]
     ba0:	429a      	cmp	r2, r3
     ba2:	d203      	bcs.n	bac <xTaskIncrementTick+0x88>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
     ba4:	4b2e      	ldr	r3, [pc, #184]	; (c60 <xTaskIncrementTick+0x13c>)
     ba6:	687a      	ldr	r2, [r7, #4]
     ba8:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
     baa:	e02f      	b.n	c0c <xTaskIncrementTick+0xe8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     bac:	68bb      	ldr	r3, [r7, #8]
     bae:	3304      	adds	r3, #4
     bb0:	0018      	movs	r0, r3
     bb2:	4b2c      	ldr	r3, [pc, #176]	; (c64 <xTaskIncrementTick+0x140>)
     bb4:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
     bb6:	68bb      	ldr	r3, [r7, #8]
     bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     bba:	2b00      	cmp	r3, #0
     bbc:	d004      	beq.n	bc8 <xTaskIncrementTick+0xa4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
     bbe:	68bb      	ldr	r3, [r7, #8]
     bc0:	3318      	adds	r3, #24
     bc2:	0018      	movs	r0, r3
     bc4:	4b27      	ldr	r3, [pc, #156]	; (c64 <xTaskIncrementTick+0x140>)
     bc6:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
     bc8:	68bb      	ldr	r3, [r7, #8]
     bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     bcc:	4b26      	ldr	r3, [pc, #152]	; (c68 <xTaskIncrementTick+0x144>)
     bce:	681b      	ldr	r3, [r3, #0]
     bd0:	429a      	cmp	r2, r3
     bd2:	d903      	bls.n	bdc <xTaskIncrementTick+0xb8>
     bd4:	68bb      	ldr	r3, [r7, #8]
     bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     bd8:	4b23      	ldr	r3, [pc, #140]	; (c68 <xTaskIncrementTick+0x144>)
     bda:	601a      	str	r2, [r3, #0]
     bdc:	68bb      	ldr	r3, [r7, #8]
     bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     be0:	0013      	movs	r3, r2
     be2:	009b      	lsls	r3, r3, #2
     be4:	189b      	adds	r3, r3, r2
     be6:	009b      	lsls	r3, r3, #2
     be8:	4a20      	ldr	r2, [pc, #128]	; (c6c <xTaskIncrementTick+0x148>)
     bea:	189a      	adds	r2, r3, r2
     bec:	68bb      	ldr	r3, [r7, #8]
     bee:	3304      	adds	r3, #4
     bf0:	0019      	movs	r1, r3
     bf2:	0010      	movs	r0, r2
     bf4:	4b1e      	ldr	r3, [pc, #120]	; (c70 <xTaskIncrementTick+0x14c>)
     bf6:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     bf8:	68bb      	ldr	r3, [r7, #8]
     bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     bfc:	4b1d      	ldr	r3, [pc, #116]	; (c74 <xTaskIncrementTick+0x150>)
     bfe:	681b      	ldr	r3, [r3, #0]
     c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     c02:	429a      	cmp	r2, r3
     c04:	d3b8      	bcc.n	b78 <xTaskIncrementTick+0x54>
						{
							xSwitchRequired = pdTRUE;
     c06:	2301      	movs	r3, #1
     c08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     c0a:	e7b5      	b.n	b78 <xTaskIncrementTick+0x54>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
     c0c:	4b19      	ldr	r3, [pc, #100]	; (c74 <xTaskIncrementTick+0x150>)
     c0e:	681b      	ldr	r3, [r3, #0]
     c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     c12:	4916      	ldr	r1, [pc, #88]	; (c6c <xTaskIncrementTick+0x148>)
     c14:	0013      	movs	r3, r2
     c16:	009b      	lsls	r3, r3, #2
     c18:	189b      	adds	r3, r3, r2
     c1a:	009b      	lsls	r3, r3, #2
     c1c:	585b      	ldr	r3, [r3, r1]
     c1e:	2b01      	cmp	r3, #1
     c20:	d907      	bls.n	c32 <xTaskIncrementTick+0x10e>
			{
				xSwitchRequired = pdTRUE;
     c22:	2301      	movs	r3, #1
     c24:	617b      	str	r3, [r7, #20]
     c26:	e004      	b.n	c32 <xTaskIncrementTick+0x10e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
     c28:	4b13      	ldr	r3, [pc, #76]	; (c78 <xTaskIncrementTick+0x154>)
     c2a:	681b      	ldr	r3, [r3, #0]
     c2c:	1c5a      	adds	r2, r3, #1
     c2e:	4b12      	ldr	r3, [pc, #72]	; (c78 <xTaskIncrementTick+0x154>)
     c30:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
     c32:	4b12      	ldr	r3, [pc, #72]	; (c7c <xTaskIncrementTick+0x158>)
     c34:	681b      	ldr	r3, [r3, #0]
     c36:	2b00      	cmp	r3, #0
     c38:	d001      	beq.n	c3e <xTaskIncrementTick+0x11a>
		{
			xSwitchRequired = pdTRUE;
     c3a:	2301      	movs	r3, #1
     c3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
     c3e:	697b      	ldr	r3, [r7, #20]
}
     c40:	0018      	movs	r0, r3
     c42:	46bd      	mov	sp, r7
     c44:	b006      	add	sp, #24
     c46:	bd80      	pop	{r7, pc}
     c48:	2000388c 	.word	0x2000388c
     c4c:	20003868 	.word	0x20003868
     c50:	20003834 	.word	0x20003834
     c54:	20003838 	.word	0x20003838
     c58:	2000387c 	.word	0x2000387c
     c5c:	00000dcd 	.word	0x00000dcd
     c60:	20003884 	.word	0x20003884
     c64:	0000037f 	.word	0x0000037f
     c68:	2000386c 	.word	0x2000386c
     c6c:	200037a8 	.word	0x200037a8
     c70:	000002cf 	.word	0x000002cf
     c74:	200037a4 	.word	0x200037a4
     c78:	20003874 	.word	0x20003874
     c7c:	20003878 	.word	0x20003878

00000c80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
     c80:	b580      	push	{r7, lr}
     c82:	b082      	sub	sp, #8
     c84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     c86:	4b1f      	ldr	r3, [pc, #124]	; (d04 <vTaskSwitchContext+0x84>)
     c88:	681b      	ldr	r3, [r3, #0]
     c8a:	2b00      	cmp	r3, #0
     c8c:	d003      	beq.n	c96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
     c8e:	4b1e      	ldr	r3, [pc, #120]	; (d08 <vTaskSwitchContext+0x88>)
     c90:	2201      	movs	r2, #1
     c92:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
     c94:	e032      	b.n	cfc <vTaskSwitchContext+0x7c>
		xYieldPending = pdFALSE;
     c96:	4b1c      	ldr	r3, [pc, #112]	; (d08 <vTaskSwitchContext+0x88>)
     c98:	2200      	movs	r2, #0
     c9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     c9c:	4b1b      	ldr	r3, [pc, #108]	; (d0c <vTaskSwitchContext+0x8c>)
     c9e:	681b      	ldr	r3, [r3, #0]
     ca0:	607b      	str	r3, [r7, #4]
     ca2:	e002      	b.n	caa <vTaskSwitchContext+0x2a>
     ca4:	687b      	ldr	r3, [r7, #4]
     ca6:	3b01      	subs	r3, #1
     ca8:	607b      	str	r3, [r7, #4]
     caa:	4919      	ldr	r1, [pc, #100]	; (d10 <vTaskSwitchContext+0x90>)
     cac:	687a      	ldr	r2, [r7, #4]
     cae:	0013      	movs	r3, r2
     cb0:	009b      	lsls	r3, r3, #2
     cb2:	189b      	adds	r3, r3, r2
     cb4:	009b      	lsls	r3, r3, #2
     cb6:	585b      	ldr	r3, [r3, r1]
     cb8:	2b00      	cmp	r3, #0
     cba:	d0f3      	beq.n	ca4 <vTaskSwitchContext+0x24>
     cbc:	687a      	ldr	r2, [r7, #4]
     cbe:	0013      	movs	r3, r2
     cc0:	009b      	lsls	r3, r3, #2
     cc2:	189b      	adds	r3, r3, r2
     cc4:	009b      	lsls	r3, r3, #2
     cc6:	4a12      	ldr	r2, [pc, #72]	; (d10 <vTaskSwitchContext+0x90>)
     cc8:	189b      	adds	r3, r3, r2
     cca:	603b      	str	r3, [r7, #0]
     ccc:	683b      	ldr	r3, [r7, #0]
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	685a      	ldr	r2, [r3, #4]
     cd2:	683b      	ldr	r3, [r7, #0]
     cd4:	605a      	str	r2, [r3, #4]
     cd6:	683b      	ldr	r3, [r7, #0]
     cd8:	685a      	ldr	r2, [r3, #4]
     cda:	683b      	ldr	r3, [r7, #0]
     cdc:	3308      	adds	r3, #8
     cde:	429a      	cmp	r2, r3
     ce0:	d104      	bne.n	cec <vTaskSwitchContext+0x6c>
     ce2:	683b      	ldr	r3, [r7, #0]
     ce4:	685b      	ldr	r3, [r3, #4]
     ce6:	685a      	ldr	r2, [r3, #4]
     ce8:	683b      	ldr	r3, [r7, #0]
     cea:	605a      	str	r2, [r3, #4]
     cec:	683b      	ldr	r3, [r7, #0]
     cee:	685b      	ldr	r3, [r3, #4]
     cf0:	68da      	ldr	r2, [r3, #12]
     cf2:	4b08      	ldr	r3, [pc, #32]	; (d14 <vTaskSwitchContext+0x94>)
     cf4:	601a      	str	r2, [r3, #0]
     cf6:	4b05      	ldr	r3, [pc, #20]	; (d0c <vTaskSwitchContext+0x8c>)
     cf8:	687a      	ldr	r2, [r7, #4]
     cfa:	601a      	str	r2, [r3, #0]
}
     cfc:	46c0      	nop			; (mov r8, r8)
     cfe:	46bd      	mov	sp, r7
     d00:	b002      	add	sp, #8
     d02:	bd80      	pop	{r7, pc}
     d04:	2000388c 	.word	0x2000388c
     d08:	20003878 	.word	0x20003878
     d0c:	2000386c 	.word	0x2000386c
     d10:	200037a8 	.word	0x200037a8
     d14:	200037a4 	.word	0x200037a4

00000d18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
     d18:	b580      	push	{r7, lr}
     d1a:	b082      	sub	sp, #8
     d1c:	af00      	add	r7, sp, #0
     d1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
     d20:	4b04      	ldr	r3, [pc, #16]	; (d34 <prvIdleTask+0x1c>)
     d22:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
     d24:	4b04      	ldr	r3, [pc, #16]	; (d38 <prvIdleTask+0x20>)
     d26:	681b      	ldr	r3, [r3, #0]
     d28:	2b01      	cmp	r3, #1
     d2a:	d9f9      	bls.n	d20 <prvIdleTask+0x8>
			{
				taskYIELD();
     d2c:	4b03      	ldr	r3, [pc, #12]	; (d3c <prvIdleTask+0x24>)
     d2e:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
     d30:	e7f6      	b.n	d20 <prvIdleTask+0x8>
     d32:	46c0      	nop			; (mov r8, r8)
     d34:	00000dc1 	.word	0x00000dc1
     d38:	200037a8 	.word	0x200037a8
     d3c:	000004e1 	.word	0x000004e1

00000d40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
     d40:	b580      	push	{r7, lr}
     d42:	b082      	sub	sp, #8
     d44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
     d46:	2300      	movs	r3, #0
     d48:	607b      	str	r3, [r7, #4]
     d4a:	e00c      	b.n	d66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
     d4c:	687a      	ldr	r2, [r7, #4]
     d4e:	0013      	movs	r3, r2
     d50:	009b      	lsls	r3, r3, #2
     d52:	189b      	adds	r3, r3, r2
     d54:	009b      	lsls	r3, r3, #2
     d56:	4a12      	ldr	r2, [pc, #72]	; (da0 <prvInitialiseTaskLists+0x60>)
     d58:	189b      	adds	r3, r3, r2
     d5a:	0018      	movs	r0, r3
     d5c:	4b11      	ldr	r3, [pc, #68]	; (da4 <prvInitialiseTaskLists+0x64>)
     d5e:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	3301      	adds	r3, #1
     d64:	607b      	str	r3, [r7, #4]
     d66:	687b      	ldr	r3, [r7, #4]
     d68:	2b04      	cmp	r3, #4
     d6a:	d9ef      	bls.n	d4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
     d6c:	4b0e      	ldr	r3, [pc, #56]	; (da8 <prvInitialiseTaskLists+0x68>)
     d6e:	0018      	movs	r0, r3
     d70:	4b0c      	ldr	r3, [pc, #48]	; (da4 <prvInitialiseTaskLists+0x64>)
     d72:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
     d74:	4b0d      	ldr	r3, [pc, #52]	; (dac <prvInitialiseTaskLists+0x6c>)
     d76:	0018      	movs	r0, r3
     d78:	4b0a      	ldr	r3, [pc, #40]	; (da4 <prvInitialiseTaskLists+0x64>)
     d7a:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
     d7c:	4b0c      	ldr	r3, [pc, #48]	; (db0 <prvInitialiseTaskLists+0x70>)
     d7e:	0018      	movs	r0, r3
     d80:	4b08      	ldr	r3, [pc, #32]	; (da4 <prvInitialiseTaskLists+0x64>)
     d82:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
     d84:	4b0b      	ldr	r3, [pc, #44]	; (db4 <prvInitialiseTaskLists+0x74>)
     d86:	0018      	movs	r0, r3
     d88:	4b06      	ldr	r3, [pc, #24]	; (da4 <prvInitialiseTaskLists+0x64>)
     d8a:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
     d8c:	4b0a      	ldr	r3, [pc, #40]	; (db8 <prvInitialiseTaskLists+0x78>)
     d8e:	4a06      	ldr	r2, [pc, #24]	; (da8 <prvInitialiseTaskLists+0x68>)
     d90:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
     d92:	4b0a      	ldr	r3, [pc, #40]	; (dbc <prvInitialiseTaskLists+0x7c>)
     d94:	4a05      	ldr	r2, [pc, #20]	; (dac <prvInitialiseTaskLists+0x6c>)
     d96:	601a      	str	r2, [r3, #0]
}
     d98:	46c0      	nop			; (mov r8, r8)
     d9a:	46bd      	mov	sp, r7
     d9c:	b002      	add	sp, #8
     d9e:	bd80      	pop	{r7, pc}
     da0:	200037a8 	.word	0x200037a8
     da4:	0000027d 	.word	0x0000027d
     da8:	2000380c 	.word	0x2000380c
     dac:	20003820 	.word	0x20003820
     db0:	2000383c 	.word	0x2000383c
     db4:	20003850 	.word	0x20003850
     db8:	20003834 	.word	0x20003834
     dbc:	20003838 	.word	0x20003838

00000dc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
     dc0:	b580      	push	{r7, lr}
     dc2:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
     dc4:	46c0      	nop			; (mov r8, r8)
     dc6:	46bd      	mov	sp, r7
     dc8:	bd80      	pop	{r7, pc}
	...

00000dcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
     dcc:	b580      	push	{r7, lr}
     dce:	b082      	sub	sp, #8
     dd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     dd2:	4b0b      	ldr	r3, [pc, #44]	; (e00 <prvResetNextTaskUnblockTime+0x34>)
     dd4:	681b      	ldr	r3, [r3, #0]
     dd6:	681b      	ldr	r3, [r3, #0]
     dd8:	2b00      	cmp	r3, #0
     dda:	d104      	bne.n	de6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
     ddc:	4b09      	ldr	r3, [pc, #36]	; (e04 <prvResetNextTaskUnblockTime+0x38>)
     dde:	2201      	movs	r2, #1
     de0:	4252      	negs	r2, r2
     de2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
     de4:	e008      	b.n	df8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     de6:	4b06      	ldr	r3, [pc, #24]	; (e00 <prvResetNextTaskUnblockTime+0x34>)
     de8:	681b      	ldr	r3, [r3, #0]
     dea:	68db      	ldr	r3, [r3, #12]
     dec:	68db      	ldr	r3, [r3, #12]
     dee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
     df0:	687b      	ldr	r3, [r7, #4]
     df2:	685a      	ldr	r2, [r3, #4]
     df4:	4b03      	ldr	r3, [pc, #12]	; (e04 <prvResetNextTaskUnblockTime+0x38>)
     df6:	601a      	str	r2, [r3, #0]
}
     df8:	46c0      	nop			; (mov r8, r8)
     dfa:	46bd      	mov	sp, r7
     dfc:	b002      	add	sp, #8
     dfe:	bd80      	pop	{r7, pc}
     e00:	20003834 	.word	0x20003834
     e04:	20003884 	.word	0x20003884

00000e08 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
     e08:	b580      	push	{r7, lr}
     e0a:	b084      	sub	sp, #16
     e0c:	af00      	add	r7, sp, #0
     e0e:	6078      	str	r0, [r7, #4]
     e10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
     e12:	4b21      	ldr	r3, [pc, #132]	; (e98 <prvAddCurrentTaskToDelayedList+0x90>)
     e14:	681b      	ldr	r3, [r3, #0]
     e16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
     e18:	4b20      	ldr	r3, [pc, #128]	; (e9c <prvAddCurrentTaskToDelayedList+0x94>)
     e1a:	681b      	ldr	r3, [r3, #0]
     e1c:	3304      	adds	r3, #4
     e1e:	0018      	movs	r0, r3
     e20:	4b1f      	ldr	r3, [pc, #124]	; (ea0 <prvAddCurrentTaskToDelayedList+0x98>)
     e22:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
     e24:	687b      	ldr	r3, [r7, #4]
     e26:	3301      	adds	r3, #1
     e28:	d10b      	bne.n	e42 <prvAddCurrentTaskToDelayedList+0x3a>
     e2a:	683b      	ldr	r3, [r7, #0]
     e2c:	2b00      	cmp	r3, #0
     e2e:	d008      	beq.n	e42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
     e30:	4b1a      	ldr	r3, [pc, #104]	; (e9c <prvAddCurrentTaskToDelayedList+0x94>)
     e32:	681b      	ldr	r3, [r3, #0]
     e34:	1d1a      	adds	r2, r3, #4
     e36:	4b1b      	ldr	r3, [pc, #108]	; (ea4 <prvAddCurrentTaskToDelayedList+0x9c>)
     e38:	0011      	movs	r1, r2
     e3a:	0018      	movs	r0, r3
     e3c:	4b1a      	ldr	r3, [pc, #104]	; (ea8 <prvAddCurrentTaskToDelayedList+0xa0>)
     e3e:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
     e40:	e026      	b.n	e90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
     e42:	68fa      	ldr	r2, [r7, #12]
     e44:	687b      	ldr	r3, [r7, #4]
     e46:	18d3      	adds	r3, r2, r3
     e48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
     e4a:	4b14      	ldr	r3, [pc, #80]	; (e9c <prvAddCurrentTaskToDelayedList+0x94>)
     e4c:	681b      	ldr	r3, [r3, #0]
     e4e:	68ba      	ldr	r2, [r7, #8]
     e50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
     e52:	68ba      	ldr	r2, [r7, #8]
     e54:	68fb      	ldr	r3, [r7, #12]
     e56:	429a      	cmp	r2, r3
     e58:	d209      	bcs.n	e6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
     e5a:	4b14      	ldr	r3, [pc, #80]	; (eac <prvAddCurrentTaskToDelayedList+0xa4>)
     e5c:	681a      	ldr	r2, [r3, #0]
     e5e:	4b0f      	ldr	r3, [pc, #60]	; (e9c <prvAddCurrentTaskToDelayedList+0x94>)
     e60:	681b      	ldr	r3, [r3, #0]
     e62:	3304      	adds	r3, #4
     e64:	0019      	movs	r1, r3
     e66:	0010      	movs	r0, r2
     e68:	4b11      	ldr	r3, [pc, #68]	; (eb0 <prvAddCurrentTaskToDelayedList+0xa8>)
     e6a:	4798      	blx	r3
}
     e6c:	e010      	b.n	e90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
     e6e:	4b11      	ldr	r3, [pc, #68]	; (eb4 <prvAddCurrentTaskToDelayedList+0xac>)
     e70:	681a      	ldr	r2, [r3, #0]
     e72:	4b0a      	ldr	r3, [pc, #40]	; (e9c <prvAddCurrentTaskToDelayedList+0x94>)
     e74:	681b      	ldr	r3, [r3, #0]
     e76:	3304      	adds	r3, #4
     e78:	0019      	movs	r1, r3
     e7a:	0010      	movs	r0, r2
     e7c:	4b0c      	ldr	r3, [pc, #48]	; (eb0 <prvAddCurrentTaskToDelayedList+0xa8>)
     e7e:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
     e80:	4b0d      	ldr	r3, [pc, #52]	; (eb8 <prvAddCurrentTaskToDelayedList+0xb0>)
     e82:	681b      	ldr	r3, [r3, #0]
     e84:	68ba      	ldr	r2, [r7, #8]
     e86:	429a      	cmp	r2, r3
     e88:	d202      	bcs.n	e90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
     e8a:	4b0b      	ldr	r3, [pc, #44]	; (eb8 <prvAddCurrentTaskToDelayedList+0xb0>)
     e8c:	68ba      	ldr	r2, [r7, #8]
     e8e:	601a      	str	r2, [r3, #0]
}
     e90:	46c0      	nop			; (mov r8, r8)
     e92:	46bd      	mov	sp, r7
     e94:	b004      	add	sp, #16
     e96:	bd80      	pop	{r7, pc}
     e98:	20003868 	.word	0x20003868
     e9c:	200037a4 	.word	0x200037a4
     ea0:	0000037f 	.word	0x0000037f
     ea4:	20003850 	.word	0x20003850
     ea8:	000002cf 	.word	0x000002cf
     eac:	20003838 	.word	0x20003838
     eb0:	00000313 	.word	0x00000313
     eb4:	20003834 	.word	0x20003834
     eb8:	20003884 	.word	0x20003884

00000ebc <TC0_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     ebc:	b580      	push	{r7, lr}
     ebe:	af00      	add	r7, sp, #0
     ec0:	2000      	movs	r0, #0
     ec2:	4b02      	ldr	r3, [pc, #8]	; (ecc <TC0_Handler+0x10>)
     ec4:	4798      	blx	r3
     ec6:	46c0      	nop			; (mov r8, r8)
     ec8:	46bd      	mov	sp, r7
     eca:	bd80      	pop	{r7, pc}
     ecc:	00000f0d 	.word	0x00000f0d

00000ed0 <TC1_Handler>:
     ed0:	b580      	push	{r7, lr}
     ed2:	af00      	add	r7, sp, #0
     ed4:	2001      	movs	r0, #1
     ed6:	4b02      	ldr	r3, [pc, #8]	; (ee0 <TC1_Handler+0x10>)
     ed8:	4798      	blx	r3
     eda:	46c0      	nop			; (mov r8, r8)
     edc:	46bd      	mov	sp, r7
     ede:	bd80      	pop	{r7, pc}
     ee0:	00000f0d 	.word	0x00000f0d

00000ee4 <TC2_Handler>:
     ee4:	b580      	push	{r7, lr}
     ee6:	af00      	add	r7, sp, #0
     ee8:	2002      	movs	r0, #2
     eea:	4b02      	ldr	r3, [pc, #8]	; (ef4 <TC2_Handler+0x10>)
     eec:	4798      	blx	r3
     eee:	46c0      	nop			; (mov r8, r8)
     ef0:	46bd      	mov	sp, r7
     ef2:	bd80      	pop	{r7, pc}
     ef4:	00000f0d 	.word	0x00000f0d

00000ef8 <TC3_Handler>:
     ef8:	b580      	push	{r7, lr}
     efa:	af00      	add	r7, sp, #0
     efc:	2003      	movs	r0, #3
     efe:	4b02      	ldr	r3, [pc, #8]	; (f08 <TC3_Handler+0x10>)
     f00:	4798      	blx	r3
     f02:	46c0      	nop			; (mov r8, r8)
     f04:	46bd      	mov	sp, r7
     f06:	bd80      	pop	{r7, pc}
     f08:	00000f0d 	.word	0x00000f0d

00000f0c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     f0c:	b580      	push	{r7, lr}
     f0e:	b084      	sub	sp, #16
     f10:	af00      	add	r7, sp, #0
     f12:	0002      	movs	r2, r0
     f14:	1dfb      	adds	r3, r7, #7
     f16:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
     f18:	1dfb      	adds	r3, r7, #7
     f1a:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
     f1c:	4b28      	ldr	r3, [pc, #160]	; (fc0 <_tc_interrupt_handler+0xb4>)
     f1e:	0092      	lsls	r2, r2, #2
     f20:	58d3      	ldr	r3, [r2, r3]
     f22:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     f24:	68fb      	ldr	r3, [r7, #12]
     f26:	681b      	ldr	r3, [r3, #0]
     f28:	7a9b      	ldrb	r3, [r3, #10]
     f2a:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
     f2c:	68fa      	ldr	r2, [r7, #12]
     f2e:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     f30:	4013      	ands	r3, r2
     f32:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
     f34:	68fb      	ldr	r3, [r7, #12]
     f36:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     f38:	230b      	movs	r3, #11
     f3a:	18fb      	adds	r3, r7, r3
     f3c:	400a      	ands	r2, r1
     f3e:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     f40:	230b      	movs	r3, #11
     f42:	18fb      	adds	r3, r7, r3
     f44:	781b      	ldrb	r3, [r3, #0]
     f46:	2201      	movs	r2, #1
     f48:	4013      	ands	r3, r2
     f4a:	d008      	beq.n	f5e <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     f4c:	68fb      	ldr	r3, [r7, #12]
     f4e:	689b      	ldr	r3, [r3, #8]
     f50:	68fa      	ldr	r2, [r7, #12]
     f52:	0010      	movs	r0, r2
     f54:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     f56:	68fb      	ldr	r3, [r7, #12]
     f58:	681b      	ldr	r3, [r3, #0]
     f5a:	2201      	movs	r2, #1
     f5c:	729a      	strb	r2, [r3, #10]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     f5e:	230b      	movs	r3, #11
     f60:	18fb      	adds	r3, r7, r3
     f62:	781b      	ldrb	r3, [r3, #0]
     f64:	2202      	movs	r2, #2
     f66:	4013      	ands	r3, r2
     f68:	d008      	beq.n	f7c <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
     f6a:	68fb      	ldr	r3, [r7, #12]
     f6c:	68db      	ldr	r3, [r3, #12]
     f6e:	68fa      	ldr	r2, [r7, #12]
     f70:	0010      	movs	r0, r2
     f72:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     f74:	68fb      	ldr	r3, [r7, #12]
     f76:	681b      	ldr	r3, [r3, #0]
     f78:	2202      	movs	r2, #2
     f7a:	729a      	strb	r2, [r3, #10]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     f7c:	230b      	movs	r3, #11
     f7e:	18fb      	adds	r3, r7, r3
     f80:	781b      	ldrb	r3, [r3, #0]
     f82:	2210      	movs	r2, #16
     f84:	4013      	ands	r3, r2
     f86:	d008      	beq.n	f9a <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     f88:	68fb      	ldr	r3, [r7, #12]
     f8a:	691b      	ldr	r3, [r3, #16]
     f8c:	68fa      	ldr	r2, [r7, #12]
     f8e:	0010      	movs	r0, r2
     f90:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	681b      	ldr	r3, [r3, #0]
     f96:	2210      	movs	r2, #16
     f98:	729a      	strb	r2, [r3, #10]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     f9a:	230b      	movs	r3, #11
     f9c:	18fb      	adds	r3, r7, r3
     f9e:	781b      	ldrb	r3, [r3, #0]
     fa0:	2220      	movs	r2, #32
     fa2:	4013      	ands	r3, r2
     fa4:	d008      	beq.n	fb8 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     fa6:	68fb      	ldr	r3, [r7, #12]
     fa8:	695b      	ldr	r3, [r3, #20]
     faa:	68fa      	ldr	r2, [r7, #12]
     fac:	0010      	movs	r0, r2
     fae:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     fb0:	68fb      	ldr	r3, [r7, #12]
     fb2:	681b      	ldr	r3, [r3, #0]
     fb4:	2220      	movs	r2, #32
     fb6:	729a      	strb	r2, [r3, #10]
	}
}
     fb8:	46c0      	nop			; (mov r8, r8)
     fba:	46bd      	mov	sp, r7
     fbc:	b004      	add	sp, #16
     fbe:	bd80      	pop	{r7, pc}
     fc0:	200038b8 	.word	0x200038b8

00000fc4 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
     fc4:	b580      	push	{r7, lr}
     fc6:	b082      	sub	sp, #8
     fc8:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
     fca:	4b10      	ldr	r3, [pc, #64]	; (100c <cpu_irq_enter_critical+0x48>)
     fcc:	681b      	ldr	r3, [r3, #0]
     fce:	2b00      	cmp	r3, #0
     fd0:	d112      	bne.n	ff8 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     fd2:	f3ef 8310 	mrs	r3, PRIMASK
     fd6:	607b      	str	r3, [r7, #4]
  return(result);
     fd8:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
     fda:	2b00      	cmp	r3, #0
     fdc:	d109      	bne.n	ff2 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
     fde:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     fe0:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     fe4:	4b0a      	ldr	r3, [pc, #40]	; (1010 <cpu_irq_enter_critical+0x4c>)
     fe6:	2200      	movs	r2, #0
     fe8:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     fea:	4b0a      	ldr	r3, [pc, #40]	; (1014 <cpu_irq_enter_critical+0x50>)
     fec:	2201      	movs	r2, #1
     fee:	701a      	strb	r2, [r3, #0]
     ff0:	e002      	b.n	ff8 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     ff2:	4b08      	ldr	r3, [pc, #32]	; (1014 <cpu_irq_enter_critical+0x50>)
     ff4:	2200      	movs	r2, #0
     ff6:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     ff8:	4b04      	ldr	r3, [pc, #16]	; (100c <cpu_irq_enter_critical+0x48>)
     ffa:	681b      	ldr	r3, [r3, #0]
     ffc:	1c5a      	adds	r2, r3, #1
     ffe:	4b03      	ldr	r3, [pc, #12]	; (100c <cpu_irq_enter_critical+0x48>)
    1000:	601a      	str	r2, [r3, #0]
}
    1002:	46c0      	nop			; (mov r8, r8)
    1004:	46bd      	mov	sp, r7
    1006:	b002      	add	sp, #8
    1008:	bd80      	pop	{r7, pc}
    100a:	46c0      	nop			; (mov r8, r8)
    100c:	20003890 	.word	0x20003890
    1010:	20000004 	.word	0x20000004
    1014:	20003894 	.word	0x20003894

00001018 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    1018:	b580      	push	{r7, lr}
    101a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    101c:	4b0b      	ldr	r3, [pc, #44]	; (104c <cpu_irq_leave_critical+0x34>)
    101e:	681b      	ldr	r3, [r3, #0]
    1020:	1e5a      	subs	r2, r3, #1
    1022:	4b0a      	ldr	r3, [pc, #40]	; (104c <cpu_irq_leave_critical+0x34>)
    1024:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1026:	4b09      	ldr	r3, [pc, #36]	; (104c <cpu_irq_leave_critical+0x34>)
    1028:	681b      	ldr	r3, [r3, #0]
    102a:	2b00      	cmp	r3, #0
    102c:	d10a      	bne.n	1044 <cpu_irq_leave_critical+0x2c>
    102e:	4b08      	ldr	r3, [pc, #32]	; (1050 <cpu_irq_leave_critical+0x38>)
    1030:	781b      	ldrb	r3, [r3, #0]
    1032:	b2db      	uxtb	r3, r3
    1034:	2b00      	cmp	r3, #0
    1036:	d005      	beq.n	1044 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    1038:	4b06      	ldr	r3, [pc, #24]	; (1054 <cpu_irq_leave_critical+0x3c>)
    103a:	2201      	movs	r2, #1
    103c:	701a      	strb	r2, [r3, #0]
    103e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1042:	b662      	cpsie	i
	}
}
    1044:	46c0      	nop			; (mov r8, r8)
    1046:	46bd      	mov	sp, r7
    1048:	bd80      	pop	{r7, pc}
    104a:	46c0      	nop			; (mov r8, r8)
    104c:	20003890 	.word	0x20003890
    1050:	20003894 	.word	0x20003894
    1054:	20000004 	.word	0x20000004

00001058 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1058:	b580      	push	{r7, lr}
    105a:	b084      	sub	sp, #16
    105c:	af00      	add	r7, sp, #0
    105e:	0002      	movs	r2, r0
    1060:	1dfb      	adds	r3, r7, #7
    1062:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1064:	230f      	movs	r3, #15
    1066:	18fb      	adds	r3, r7, r3
    1068:	1dfa      	adds	r2, r7, #7
    106a:	7812      	ldrb	r2, [r2, #0]
    106c:	09d2      	lsrs	r2, r2, #7
    106e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1070:	230e      	movs	r3, #14
    1072:	18fb      	adds	r3, r7, r3
    1074:	1dfa      	adds	r2, r7, #7
    1076:	7812      	ldrb	r2, [r2, #0]
    1078:	0952      	lsrs	r2, r2, #5
    107a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    107c:	4b0d      	ldr	r3, [pc, #52]	; (10b4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    107e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1080:	230f      	movs	r3, #15
    1082:	18fb      	adds	r3, r7, r3
    1084:	781b      	ldrb	r3, [r3, #0]
    1086:	2b00      	cmp	r3, #0
    1088:	d10f      	bne.n	10aa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    108a:	230f      	movs	r3, #15
    108c:	18fb      	adds	r3, r7, r3
    108e:	781b      	ldrb	r3, [r3, #0]
    1090:	009b      	lsls	r3, r3, #2
    1092:	2210      	movs	r2, #16
    1094:	4694      	mov	ip, r2
    1096:	44bc      	add	ip, r7
    1098:	4463      	add	r3, ip
    109a:	3b08      	subs	r3, #8
    109c:	681a      	ldr	r2, [r3, #0]
    109e:	230e      	movs	r3, #14
    10a0:	18fb      	adds	r3, r7, r3
    10a2:	781b      	ldrb	r3, [r3, #0]
    10a4:	01db      	lsls	r3, r3, #7
    10a6:	18d3      	adds	r3, r2, r3
    10a8:	e000      	b.n	10ac <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    10aa:	2300      	movs	r3, #0
	}
}
    10ac:	0018      	movs	r0, r3
    10ae:	46bd      	mov	sp, r7
    10b0:	b004      	add	sp, #16
    10b2:	bd80      	pop	{r7, pc}
    10b4:	41006000 	.word	0x41006000

000010b8 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    10b8:	b580      	push	{r7, lr}
    10ba:	b082      	sub	sp, #8
    10bc:	af00      	add	r7, sp, #0
    10be:	0002      	movs	r2, r0
    10c0:	1dfb      	adds	r3, r7, #7
    10c2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    10c4:	1dfb      	adds	r3, r7, #7
    10c6:	781b      	ldrb	r3, [r3, #0]
    10c8:	0018      	movs	r0, r3
    10ca:	4b03      	ldr	r3, [pc, #12]	; (10d8 <port_get_group_from_gpio_pin+0x20>)
    10cc:	4798      	blx	r3
    10ce:	0003      	movs	r3, r0
}
    10d0:	0018      	movs	r0, r3
    10d2:	46bd      	mov	sp, r7
    10d4:	b002      	add	sp, #8
    10d6:	bd80      	pop	{r7, pc}
    10d8:	00001059 	.word	0x00001059

000010dc <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    10dc:	b580      	push	{r7, lr}
    10de:	b082      	sub	sp, #8
    10e0:	af00      	add	r7, sp, #0
    10e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    10e4:	687b      	ldr	r3, [r7, #4]
    10e6:	2200      	movs	r2, #0
    10e8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    10ea:	687b      	ldr	r3, [r7, #4]
    10ec:	2201      	movs	r2, #1
    10ee:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    10f0:	687b      	ldr	r3, [r7, #4]
    10f2:	2200      	movs	r2, #0
    10f4:	709a      	strb	r2, [r3, #2]
}
    10f6:	46c0      	nop			; (mov r8, r8)
    10f8:	46bd      	mov	sp, r7
    10fa:	b002      	add	sp, #8
    10fc:	bd80      	pop	{r7, pc}
	...

00001100 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    1100:	b580      	push	{r7, lr}
    1102:	b084      	sub	sp, #16
    1104:	af00      	add	r7, sp, #0
    1106:	0002      	movs	r2, r0
    1108:	1dfb      	adds	r3, r7, #7
    110a:	701a      	strb	r2, [r3, #0]
    110c:	1dbb      	adds	r3, r7, #6
    110e:	1c0a      	adds	r2, r1, #0
    1110:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1112:	1dfb      	adds	r3, r7, #7
    1114:	781b      	ldrb	r3, [r3, #0]
    1116:	0018      	movs	r0, r3
    1118:	4b0d      	ldr	r3, [pc, #52]	; (1150 <port_pin_set_output_level+0x50>)
    111a:	4798      	blx	r3
    111c:	0003      	movs	r3, r0
    111e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1120:	1dfb      	adds	r3, r7, #7
    1122:	781b      	ldrb	r3, [r3, #0]
    1124:	221f      	movs	r2, #31
    1126:	4013      	ands	r3, r2
    1128:	2201      	movs	r2, #1
    112a:	409a      	lsls	r2, r3
    112c:	0013      	movs	r3, r2
    112e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1130:	1dbb      	adds	r3, r7, #6
    1132:	781b      	ldrb	r3, [r3, #0]
    1134:	2b00      	cmp	r3, #0
    1136:	d003      	beq.n	1140 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1138:	68fb      	ldr	r3, [r7, #12]
    113a:	68ba      	ldr	r2, [r7, #8]
    113c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    113e:	e002      	b.n	1146 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    1140:	68fb      	ldr	r3, [r7, #12]
    1142:	68ba      	ldr	r2, [r7, #8]
    1144:	615a      	str	r2, [r3, #20]
}
    1146:	46c0      	nop			; (mov r8, r8)
    1148:	46bd      	mov	sp, r7
    114a:	b004      	add	sp, #16
    114c:	bd80      	pop	{r7, pc}
    114e:	46c0      	nop			; (mov r8, r8)
    1150:	000010b9 	.word	0x000010b9

00001154 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1154:	b580      	push	{r7, lr}
    1156:	b082      	sub	sp, #8
    1158:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    115a:	1d3b      	adds	r3, r7, #4
    115c:	0018      	movs	r0, r3
    115e:	4b0e      	ldr	r3, [pc, #56]	; (1198 <system_board_init+0x44>)
    1160:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1162:	1d3b      	adds	r3, r7, #4
    1164:	2201      	movs	r2, #1
    1166:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1168:	1d3b      	adds	r3, r7, #4
    116a:	0019      	movs	r1, r3
    116c:	205b      	movs	r0, #91	; 0x5b
    116e:	4b0b      	ldr	r3, [pc, #44]	; (119c <system_board_init+0x48>)
    1170:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    1172:	2101      	movs	r1, #1
    1174:	205b      	movs	r0, #91	; 0x5b
    1176:	4b0a      	ldr	r3, [pc, #40]	; (11a0 <system_board_init+0x4c>)
    1178:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    117a:	1d3b      	adds	r3, r7, #4
    117c:	2200      	movs	r2, #0
    117e:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1180:	1d3b      	adds	r3, r7, #4
    1182:	2201      	movs	r2, #1
    1184:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1186:	1d3b      	adds	r3, r7, #4
    1188:	0019      	movs	r1, r3
    118a:	2041      	movs	r0, #65	; 0x41
    118c:	4b03      	ldr	r3, [pc, #12]	; (119c <system_board_init+0x48>)
    118e:	4798      	blx	r3
}
    1190:	46c0      	nop			; (mov r8, r8)
    1192:	46bd      	mov	sp, r7
    1194:	b002      	add	sp, #8
    1196:	bd80      	pop	{r7, pc}
    1198:	000010dd 	.word	0x000010dd
    119c:	000011cd 	.word	0x000011cd
    11a0:	00001101 	.word	0x00001101

000011a4 <system_pinmux_get_config_defaults>:
{
    11a4:	b580      	push	{r7, lr}
    11a6:	b082      	sub	sp, #8
    11a8:	af00      	add	r7, sp, #0
    11aa:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    11ac:	687b      	ldr	r3, [r7, #4]
    11ae:	2280      	movs	r2, #128	; 0x80
    11b0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    11b2:	687b      	ldr	r3, [r7, #4]
    11b4:	2200      	movs	r2, #0
    11b6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    11b8:	687b      	ldr	r3, [r7, #4]
    11ba:	2201      	movs	r2, #1
    11bc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    11be:	687b      	ldr	r3, [r7, #4]
    11c0:	2200      	movs	r2, #0
    11c2:	70da      	strb	r2, [r3, #3]
}
    11c4:	46c0      	nop			; (mov r8, r8)
    11c6:	46bd      	mov	sp, r7
    11c8:	b002      	add	sp, #8
    11ca:	bd80      	pop	{r7, pc}

000011cc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    11cc:	b580      	push	{r7, lr}
    11ce:	b084      	sub	sp, #16
    11d0:	af00      	add	r7, sp, #0
    11d2:	0002      	movs	r2, r0
    11d4:	6039      	str	r1, [r7, #0]
    11d6:	1dfb      	adds	r3, r7, #7
    11d8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    11da:	230c      	movs	r3, #12
    11dc:	18fb      	adds	r3, r7, r3
    11de:	0018      	movs	r0, r3
    11e0:	4b10      	ldr	r3, [pc, #64]	; (1224 <port_pin_set_config+0x58>)
    11e2:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    11e4:	230c      	movs	r3, #12
    11e6:	18fb      	adds	r3, r7, r3
    11e8:	2280      	movs	r2, #128	; 0x80
    11ea:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    11ec:	683b      	ldr	r3, [r7, #0]
    11ee:	781a      	ldrb	r2, [r3, #0]
    11f0:	230c      	movs	r3, #12
    11f2:	18fb      	adds	r3, r7, r3
    11f4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    11f6:	683b      	ldr	r3, [r7, #0]
    11f8:	785a      	ldrb	r2, [r3, #1]
    11fa:	230c      	movs	r3, #12
    11fc:	18fb      	adds	r3, r7, r3
    11fe:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1200:	683b      	ldr	r3, [r7, #0]
    1202:	789a      	ldrb	r2, [r3, #2]
    1204:	230c      	movs	r3, #12
    1206:	18fb      	adds	r3, r7, r3
    1208:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    120a:	230c      	movs	r3, #12
    120c:	18fa      	adds	r2, r7, r3
    120e:	1dfb      	adds	r3, r7, #7
    1210:	781b      	ldrb	r3, [r3, #0]
    1212:	0011      	movs	r1, r2
    1214:	0018      	movs	r0, r3
    1216:	4b04      	ldr	r3, [pc, #16]	; (1228 <port_pin_set_config+0x5c>)
    1218:	4798      	blx	r3
}
    121a:	46c0      	nop			; (mov r8, r8)
    121c:	46bd      	mov	sp, r7
    121e:	b004      	add	sp, #16
    1220:	bd80      	pop	{r7, pc}
    1222:	46c0      	nop			; (mov r8, r8)
    1224:	000011a5 	.word	0x000011a5
    1228:	000019f9 	.word	0x000019f9

0000122c <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    122c:	b580      	push	{r7, lr}
    122e:	b082      	sub	sp, #8
    1230:	af00      	add	r7, sp, #0
    1232:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1234:	687b      	ldr	r3, [r7, #4]
    1236:	2201      	movs	r2, #1
    1238:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    123a:	687b      	ldr	r3, [r7, #4]
    123c:	2200      	movs	r2, #0
    123e:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
    1240:	687b      	ldr	r3, [r7, #4]
    1242:	2205      	movs	r2, #5
    1244:	701a      	strb	r2, [r3, #0]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	2200      	movs	r2, #0
    124a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    124c:	687b      	ldr	r3, [r7, #4]
    124e:	2200      	movs	r2, #0
    1250:	725a      	strb	r2, [r3, #9]
}
    1252:	46c0      	nop			; (mov r8, r8)
    1254:	46bd      	mov	sp, r7
    1256:	b002      	add	sp, #8
    1258:	bd80      	pop	{r7, pc}
	...

0000125c <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    125c:	b580      	push	{r7, lr}
    125e:	b082      	sub	sp, #8
    1260:	af00      	add	r7, sp, #0
    1262:	0002      	movs	r2, r0
    1264:	1dfb      	adds	r3, r7, #7
    1266:	701a      	strb	r2, [r3, #0]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    1268:	4a05      	ldr	r2, [pc, #20]	; (1280 <system_cpu_clock_set_divider+0x24>)
    126a:	1dfb      	adds	r3, r7, #7
    126c:	781b      	ldrb	r3, [r3, #0]
    126e:	2101      	movs	r1, #1
    1270:	4099      	lsls	r1, r3
    1272:	000b      	movs	r3, r1
    1274:	b2db      	uxtb	r3, r3
    1276:	7113      	strb	r3, [r2, #4]
}
    1278:	46c0      	nop			; (mov r8, r8)
    127a:	46bd      	mov	sp, r7
    127c:	b002      	add	sp, #8
    127e:	bd80      	pop	{r7, pc}
    1280:	40000800 	.word	0x40000800

00001284 <system_backup_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider
 */
static inline void system_backup_clock_set_divider(
		const enum system_main_clock_div divider)
{
    1284:	b580      	push	{r7, lr}
    1286:	b082      	sub	sp, #8
    1288:	af00      	add	r7, sp, #0
    128a:	0002      	movs	r2, r0
    128c:	1dfb      	adds	r3, r7, #7
    128e:	701a      	strb	r2, [r3, #0]
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    1290:	4a05      	ldr	r2, [pc, #20]	; (12a8 <system_backup_clock_set_divider+0x24>)
    1292:	1dfb      	adds	r3, r7, #7
    1294:	781b      	ldrb	r3, [r3, #0]
    1296:	2101      	movs	r1, #1
    1298:	4099      	lsls	r1, r3
    129a:	000b      	movs	r3, r1
    129c:	b2db      	uxtb	r3, r3
    129e:	7193      	strb	r3, [r2, #6]
}
    12a0:	46c0      	nop			; (mov r8, r8)
    12a2:	46bd      	mov	sp, r7
    12a4:	b002      	add	sp, #8
    12a6:	bd80      	pop	{r7, pc}
    12a8:	40000800 	.word	0x40000800

000012ac <system_cpu_clock_get_hz>:
 * generic clock and the set CPU bus divider.
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
    12ac:	b580      	push	{r7, lr}
    12ae:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    12b0:	2000      	movs	r0, #0
    12b2:	4b07      	ldr	r3, [pc, #28]	; (12d0 <system_cpu_clock_get_hz+0x24>)
    12b4:	4798      	blx	r3
    12b6:	0002      	movs	r2, r0
    12b8:	4b06      	ldr	r3, [pc, #24]	; (12d4 <system_cpu_clock_get_hz+0x28>)
    12ba:	791b      	ldrb	r3, [r3, #4]
    12bc:	b2db      	uxtb	r3, r3
    12be:	0019      	movs	r1, r3
    12c0:	4b05      	ldr	r3, [pc, #20]	; (12d8 <system_cpu_clock_get_hz+0x2c>)
    12c2:	0010      	movs	r0, r2
    12c4:	4798      	blx	r3
    12c6:	0003      	movs	r3, r0
}
    12c8:	0018      	movs	r0, r3
    12ca:	46bd      	mov	sp, r7
    12cc:	bd80      	pop	{r7, pc}
    12ce:	46c0      	nop			; (mov r8, r8)
    12d0:	00001775 	.word	0x00001775
    12d4:	40000800 	.word	0x40000800
    12d8:	00001da9 	.word	0x00001da9

000012dc <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    12dc:	b580      	push	{r7, lr}
    12de:	b082      	sub	sp, #8
    12e0:	af00      	add	r7, sp, #0
    12e2:	0002      	movs	r2, r0
    12e4:	1dfb      	adds	r3, r7, #7
    12e6:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    12e8:	4a08      	ldr	r2, [pc, #32]	; (130c <system_flash_set_waitstates+0x30>)
    12ea:	1dfb      	adds	r3, r7, #7
    12ec:	781b      	ldrb	r3, [r3, #0]
    12ee:	210f      	movs	r1, #15
    12f0:	400b      	ands	r3, r1
    12f2:	b2d9      	uxtb	r1, r3
    12f4:	6853      	ldr	r3, [r2, #4]
    12f6:	200f      	movs	r0, #15
    12f8:	4001      	ands	r1, r0
    12fa:	0049      	lsls	r1, r1, #1
    12fc:	201e      	movs	r0, #30
    12fe:	4383      	bics	r3, r0
    1300:	430b      	orrs	r3, r1
    1302:	6053      	str	r3, [r2, #4]
}
    1304:	46c0      	nop			; (mov r8, r8)
    1306:	46bd      	mov	sp, r7
    1308:	b002      	add	sp, #8
    130a:	bd80      	pop	{r7, pc}
    130c:	41004000 	.word	0x41004000

00001310 <system_switch_performance_level>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid parameter
 * \retval STATUS_OK               Successfully
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{
    1310:	b580      	push	{r7, lr}
    1312:	b082      	sub	sp, #8
    1314:	af00      	add	r7, sp, #0
    1316:	0002      	movs	r2, r0
    1318:	1dfb      	adds	r3, r7, #7
    131a:	701a      	strb	r2, [r3, #0]

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    131c:	4b11      	ldr	r3, [pc, #68]	; (1364 <system_switch_performance_level+0x54>)
    131e:	789b      	ldrb	r3, [r3, #2]
    1320:	b2db      	uxtb	r3, r3
    1322:	1dfa      	adds	r2, r7, #7
    1324:	7812      	ldrb	r2, [r2, #0]
    1326:	429a      	cmp	r2, r3
    1328:	d101      	bne.n	132e <system_switch_performance_level+0x1e>
		return STATUS_OK;
    132a:	2300      	movs	r3, #0
    132c:	e015      	b.n	135a <system_switch_performance_level+0x4a>
	}

#if SAML22 || SAML21XXXB
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    132e:	4b0d      	ldr	r3, [pc, #52]	; (1364 <system_switch_performance_level+0x54>)
    1330:	789b      	ldrb	r3, [r3, #2]
    1332:	b2db      	uxtb	r3, r3
    1334:	b25b      	sxtb	r3, r3
    1336:	2b00      	cmp	r3, #0
    1338:	da01      	bge.n	133e <system_switch_performance_level+0x2e>
		return STATUS_ERR_INVALID_ARG;
    133a:	2317      	movs	r3, #23
    133c:	e00d      	b.n	135a <system_switch_performance_level+0x4a>
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    133e:	4b09      	ldr	r3, [pc, #36]	; (1364 <system_switch_performance_level+0x54>)
    1340:	2201      	movs	r2, #1
    1342:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    1344:	4a07      	ldr	r2, [pc, #28]	; (1364 <system_switch_performance_level+0x54>)
    1346:	1dfb      	adds	r3, r7, #7
    1348:	781b      	ldrb	r3, [r3, #0]
    134a:	7093      	strb	r3, [r2, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    134c:	46c0      	nop			; (mov r8, r8)
    134e:	4b05      	ldr	r3, [pc, #20]	; (1364 <system_switch_performance_level+0x54>)
    1350:	799b      	ldrb	r3, [r3, #6]
    1352:	b2db      	uxtb	r3, r3
    1354:	2b00      	cmp	r3, #0
    1356:	d0fa      	beq.n	134e <system_switch_performance_level+0x3e>
		;
	}
	return STATUS_OK;
    1358:	2300      	movs	r3, #0
}
    135a:	0018      	movs	r0, r3
    135c:	46bd      	mov	sp, r7
    135e:	b002      	add	sp, #8
    1360:	bd80      	pop	{r7, pc}
    1362:	46c0      	nop			; (mov r8, r8)
    1364:	40000400 	.word	0x40000400

00001368 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    1368:	b580      	push	{r7, lr}
    136a:	af00      	add	r7, sp, #0
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    136c:	46c0      	nop			; (mov r8, r8)
    136e:	4b04      	ldr	r3, [pc, #16]	; (1380 <_system_dfll_wait_for_sync+0x18>)
    1370:	68da      	ldr	r2, [r3, #12]
    1372:	2380      	movs	r3, #128	; 0x80
    1374:	005b      	lsls	r3, r3, #1
    1376:	4013      	ands	r3, r2
    1378:	d0f9      	beq.n	136e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    137a:	46c0      	nop			; (mov r8, r8)
    137c:	46bd      	mov	sp, r7
    137e:	bd80      	pop	{r7, pc}
    1380:	40001000 	.word	0x40001000

00001384 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1384:	b580      	push	{r7, lr}
    1386:	b082      	sub	sp, #8
    1388:	af00      	add	r7, sp, #0
    138a:	0002      	movs	r2, r0
    138c:	1dfb      	adds	r3, r7, #7
    138e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    1390:	1dfb      	adds	r3, r7, #7
    1392:	781b      	ldrb	r3, [r3, #0]
    1394:	2b07      	cmp	r3, #7
    1396:	d83f      	bhi.n	1418 <system_clock_source_get_hz+0x94>
    1398:	009a      	lsls	r2, r3, #2
    139a:	4b22      	ldr	r3, [pc, #136]	; (1424 <system_clock_source_get_hz+0xa0>)
    139c:	18d3      	adds	r3, r2, r3
    139e:	681b      	ldr	r3, [r3, #0]
    13a0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    13a2:	4b21      	ldr	r3, [pc, #132]	; (1428 <system_clock_source_get_hz+0xa4>)
    13a4:	691b      	ldr	r3, [r3, #16]
    13a6:	e038      	b.n	141a <system_clock_source_get_hz+0x96>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    13a8:	4b20      	ldr	r3, [pc, #128]	; (142c <system_clock_source_get_hz+0xa8>)
    13aa:	7d1b      	ldrb	r3, [r3, #20]
    13ac:	071b      	lsls	r3, r3, #28
    13ae:	0f9b      	lsrs	r3, r3, #30
    13b0:	b2db      	uxtb	r3, r3
    13b2:	3301      	adds	r3, #1
    13b4:	001a      	movs	r2, r3
    13b6:	4b1e      	ldr	r3, [pc, #120]	; (1430 <system_clock_source_get_hz+0xac>)
    13b8:	4353      	muls	r3, r2
    13ba:	e02e      	b.n	141a <system_clock_source_get_hz+0x96>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    13bc:	2380      	movs	r3, #128	; 0x80
    13be:	021b      	lsls	r3, r3, #8
    13c0:	e02b      	b.n	141a <system_clock_source_get_hz+0x96>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    13c2:	4b19      	ldr	r3, [pc, #100]	; (1428 <system_clock_source_get_hz+0xa4>)
    13c4:	695b      	ldr	r3, [r3, #20]
    13c6:	e028      	b.n	141a <system_clock_source_get_hz+0x96>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    13c8:	4b17      	ldr	r3, [pc, #92]	; (1428 <system_clock_source_get_hz+0xa4>)
    13ca:	681b      	ldr	r3, [r3, #0]
    13cc:	2202      	movs	r2, #2
    13ce:	4013      	ands	r3, r2
    13d0:	d101      	bne.n	13d6 <system_clock_source_get_hz+0x52>
			return 0;
    13d2:	2300      	movs	r3, #0
    13d4:	e021      	b.n	141a <system_clock_source_get_hz+0x96>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    13d6:	4b17      	ldr	r3, [pc, #92]	; (1434 <system_clock_source_get_hz+0xb0>)
    13d8:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    13da:	4b13      	ldr	r3, [pc, #76]	; (1428 <system_clock_source_get_hz+0xa4>)
    13dc:	681b      	ldr	r3, [r3, #0]
    13de:	2224      	movs	r2, #36	; 0x24
    13e0:	4013      	ands	r3, r2
    13e2:	2b04      	cmp	r3, #4
    13e4:	d109      	bne.n	13fa <system_clock_source_get_hz+0x76>
				(OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_USBCRM)) {
		case OSCCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    13e6:	2000      	movs	r0, #0
    13e8:	4b13      	ldr	r3, [pc, #76]	; (1438 <system_clock_source_get_hz+0xb4>)
    13ea:	4798      	blx	r3
    13ec:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    13ee:	4b0e      	ldr	r3, [pc, #56]	; (1428 <system_clock_source_get_hz+0xa4>)
    13f0:	689b      	ldr	r3, [r3, #8]
    13f2:	041b      	lsls	r3, r3, #16
    13f4:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    13f6:	4353      	muls	r3, r2
    13f8:	e00f      	b.n	141a <system_clock_source_get_hz+0x96>
		default:
			return 48000000UL;
    13fa:	4b10      	ldr	r3, [pc, #64]	; (143c <system_clock_source_get_hz+0xb8>)
    13fc:	e00d      	b.n	141a <system_clock_source_get_hz+0x96>
		}

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    13fe:	4a0b      	ldr	r2, [pc, #44]	; (142c <system_clock_source_get_hz+0xa8>)
    1400:	2328      	movs	r3, #40	; 0x28
    1402:	5cd3      	ldrb	r3, [r2, r3]
    1404:	b2db      	uxtb	r3, r3
    1406:	001a      	movs	r2, r3
    1408:	2302      	movs	r3, #2
    140a:	4013      	ands	r3, r2
    140c:	d101      	bne.n	1412 <system_clock_source_get_hz+0x8e>
			return 0;
    140e:	2300      	movs	r3, #0
    1410:	e003      	b.n	141a <system_clock_source_get_hz+0x96>
		}

		return _system_clock_inst.dpll.frequency;
    1412:	4b05      	ldr	r3, [pc, #20]	; (1428 <system_clock_source_get_hz+0xa4>)
    1414:	68db      	ldr	r3, [r3, #12]
    1416:	e000      	b.n	141a <system_clock_source_get_hz+0x96>

	default:
		return 0;
    1418:	2300      	movs	r3, #0
	}
}
    141a:	0018      	movs	r0, r3
    141c:	46bd      	mov	sp, r7
    141e:	b002      	add	sp, #8
    1420:	bd80      	pop	{r7, pc}
    1422:	46c0      	nop			; (mov r8, r8)
    1424:	00001f20 	.word	0x00001f20
    1428:	20003898 	.word	0x20003898
    142c:	40001000 	.word	0x40001000
    1430:	003d0900 	.word	0x003d0900
    1434:	00001369 	.word	0x00001369
    1438:	00001835 	.word	0x00001835
    143c:	02dc6c00 	.word	0x02dc6c00

00001440 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1440:	b580      	push	{r7, lr}
    1442:	b094      	sub	sp, #80	; 0x50
    1444:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    1446:	4b28      	ldr	r3, [pc, #160]	; (14e8 <system_clock_init+0xa8>)
    1448:	2280      	movs	r2, #128	; 0x80
    144a:	0052      	lsls	r2, r2, #1
    144c:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    144e:	4b27      	ldr	r3, [pc, #156]	; (14ec <system_clock_init+0xac>)
    1450:	2203      	movs	r2, #3
    1452:	609a      	str	r2, [r3, #8]

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    1454:	2000      	movs	r0, #0
    1456:	4b26      	ldr	r3, [pc, #152]	; (14f0 <system_clock_init+0xb0>)
    1458:	4798      	blx	r3

	/*  Switch to PL2 to be sure configuration of GCLK0 is safe */
	system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_2);
    145a:	2002      	movs	r0, #2
    145c:	4b25      	ldr	r3, [pc, #148]	; (14f4 <system_clock_init+0xb4>)
    145e:	4798      	blx	r3
	}
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
    1460:	4a21      	ldr	r2, [pc, #132]	; (14e8 <system_clock_init+0xa8>)
    1462:	7d13      	ldrb	r3, [r2, #20]
    1464:	2180      	movs	r1, #128	; 0x80
    1466:	4249      	negs	r1, r1
    1468:	430b      	orrs	r3, r1
    146a:	7513      	strb	r3, [r2, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
    146c:	4a1e      	ldr	r2, [pc, #120]	; (14e8 <system_clock_init+0xa8>)
    146e:	7d13      	ldrb	r3, [r2, #20]
    1470:	2140      	movs	r1, #64	; 0x40
    1472:	438b      	bics	r3, r1
    1474:	7513      	strb	r3, [r2, #20]
	} else {
		_system_clock_source_osc16m_freq_sel();
	}

	uint32_t mask = OSC32KCTRL->OSCULP32K.reg & (~(OSC32KCTRL_OSCULP32K_EN32K | OSC32KCTRL_OSCULP32K_EN1K));
    1476:	4b20      	ldr	r3, [pc, #128]	; (14f8 <system_clock_init+0xb8>)
    1478:	69db      	ldr	r3, [r3, #28]
    147a:	2206      	movs	r2, #6
    147c:	4393      	bics	r3, r2
    147e:	64fb      	str	r3, [r7, #76]	; 0x4c
	OSC32KCTRL->OSCULP32K.reg = mask | (CONF_CLOCK_OSCULP32K_ENABLE_1KHZ_OUTPUT << OSC32KCTRL_OSCULP32K_EN1K_Pos)
    1480:	4b1d      	ldr	r3, [pc, #116]	; (14f8 <system_clock_init+0xb8>)
									 | (CONF_CLOCK_OSCULP32K_ENABLE_32KHZ_OUTPUT << OSC32KCTRL_OSCULP32K_EN32K_Pos);
    1482:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    1484:	2106      	movs	r1, #6
    1486:	430a      	orrs	r2, r1
	OSC32KCTRL->OSCULP32K.reg = mask | (CONF_CLOCK_OSCULP32K_ENABLE_1KHZ_OUTPUT << OSC32KCTRL_OSCULP32K_EN1K_Pos)
    1488:	61da      	str	r2, [r3, #28]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    148a:	4b1c      	ldr	r3, [pc, #112]	; (14fc <system_clock_init+0xbc>)
    148c:	4798      	blx	r3
	}

#  endif

	/* CPU and BUS clocks */
	system_backup_clock_set_divider(CONF_CLOCK_BACKUP_DIVIDER);
    148e:	2000      	movs	r0, #0
    1490:	4b1b      	ldr	r3, [pc, #108]	; (1500 <system_clock_init+0xc0>)
    1492:	4798      	blx	r3
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    1494:	2000      	movs	r0, #0
    1496:	4b1b      	ldr	r3, [pc, #108]	; (1504 <system_clock_init+0xc4>)
    1498:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    149a:	003b      	movs	r3, r7
    149c:	0018      	movs	r0, r3
    149e:	4b1a      	ldr	r3, [pc, #104]	; (1508 <system_clock_init+0xc8>)
    14a0:	4798      	blx	r3
    14a2:	003b      	movs	r3, r7
    14a4:	2205      	movs	r2, #5
    14a6:	701a      	strb	r2, [r3, #0]
    14a8:	003b      	movs	r3, r7
    14aa:	2201      	movs	r2, #1
    14ac:	605a      	str	r2, [r3, #4]
    14ae:	003b      	movs	r3, r7
    14b0:	2200      	movs	r2, #0
    14b2:	721a      	strb	r2, [r3, #8]
    14b4:	003b      	movs	r3, r7
    14b6:	2200      	movs	r2, #0
    14b8:	725a      	strb	r2, [r3, #9]
    14ba:	003b      	movs	r3, r7
    14bc:	0019      	movs	r1, r3
    14be:	2000      	movs	r0, #0
    14c0:	4b12      	ldr	r3, [pc, #72]	; (150c <system_clock_init+0xcc>)
    14c2:	4798      	blx	r3
    14c4:	2000      	movs	r0, #0
    14c6:	4b12      	ldr	r3, [pc, #72]	; (1510 <system_clock_init+0xd0>)
    14c8:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 8MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
    14ca:	4b12      	ldr	r3, [pc, #72]	; (1514 <system_clock_init+0xd4>)
    14cc:	4798      	blx	r3
    14ce:	0003      	movs	r3, r0
    14d0:	64bb      	str	r3, [r7, #72]	; 0x48
	if (cpu_freq <= 8000000) {
    14d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    14d4:	4a10      	ldr	r2, [pc, #64]	; (1518 <system_clock_init+0xd8>)
    14d6:	4293      	cmp	r3, r2
    14d8:	d802      	bhi.n	14e0 <system_clock_init+0xa0>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
    14da:	2000      	movs	r0, #0
    14dc:	4b05      	ldr	r3, [pc, #20]	; (14f4 <system_clock_init+0xb4>)
    14de:	4798      	blx	r3
	}
}
    14e0:	46c0      	nop			; (mov r8, r8)
    14e2:	46bd      	mov	sp, r7
    14e4:	b014      	add	sp, #80	; 0x50
    14e6:	bd80      	pop	{r7, pc}
    14e8:	40001000 	.word	0x40001000
    14ec:	40001800 	.word	0x40001800
    14f0:	000012dd 	.word	0x000012dd
    14f4:	00001311 	.word	0x00001311
    14f8:	40001400 	.word	0x40001400
    14fc:	000015d9 	.word	0x000015d9
    1500:	00001285 	.word	0x00001285
    1504:	0000125d 	.word	0x0000125d
    1508:	0000122d 	.word	0x0000122d
    150c:	00001609 	.word	0x00001609
    1510:	00001719 	.word	0x00001719
    1514:	000012ad 	.word	0x000012ad
    1518:	007a1200 	.word	0x007a1200

0000151c <system_apb_clock_set_mask>:
{
    151c:	b580      	push	{r7, lr}
    151e:	b082      	sub	sp, #8
    1520:	af00      	add	r7, sp, #0
    1522:	0002      	movs	r2, r0
    1524:	6039      	str	r1, [r7, #0]
    1526:	1dfb      	adds	r3, r7, #7
    1528:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    152a:	1dfb      	adds	r3, r7, #7
    152c:	781b      	ldrb	r3, [r3, #0]
    152e:	2b01      	cmp	r3, #1
    1530:	d00a      	beq.n	1548 <system_apb_clock_set_mask+0x2c>
    1532:	2b02      	cmp	r3, #2
    1534:	d00f      	beq.n	1556 <system_apb_clock_set_mask+0x3a>
    1536:	2b00      	cmp	r3, #0
    1538:	d114      	bne.n	1564 <system_apb_clock_set_mask+0x48>
			MCLK->APBAMASK.reg |= mask;
    153a:	4b0e      	ldr	r3, [pc, #56]	; (1574 <system_apb_clock_set_mask+0x58>)
    153c:	4a0d      	ldr	r2, [pc, #52]	; (1574 <system_apb_clock_set_mask+0x58>)
    153e:	6951      	ldr	r1, [r2, #20]
    1540:	683a      	ldr	r2, [r7, #0]
    1542:	430a      	orrs	r2, r1
    1544:	615a      	str	r2, [r3, #20]
			break;
    1546:	e00f      	b.n	1568 <system_apb_clock_set_mask+0x4c>
			MCLK->APBBMASK.reg |= mask;
    1548:	4b0a      	ldr	r3, [pc, #40]	; (1574 <system_apb_clock_set_mask+0x58>)
    154a:	4a0a      	ldr	r2, [pc, #40]	; (1574 <system_apb_clock_set_mask+0x58>)
    154c:	6991      	ldr	r1, [r2, #24]
    154e:	683a      	ldr	r2, [r7, #0]
    1550:	430a      	orrs	r2, r1
    1552:	619a      	str	r2, [r3, #24]
			break;
    1554:	e008      	b.n	1568 <system_apb_clock_set_mask+0x4c>
			MCLK->APBCMASK.reg |= mask;
    1556:	4b07      	ldr	r3, [pc, #28]	; (1574 <system_apb_clock_set_mask+0x58>)
    1558:	4a06      	ldr	r2, [pc, #24]	; (1574 <system_apb_clock_set_mask+0x58>)
    155a:	69d1      	ldr	r1, [r2, #28]
    155c:	683a      	ldr	r2, [r7, #0]
    155e:	430a      	orrs	r2, r1
    1560:	61da      	str	r2, [r3, #28]
			break;
    1562:	e001      	b.n	1568 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    1564:	2317      	movs	r3, #23
    1566:	e000      	b.n	156a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    1568:	2300      	movs	r3, #0
}
    156a:	0018      	movs	r0, r3
    156c:	46bd      	mov	sp, r7
    156e:	b002      	add	sp, #8
    1570:	bd80      	pop	{r7, pc}
    1572:	46c0      	nop			; (mov r8, r8)
    1574:	40000800 	.word	0x40000800

00001578 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    1578:	b580      	push	{r7, lr}
    157a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    157c:	4b02      	ldr	r3, [pc, #8]	; (1588 <system_interrupt_enter_critical_section+0x10>)
    157e:	4798      	blx	r3
}
    1580:	46c0      	nop			; (mov r8, r8)
    1582:	46bd      	mov	sp, r7
    1584:	bd80      	pop	{r7, pc}
    1586:	46c0      	nop			; (mov r8, r8)
    1588:	00000fc5 	.word	0x00000fc5

0000158c <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    158c:	b580      	push	{r7, lr}
    158e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    1590:	4b02      	ldr	r3, [pc, #8]	; (159c <system_interrupt_leave_critical_section+0x10>)
    1592:	4798      	blx	r3
}
    1594:	46c0      	nop			; (mov r8, r8)
    1596:	46bd      	mov	sp, r7
    1598:	bd80      	pop	{r7, pc}
    159a:	46c0      	nop			; (mov r8, r8)
    159c:	00001019 	.word	0x00001019

000015a0 <system_gclk_is_syncing>:
  *
  * \retval false if the module has completed synchronization
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{
    15a0:	b580      	push	{r7, lr}
    15a2:	b082      	sub	sp, #8
    15a4:	af00      	add	r7, sp, #0
    15a6:	0002      	movs	r2, r0
    15a8:	1dfb      	adds	r3, r7, #7
    15aa:	701a      	strb	r2, [r3, #0]

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    15ac:	4b09      	ldr	r3, [pc, #36]	; (15d4 <system_gclk_is_syncing+0x34>)
    15ae:	685b      	ldr	r3, [r3, #4]
    15b0:	1dfa      	adds	r2, r7, #7
    15b2:	7812      	ldrb	r2, [r2, #0]
    15b4:	2101      	movs	r1, #1
    15b6:	4091      	lsls	r1, r2
    15b8:	000a      	movs	r2, r1
    15ba:	0092      	lsls	r2, r2, #2
    15bc:	4013      	ands	r3, r2
    15be:	227c      	movs	r2, #124	; 0x7c
    15c0:	4013      	ands	r3, r2
    15c2:	d001      	beq.n	15c8 <system_gclk_is_syncing+0x28>
		 return true;
    15c4:	2301      	movs	r3, #1
    15c6:	e000      	b.n	15ca <system_gclk_is_syncing+0x2a>
	}

	 return false;
    15c8:	2300      	movs	r3, #0
}
    15ca:	0018      	movs	r0, r3
    15cc:	46bd      	mov	sp, r7
    15ce:	b002      	add	sp, #8
    15d0:	bd80      	pop	{r7, pc}
    15d2:	46c0      	nop			; (mov r8, r8)
    15d4:	40001c00 	.word	0x40001c00

000015d8 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    15d8:	b580      	push	{r7, lr}
    15da:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);
    15dc:	2180      	movs	r1, #128	; 0x80
    15de:	2000      	movs	r0, #0
    15e0:	4b07      	ldr	r3, [pc, #28]	; (1600 <system_gclk_init+0x28>)
    15e2:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    15e4:	4b07      	ldr	r3, [pc, #28]	; (1604 <system_gclk_init+0x2c>)
    15e6:	2201      	movs	r2, #1
    15e8:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    15ea:	46c0      	nop			; (mov r8, r8)
    15ec:	4b05      	ldr	r3, [pc, #20]	; (1604 <system_gclk_init+0x2c>)
    15ee:	781b      	ldrb	r3, [r3, #0]
    15f0:	b2db      	uxtb	r3, r3
    15f2:	001a      	movs	r2, r3
    15f4:	2301      	movs	r3, #1
    15f6:	4013      	ands	r3, r2
    15f8:	d1f8      	bne.n	15ec <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    15fa:	46c0      	nop			; (mov r8, r8)
    15fc:	46bd      	mov	sp, r7
    15fe:	bd80      	pop	{r7, pc}
    1600:	0000151d 	.word	0x0000151d
    1604:	40001c00 	.word	0x40001c00

00001608 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1608:	b580      	push	{r7, lr}
    160a:	b086      	sub	sp, #24
    160c:	af00      	add	r7, sp, #0
    160e:	0002      	movs	r2, r0
    1610:	6039      	str	r1, [r7, #0]
    1612:	1dfb      	adds	r3, r7, #7
    1614:	701a      	strb	r2, [r3, #0]
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1616:	683b      	ldr	r3, [r7, #0]
    1618:	781b      	ldrb	r3, [r3, #0]
    161a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    161c:	683b      	ldr	r3, [r7, #0]
    161e:	785b      	ldrb	r3, [r3, #1]
    1620:	2b00      	cmp	r3, #0
    1622:	d004      	beq.n	162e <system_gclk_gen_set_config+0x26>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1624:	697b      	ldr	r3, [r7, #20]
    1626:	2280      	movs	r2, #128	; 0x80
    1628:	00d2      	lsls	r2, r2, #3
    162a:	4313      	orrs	r3, r2
    162c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    162e:	683b      	ldr	r3, [r7, #0]
    1630:	7a5b      	ldrb	r3, [r3, #9]
    1632:	2b00      	cmp	r3, #0
    1634:	d004      	beq.n	1640 <system_gclk_gen_set_config+0x38>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1636:	697b      	ldr	r3, [r7, #20]
    1638:	2280      	movs	r2, #128	; 0x80
    163a:	0112      	lsls	r2, r2, #4
    163c:	4313      	orrs	r3, r2
    163e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1640:	683b      	ldr	r3, [r7, #0]
    1642:	685b      	ldr	r3, [r3, #4]
    1644:	2b01      	cmp	r3, #1
    1646:	d92c      	bls.n	16a2 <system_gclk_gen_set_config+0x9a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1648:	683b      	ldr	r3, [r7, #0]
    164a:	685a      	ldr	r2, [r3, #4]
    164c:	683b      	ldr	r3, [r7, #0]
    164e:	685b      	ldr	r3, [r3, #4]
    1650:	3b01      	subs	r3, #1
    1652:	4013      	ands	r3, r2
    1654:	d11a      	bne.n	168c <system_gclk_gen_set_config+0x84>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    1656:	2300      	movs	r3, #0
    1658:	613b      	str	r3, [r7, #16]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    165a:	2302      	movs	r3, #2
    165c:	60fb      	str	r3, [r7, #12]
    165e:	e005      	b.n	166c <system_gclk_gen_set_config+0x64>
						mask <<= 1) {
				div2_count++;
    1660:	693b      	ldr	r3, [r7, #16]
    1662:	3301      	adds	r3, #1
    1664:	613b      	str	r3, [r7, #16]
						mask <<= 1) {
    1666:	68fb      	ldr	r3, [r7, #12]
    1668:	005b      	lsls	r3, r3, #1
    166a:	60fb      	str	r3, [r7, #12]
			for (mask = (1UL << 1); mask < config->division_factor;
    166c:	683b      	ldr	r3, [r7, #0]
    166e:	685a      	ldr	r2, [r3, #4]
    1670:	68fb      	ldr	r3, [r7, #12]
    1672:	429a      	cmp	r2, r3
    1674:	d8f4      	bhi.n	1660 <system_gclk_gen_set_config+0x58>
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    1676:	693b      	ldr	r3, [r7, #16]
    1678:	041b      	lsls	r3, r3, #16
    167a:	697a      	ldr	r2, [r7, #20]
    167c:	4313      	orrs	r3, r2
    167e:	617b      	str	r3, [r7, #20]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1680:	697b      	ldr	r3, [r7, #20]
    1682:	2280      	movs	r2, #128	; 0x80
    1684:	0152      	lsls	r2, r2, #5
    1686:	4313      	orrs	r3, r2
    1688:	617b      	str	r3, [r7, #20]
    168a:	e00a      	b.n	16a2 <system_gclk_gen_set_config+0x9a>
		} else {
			/* Set integer division factor */

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    168c:	683b      	ldr	r3, [r7, #0]
    168e:	685b      	ldr	r3, [r3, #4]
    1690:	041b      	lsls	r3, r3, #16
			new_genctrl_config  |=
    1692:	697a      	ldr	r2, [r7, #20]
    1694:	4313      	orrs	r3, r2
    1696:	617b      	str	r3, [r7, #20]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1698:	697b      	ldr	r3, [r7, #20]
    169a:	2280      	movs	r2, #128	; 0x80
    169c:	0092      	lsls	r2, r2, #2
    169e:	4313      	orrs	r3, r2
    16a0:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    16a2:	683b      	ldr	r3, [r7, #0]
    16a4:	7a1b      	ldrb	r3, [r3, #8]
    16a6:	2b00      	cmp	r3, #0
    16a8:	d004      	beq.n	16b4 <system_gclk_gen_set_config+0xac>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    16aa:	697b      	ldr	r3, [r7, #20]
    16ac:	2280      	movs	r2, #128	; 0x80
    16ae:	0192      	lsls	r2, r2, #6
    16b0:	4313      	orrs	r3, r2
    16b2:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing(generator)) {
    16b4:	46c0      	nop			; (mov r8, r8)
    16b6:	1dfb      	adds	r3, r7, #7
    16b8:	781b      	ldrb	r3, [r3, #0]
    16ba:	0018      	movs	r0, r3
    16bc:	4b12      	ldr	r3, [pc, #72]	; (1708 <system_gclk_gen_set_config+0x100>)
    16be:	4798      	blx	r3
    16c0:	1e03      	subs	r3, r0, #0
    16c2:	d1f8      	bne.n	16b6 <system_gclk_gen_set_config+0xae>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    16c4:	4b11      	ldr	r3, [pc, #68]	; (170c <system_gclk_gen_set_config+0x104>)
    16c6:	4798      	blx	r3

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    16c8:	4811      	ldr	r0, [pc, #68]	; (1710 <system_gclk_gen_set_config+0x108>)
    16ca:	1dfb      	adds	r3, r7, #7
    16cc:	781b      	ldrb	r3, [r3, #0]
    16ce:	4910      	ldr	r1, [pc, #64]	; (1710 <system_gclk_gen_set_config+0x108>)
    16d0:	1dfa      	adds	r2, r7, #7
    16d2:	7812      	ldrb	r2, [r2, #0]
    16d4:	3208      	adds	r2, #8
    16d6:	0092      	lsls	r2, r2, #2
    16d8:	5851      	ldr	r1, [r2, r1]
    16da:	2280      	movs	r2, #128	; 0x80
    16dc:	0052      	lsls	r2, r2, #1
    16de:	4011      	ands	r1, r2
    16e0:	697a      	ldr	r2, [r7, #20]
    16e2:	430a      	orrs	r2, r1
    16e4:	3308      	adds	r3, #8
    16e6:	009b      	lsls	r3, r3, #2
    16e8:	501a      	str	r2, [r3, r0]

	while (system_gclk_is_syncing(generator)) {
    16ea:	46c0      	nop			; (mov r8, r8)
    16ec:	1dfb      	adds	r3, r7, #7
    16ee:	781b      	ldrb	r3, [r3, #0]
    16f0:	0018      	movs	r0, r3
    16f2:	4b05      	ldr	r3, [pc, #20]	; (1708 <system_gclk_gen_set_config+0x100>)
    16f4:	4798      	blx	r3
    16f6:	1e03      	subs	r3, r0, #0
    16f8:	d1f8      	bne.n	16ec <system_gclk_gen_set_config+0xe4>
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
    16fa:	4b06      	ldr	r3, [pc, #24]	; (1714 <system_gclk_gen_set_config+0x10c>)
    16fc:	4798      	blx	r3
}
    16fe:	46c0      	nop			; (mov r8, r8)
    1700:	46bd      	mov	sp, r7
    1702:	b006      	add	sp, #24
    1704:	bd80      	pop	{r7, pc}
    1706:	46c0      	nop			; (mov r8, r8)
    1708:	000015a1 	.word	0x000015a1
    170c:	00001579 	.word	0x00001579
    1710:	40001c00 	.word	0x40001c00
    1714:	0000158d 	.word	0x0000158d

00001718 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1718:	b580      	push	{r7, lr}
    171a:	b082      	sub	sp, #8
    171c:	af00      	add	r7, sp, #0
    171e:	0002      	movs	r2, r0
    1720:	1dfb      	adds	r3, r7, #7
    1722:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing(generator)) {
    1724:	46c0      	nop			; (mov r8, r8)
    1726:	1dfb      	adds	r3, r7, #7
    1728:	781b      	ldrb	r3, [r3, #0]
    172a:	0018      	movs	r0, r3
    172c:	4b0d      	ldr	r3, [pc, #52]	; (1764 <system_gclk_gen_enable+0x4c>)
    172e:	4798      	blx	r3
    1730:	1e03      	subs	r3, r0, #0
    1732:	d1f8      	bne.n	1726 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    1734:	4b0c      	ldr	r3, [pc, #48]	; (1768 <system_gclk_gen_enable+0x50>)
    1736:	4798      	blx	r3

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    1738:	480c      	ldr	r0, [pc, #48]	; (176c <system_gclk_gen_enable+0x54>)
    173a:	1dfb      	adds	r3, r7, #7
    173c:	781b      	ldrb	r3, [r3, #0]
    173e:	490b      	ldr	r1, [pc, #44]	; (176c <system_gclk_gen_enable+0x54>)
    1740:	1dfa      	adds	r2, r7, #7
    1742:	7812      	ldrb	r2, [r2, #0]
    1744:	3208      	adds	r2, #8
    1746:	0092      	lsls	r2, r2, #2
    1748:	5852      	ldr	r2, [r2, r1]
    174a:	2180      	movs	r1, #128	; 0x80
    174c:	0049      	lsls	r1, r1, #1
    174e:	430a      	orrs	r2, r1
    1750:	3308      	adds	r3, #8
    1752:	009b      	lsls	r3, r3, #2
    1754:	501a      	str	r2, [r3, r0]

	system_interrupt_leave_critical_section();
    1756:	4b06      	ldr	r3, [pc, #24]	; (1770 <system_gclk_gen_enable+0x58>)
    1758:	4798      	blx	r3
}
    175a:	46c0      	nop			; (mov r8, r8)
    175c:	46bd      	mov	sp, r7
    175e:	b002      	add	sp, #8
    1760:	bd80      	pop	{r7, pc}
    1762:	46c0      	nop			; (mov r8, r8)
    1764:	000015a1 	.word	0x000015a1
    1768:	00001579 	.word	0x00001579
    176c:	40001c00 	.word	0x40001c00
    1770:	0000158d 	.word	0x0000158d

00001774 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1774:	b580      	push	{r7, lr}
    1776:	b086      	sub	sp, #24
    1778:	af00      	add	r7, sp, #0
    177a:	0002      	movs	r2, r0
    177c:	1dfb      	adds	r3, r7, #7
    177e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing(generator)) {
    1780:	46c0      	nop			; (mov r8, r8)
    1782:	1dfb      	adds	r3, r7, #7
    1784:	781b      	ldrb	r3, [r3, #0]
    1786:	0018      	movs	r0, r3
    1788:	4b24      	ldr	r3, [pc, #144]	; (181c <system_gclk_gen_get_hz+0xa8>)
    178a:	4798      	blx	r3
    178c:	1e03      	subs	r3, r0, #0
    178e:	d1f8      	bne.n	1782 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    1790:	4b23      	ldr	r3, [pc, #140]	; (1820 <system_gclk_gen_get_hz+0xac>)
    1792:	4798      	blx	r3

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    1794:	4a23      	ldr	r2, [pc, #140]	; (1824 <system_gclk_gen_get_hz+0xb0>)
    1796:	1dfb      	adds	r3, r7, #7
    1798:	781b      	ldrb	r3, [r3, #0]
    179a:	3308      	adds	r3, #8
    179c:	009b      	lsls	r3, r3, #2
    179e:	589b      	ldr	r3, [r3, r2]
    17a0:	075b      	lsls	r3, r3, #29
    17a2:	0f5b      	lsrs	r3, r3, #29
    17a4:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    17a6:	0018      	movs	r0, r3
    17a8:	4b1f      	ldr	r3, [pc, #124]	; (1828 <system_gclk_gen_get_hz+0xb4>)
    17aa:	4798      	blx	r3
    17ac:	0003      	movs	r3, r0
    17ae:	617b      	str	r3, [r7, #20]

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    17b0:	4a1c      	ldr	r2, [pc, #112]	; (1824 <system_gclk_gen_get_hz+0xb0>)
    17b2:	1dfb      	adds	r3, r7, #7
    17b4:	781b      	ldrb	r3, [r3, #0]
    17b6:	3308      	adds	r3, #8
    17b8:	009b      	lsls	r3, r3, #2
    17ba:	589b      	ldr	r3, [r3, r2]
    17bc:	04db      	lsls	r3, r3, #19
    17be:	0fdb      	lsrs	r3, r3, #31
    17c0:	b2da      	uxtb	r2, r3
    17c2:	2313      	movs	r3, #19
    17c4:	18fb      	adds	r3, r7, r3
    17c6:	701a      	strb	r2, [r3, #0]
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    17c8:	4a16      	ldr	r2, [pc, #88]	; (1824 <system_gclk_gen_get_hz+0xb0>)
    17ca:	1dfb      	adds	r3, r7, #7
    17cc:	781b      	ldrb	r3, [r3, #0]
    17ce:	3308      	adds	r3, #8
    17d0:	009b      	lsls	r3, r3, #2
    17d2:	589b      	ldr	r3, [r3, r2]
    17d4:	0c1b      	lsrs	r3, r3, #16
    17d6:	b29b      	uxth	r3, r3
    17d8:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    17da:	4b14      	ldr	r3, [pc, #80]	; (182c <system_gclk_gen_get_hz+0xb8>)
    17dc:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    17de:	2313      	movs	r3, #19
    17e0:	18fb      	adds	r3, r7, r3
    17e2:	781b      	ldrb	r3, [r3, #0]
    17e4:	2b00      	cmp	r3, #0
    17e6:	d109      	bne.n	17fc <system_gclk_gen_get_hz+0x88>
    17e8:	68fb      	ldr	r3, [r7, #12]
    17ea:	2b01      	cmp	r3, #1
    17ec:	d906      	bls.n	17fc <system_gclk_gen_get_hz+0x88>
		gen_input_hz /= divider;
    17ee:	4b10      	ldr	r3, [pc, #64]	; (1830 <system_gclk_gen_get_hz+0xbc>)
    17f0:	68f9      	ldr	r1, [r7, #12]
    17f2:	6978      	ldr	r0, [r7, #20]
    17f4:	4798      	blx	r3
    17f6:	0003      	movs	r3, r0
    17f8:	617b      	str	r3, [r7, #20]
    17fa:	e00a      	b.n	1812 <system_gclk_gen_get_hz+0x9e>
	} else if (divsel) {
    17fc:	2313      	movs	r3, #19
    17fe:	18fb      	adds	r3, r7, r3
    1800:	781b      	ldrb	r3, [r3, #0]
    1802:	2b00      	cmp	r3, #0
    1804:	d005      	beq.n	1812 <system_gclk_gen_get_hz+0x9e>
		gen_input_hz >>= (divider+1);
    1806:	68fb      	ldr	r3, [r7, #12]
    1808:	3301      	adds	r3, #1
    180a:	697a      	ldr	r2, [r7, #20]
    180c:	40da      	lsrs	r2, r3
    180e:	0013      	movs	r3, r2
    1810:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    1812:	697b      	ldr	r3, [r7, #20]
}
    1814:	0018      	movs	r0, r3
    1816:	46bd      	mov	sp, r7
    1818:	b006      	add	sp, #24
    181a:	bd80      	pop	{r7, pc}
    181c:	000015a1 	.word	0x000015a1
    1820:	00001579 	.word	0x00001579
    1824:	40001c00 	.word	0x40001c00
    1828:	00001385 	.word	0x00001385
    182c:	0000158d 	.word	0x0000158d
    1830:	00001da9 	.word	0x00001da9

00001834 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1834:	b580      	push	{r7, lr}
    1836:	b084      	sub	sp, #16
    1838:	af00      	add	r7, sp, #0
    183a:	0002      	movs	r2, r0
    183c:	1dfb      	adds	r3, r7, #7
    183e:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    1840:	4b0d      	ldr	r3, [pc, #52]	; (1878 <system_gclk_chan_get_hz+0x44>)
    1842:	4798      	blx	r3
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    1844:	4a0d      	ldr	r2, [pc, #52]	; (187c <system_gclk_chan_get_hz+0x48>)
    1846:	1dfb      	adds	r3, r7, #7
    1848:	781b      	ldrb	r3, [r3, #0]
    184a:	3320      	adds	r3, #32
    184c:	009b      	lsls	r3, r3, #2
    184e:	589b      	ldr	r3, [r3, r2]
    1850:	075b      	lsls	r3, r3, #29
    1852:	0f5b      	lsrs	r3, r3, #29
    1854:	b2da      	uxtb	r2, r3
    1856:	230f      	movs	r3, #15
    1858:	18fb      	adds	r3, r7, r3
    185a:	701a      	strb	r2, [r3, #0]
	system_interrupt_leave_critical_section();
    185c:	4b08      	ldr	r3, [pc, #32]	; (1880 <system_gclk_chan_get_hz+0x4c>)
    185e:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1860:	230f      	movs	r3, #15
    1862:	18fb      	adds	r3, r7, r3
    1864:	781b      	ldrb	r3, [r3, #0]
    1866:	0018      	movs	r0, r3
    1868:	4b06      	ldr	r3, [pc, #24]	; (1884 <system_gclk_chan_get_hz+0x50>)
    186a:	4798      	blx	r3
    186c:	0003      	movs	r3, r0
}
    186e:	0018      	movs	r0, r3
    1870:	46bd      	mov	sp, r7
    1872:	b004      	add	sp, #16
    1874:	bd80      	pop	{r7, pc}
    1876:	46c0      	nop			; (mov r8, r8)
    1878:	00001579 	.word	0x00001579
    187c:	40001c00 	.word	0x40001c00
    1880:	0000158d 	.word	0x0000158d
    1884:	00001775 	.word	0x00001775

00001888 <system_pinmux_get_group_from_gpio_pin>:
{
    1888:	b580      	push	{r7, lr}
    188a:	b084      	sub	sp, #16
    188c:	af00      	add	r7, sp, #0
    188e:	0002      	movs	r2, r0
    1890:	1dfb      	adds	r3, r7, #7
    1892:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1894:	230f      	movs	r3, #15
    1896:	18fb      	adds	r3, r7, r3
    1898:	1dfa      	adds	r2, r7, #7
    189a:	7812      	ldrb	r2, [r2, #0]
    189c:	09d2      	lsrs	r2, r2, #7
    189e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    18a0:	230e      	movs	r3, #14
    18a2:	18fb      	adds	r3, r7, r3
    18a4:	1dfa      	adds	r2, r7, #7
    18a6:	7812      	ldrb	r2, [r2, #0]
    18a8:	0952      	lsrs	r2, r2, #5
    18aa:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    18ac:	4b0d      	ldr	r3, [pc, #52]	; (18e4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    18ae:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    18b0:	230f      	movs	r3, #15
    18b2:	18fb      	adds	r3, r7, r3
    18b4:	781b      	ldrb	r3, [r3, #0]
    18b6:	2b00      	cmp	r3, #0
    18b8:	d10f      	bne.n	18da <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    18ba:	230f      	movs	r3, #15
    18bc:	18fb      	adds	r3, r7, r3
    18be:	781b      	ldrb	r3, [r3, #0]
    18c0:	009b      	lsls	r3, r3, #2
    18c2:	2210      	movs	r2, #16
    18c4:	4694      	mov	ip, r2
    18c6:	44bc      	add	ip, r7
    18c8:	4463      	add	r3, ip
    18ca:	3b08      	subs	r3, #8
    18cc:	681a      	ldr	r2, [r3, #0]
    18ce:	230e      	movs	r3, #14
    18d0:	18fb      	adds	r3, r7, r3
    18d2:	781b      	ldrb	r3, [r3, #0]
    18d4:	01db      	lsls	r3, r3, #7
    18d6:	18d3      	adds	r3, r2, r3
    18d8:	e000      	b.n	18dc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    18da:	2300      	movs	r3, #0
}
    18dc:	0018      	movs	r0, r3
    18de:	46bd      	mov	sp, r7
    18e0:	b004      	add	sp, #16
    18e2:	bd80      	pop	{r7, pc}
    18e4:	41006000 	.word	0x41006000

000018e8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    18e8:	b580      	push	{r7, lr}
    18ea:	b088      	sub	sp, #32
    18ec:	af00      	add	r7, sp, #0
    18ee:	60f8      	str	r0, [r7, #12]
    18f0:	60b9      	str	r1, [r7, #8]
    18f2:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    18f4:	2300      	movs	r3, #0
    18f6:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    18f8:	687b      	ldr	r3, [r7, #4]
    18fa:	78db      	ldrb	r3, [r3, #3]
    18fc:	2201      	movs	r2, #1
    18fe:	4053      	eors	r3, r2
    1900:	b2db      	uxtb	r3, r3
    1902:	2b00      	cmp	r3, #0
    1904:	d035      	beq.n	1972 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1906:	687b      	ldr	r3, [r7, #4]
    1908:	781b      	ldrb	r3, [r3, #0]
    190a:	2b80      	cmp	r3, #128	; 0x80
    190c:	d00b      	beq.n	1926 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    190e:	69fb      	ldr	r3, [r7, #28]
    1910:	2280      	movs	r2, #128	; 0x80
    1912:	0252      	lsls	r2, r2, #9
    1914:	4313      	orrs	r3, r2
    1916:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1918:	687b      	ldr	r3, [r7, #4]
    191a:	781b      	ldrb	r3, [r3, #0]
    191c:	061b      	lsls	r3, r3, #24
    191e:	001a      	movs	r2, r3
    1920:	69fb      	ldr	r3, [r7, #28]
    1922:	4313      	orrs	r3, r2
    1924:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1926:	687b      	ldr	r3, [r7, #4]
    1928:	785b      	ldrb	r3, [r3, #1]
    192a:	2b00      	cmp	r3, #0
    192c:	d003      	beq.n	1936 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    192e:	687b      	ldr	r3, [r7, #4]
    1930:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1932:	2b02      	cmp	r3, #2
    1934:	d110      	bne.n	1958 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1936:	69fb      	ldr	r3, [r7, #28]
    1938:	2280      	movs	r2, #128	; 0x80
    193a:	0292      	lsls	r2, r2, #10
    193c:	4313      	orrs	r3, r2
    193e:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1940:	687b      	ldr	r3, [r7, #4]
    1942:	789b      	ldrb	r3, [r3, #2]
    1944:	2b00      	cmp	r3, #0
    1946:	d004      	beq.n	1952 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1948:	69fb      	ldr	r3, [r7, #28]
    194a:	2280      	movs	r2, #128	; 0x80
    194c:	02d2      	lsls	r2, r2, #11
    194e:	4313      	orrs	r3, r2
    1950:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1952:	68fb      	ldr	r3, [r7, #12]
    1954:	68ba      	ldr	r2, [r7, #8]
    1956:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1958:	687b      	ldr	r3, [r7, #4]
    195a:	785b      	ldrb	r3, [r3, #1]
    195c:	2b01      	cmp	r3, #1
    195e:	d003      	beq.n	1968 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1960:	687b      	ldr	r3, [r7, #4]
    1962:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1964:	2b02      	cmp	r3, #2
    1966:	d107      	bne.n	1978 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1968:	69fb      	ldr	r3, [r7, #28]
    196a:	4a22      	ldr	r2, [pc, #136]	; (19f4 <_system_pinmux_config+0x10c>)
    196c:	4013      	ands	r3, r2
    196e:	61fb      	str	r3, [r7, #28]
    1970:	e002      	b.n	1978 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1972:	68fb      	ldr	r3, [r7, #12]
    1974:	68ba      	ldr	r2, [r7, #8]
    1976:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1978:	68bb      	ldr	r3, [r7, #8]
    197a:	041b      	lsls	r3, r3, #16
    197c:	0c1b      	lsrs	r3, r3, #16
    197e:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1980:	68bb      	ldr	r3, [r7, #8]
    1982:	0c1b      	lsrs	r3, r3, #16
    1984:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1986:	69ba      	ldr	r2, [r7, #24]
    1988:	69fb      	ldr	r3, [r7, #28]
    198a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    198c:	22a0      	movs	r2, #160	; 0xa0
    198e:	05d2      	lsls	r2, r2, #23
    1990:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1992:	68fb      	ldr	r3, [r7, #12]
    1994:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1996:	697a      	ldr	r2, [r7, #20]
    1998:	69fb      	ldr	r3, [r7, #28]
    199a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    199c:	22d0      	movs	r2, #208	; 0xd0
    199e:	0612      	lsls	r2, r2, #24
    19a0:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    19a2:	68fb      	ldr	r3, [r7, #12]
    19a4:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    19a6:	687b      	ldr	r3, [r7, #4]
    19a8:	78db      	ldrb	r3, [r3, #3]
    19aa:	2201      	movs	r2, #1
    19ac:	4053      	eors	r3, r2
    19ae:	b2db      	uxtb	r3, r3
    19b0:	2b00      	cmp	r3, #0
    19b2:	d01a      	beq.n	19ea <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    19b4:	69fa      	ldr	r2, [r7, #28]
    19b6:	2380      	movs	r3, #128	; 0x80
    19b8:	02db      	lsls	r3, r3, #11
    19ba:	4013      	ands	r3, r2
    19bc:	d00a      	beq.n	19d4 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    19be:	687b      	ldr	r3, [r7, #4]
    19c0:	789b      	ldrb	r3, [r3, #2]
    19c2:	2b01      	cmp	r3, #1
    19c4:	d103      	bne.n	19ce <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    19c6:	68fb      	ldr	r3, [r7, #12]
    19c8:	68ba      	ldr	r2, [r7, #8]
    19ca:	619a      	str	r2, [r3, #24]
    19cc:	e002      	b.n	19d4 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    19ce:	68fb      	ldr	r3, [r7, #12]
    19d0:	68ba      	ldr	r2, [r7, #8]
    19d2:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	785b      	ldrb	r3, [r3, #1]
    19d8:	2b01      	cmp	r3, #1
    19da:	d003      	beq.n	19e4 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    19dc:	687b      	ldr	r3, [r7, #4]
    19de:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    19e0:	2b02      	cmp	r3, #2
    19e2:	d102      	bne.n	19ea <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    19e4:	68fb      	ldr	r3, [r7, #12]
    19e6:	68ba      	ldr	r2, [r7, #8]
    19e8:	609a      	str	r2, [r3, #8]
		}
	}
}
    19ea:	46c0      	nop			; (mov r8, r8)
    19ec:	46bd      	mov	sp, r7
    19ee:	b008      	add	sp, #32
    19f0:	bd80      	pop	{r7, pc}
    19f2:	46c0      	nop			; (mov r8, r8)
    19f4:	fffbffff 	.word	0xfffbffff

000019f8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    19f8:	b580      	push	{r7, lr}
    19fa:	b084      	sub	sp, #16
    19fc:	af00      	add	r7, sp, #0
    19fe:	0002      	movs	r2, r0
    1a00:	6039      	str	r1, [r7, #0]
    1a02:	1dfb      	adds	r3, r7, #7
    1a04:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1a06:	1dfb      	adds	r3, r7, #7
    1a08:	781b      	ldrb	r3, [r3, #0]
    1a0a:	0018      	movs	r0, r3
    1a0c:	4b0a      	ldr	r3, [pc, #40]	; (1a38 <system_pinmux_pin_set_config+0x40>)
    1a0e:	4798      	blx	r3
    1a10:	0003      	movs	r3, r0
    1a12:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1a14:	1dfb      	adds	r3, r7, #7
    1a16:	781b      	ldrb	r3, [r3, #0]
    1a18:	221f      	movs	r2, #31
    1a1a:	4013      	ands	r3, r2
    1a1c:	2201      	movs	r2, #1
    1a1e:	409a      	lsls	r2, r3
    1a20:	0013      	movs	r3, r2
    1a22:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    1a24:	683a      	ldr	r2, [r7, #0]
    1a26:	68b9      	ldr	r1, [r7, #8]
    1a28:	68fb      	ldr	r3, [r7, #12]
    1a2a:	0018      	movs	r0, r3
    1a2c:	4b03      	ldr	r3, [pc, #12]	; (1a3c <system_pinmux_pin_set_config+0x44>)
    1a2e:	4798      	blx	r3
}
    1a30:	46c0      	nop			; (mov r8, r8)
    1a32:	46bd      	mov	sp, r7
    1a34:	b004      	add	sp, #16
    1a36:	bd80      	pop	{r7, pc}
    1a38:	00001889 	.word	0x00001889
    1a3c:	000018e9 	.word	0x000018e9

00001a40 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    1a40:	b580      	push	{r7, lr}
    1a42:	af00      	add	r7, sp, #0
	return;
    1a44:	46c0      	nop			; (mov r8, r8)
}
    1a46:	46bd      	mov	sp, r7
    1a48:	bd80      	pop	{r7, pc}
	...

00001a4c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1a4c:	b580      	push	{r7, lr}
    1a4e:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1a50:	4b06      	ldr	r3, [pc, #24]	; (1a6c <system_init+0x20>)
    1a52:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1a54:	4b06      	ldr	r3, [pc, #24]	; (1a70 <system_init+0x24>)
    1a56:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1a58:	4b06      	ldr	r3, [pc, #24]	; (1a74 <system_init+0x28>)
    1a5a:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1a5c:	4b06      	ldr	r3, [pc, #24]	; (1a78 <system_init+0x2c>)
    1a5e:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1a60:	4b06      	ldr	r3, [pc, #24]	; (1a7c <system_init+0x30>)
    1a62:	4798      	blx	r3
}
    1a64:	46c0      	nop			; (mov r8, r8)
    1a66:	46bd      	mov	sp, r7
    1a68:	bd80      	pop	{r7, pc}
    1a6a:	46c0      	nop			; (mov r8, r8)
    1a6c:	00001441 	.word	0x00001441
    1a70:	00001155 	.word	0x00001155
    1a74:	00001a41 	.word	0x00001a41
    1a78:	00001a41 	.word	0x00001a41
    1a7c:	00001a41 	.word	0x00001a41

00001a80 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1a80:	b580      	push	{r7, lr}
    1a82:	b082      	sub	sp, #8
    1a84:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    1a86:	4b16      	ldr	r3, [pc, #88]	; (1ae0 <Reset_Handler+0x60>)
    1a88:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    1a8a:	4b16      	ldr	r3, [pc, #88]	; (1ae4 <Reset_Handler+0x64>)
    1a8c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    1a8e:	687a      	ldr	r2, [r7, #4]
    1a90:	683b      	ldr	r3, [r7, #0]
    1a92:	429a      	cmp	r2, r3
    1a94:	d00c      	beq.n	1ab0 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    1a96:	e007      	b.n	1aa8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    1a98:	683b      	ldr	r3, [r7, #0]
    1a9a:	1d1a      	adds	r2, r3, #4
    1a9c:	603a      	str	r2, [r7, #0]
    1a9e:	687a      	ldr	r2, [r7, #4]
    1aa0:	1d11      	adds	r1, r2, #4
    1aa2:	6079      	str	r1, [r7, #4]
    1aa4:	6812      	ldr	r2, [r2, #0]
    1aa6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    1aa8:	683a      	ldr	r2, [r7, #0]
    1aaa:	4b0f      	ldr	r3, [pc, #60]	; (1ae8 <Reset_Handler+0x68>)
    1aac:	429a      	cmp	r2, r3
    1aae:	d3f3      	bcc.n	1a98 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1ab0:	4b0e      	ldr	r3, [pc, #56]	; (1aec <Reset_Handler+0x6c>)
    1ab2:	603b      	str	r3, [r7, #0]
    1ab4:	e004      	b.n	1ac0 <Reset_Handler+0x40>
                *pDest++ = 0;
    1ab6:	683b      	ldr	r3, [r7, #0]
    1ab8:	1d1a      	adds	r2, r3, #4
    1aba:	603a      	str	r2, [r7, #0]
    1abc:	2200      	movs	r2, #0
    1abe:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    1ac0:	683a      	ldr	r2, [r7, #0]
    1ac2:	4b0b      	ldr	r3, [pc, #44]	; (1af0 <Reset_Handler+0x70>)
    1ac4:	429a      	cmp	r2, r3
    1ac6:	d3f6      	bcc.n	1ab6 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    1ac8:	4b0a      	ldr	r3, [pc, #40]	; (1af4 <Reset_Handler+0x74>)
    1aca:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1acc:	4b0a      	ldr	r3, [pc, #40]	; (1af8 <Reset_Handler+0x78>)
    1ace:	687a      	ldr	r2, [r7, #4]
    1ad0:	21ff      	movs	r1, #255	; 0xff
    1ad2:	438a      	bics	r2, r1
    1ad4:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    1ad6:	4b09      	ldr	r3, [pc, #36]	; (1afc <Reset_Handler+0x7c>)
    1ad8:	4798      	blx	r3

        /* Branch to main function */
        main();
    1ada:	4b09      	ldr	r3, [pc, #36]	; (1b00 <Reset_Handler+0x80>)
    1adc:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    1ade:	e7fe      	b.n	1ade <Reset_Handler+0x5e>
    1ae0:	00001f60 	.word	0x00001f60
    1ae4:	20000000 	.word	0x20000000
    1ae8:	20000008 	.word	0x20000008
    1aec:	20000008 	.word	0x20000008
    1af0:	200038c8 	.word	0x200038c8
    1af4:	00000000 	.word	0x00000000
    1af8:	e000ed00 	.word	0xe000ed00
    1afc:	00001ec1 	.word	0x00001ec1
    1b00:	00001d6d 	.word	0x00001d6d

00001b04 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1b04:	b580      	push	{r7, lr}
    1b06:	af00      	add	r7, sp, #0
        while (1) {
    1b08:	e7fe      	b.n	1b08 <Dummy_Handler+0x4>
	...

00001b0c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    1b0c:	b5b0      	push	{r4, r5, r7, lr}
    1b0e:	b082      	sub	sp, #8
    1b10:	af00      	add	r7, sp, #0
    1b12:	0002      	movs	r2, r0
    1b14:	6039      	str	r1, [r7, #0]
    1b16:	1dfb      	adds	r3, r7, #7
    1b18:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
    1b1a:	1dfb      	adds	r3, r7, #7
    1b1c:	781b      	ldrb	r3, [r3, #0]
    1b1e:	2b7f      	cmp	r3, #127	; 0x7f
    1b20:	d932      	bls.n	1b88 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1b22:	4c2f      	ldr	r4, [pc, #188]	; (1be0 <NVIC_SetPriority+0xd4>)
    1b24:	1dfb      	adds	r3, r7, #7
    1b26:	781b      	ldrb	r3, [r3, #0]
    1b28:	001a      	movs	r2, r3
    1b2a:	230f      	movs	r3, #15
    1b2c:	4013      	ands	r3, r2
    1b2e:	3b08      	subs	r3, #8
    1b30:	0899      	lsrs	r1, r3, #2
    1b32:	4a2b      	ldr	r2, [pc, #172]	; (1be0 <NVIC_SetPriority+0xd4>)
    1b34:	1dfb      	adds	r3, r7, #7
    1b36:	781b      	ldrb	r3, [r3, #0]
    1b38:	0018      	movs	r0, r3
    1b3a:	230f      	movs	r3, #15
    1b3c:	4003      	ands	r3, r0
    1b3e:	3b08      	subs	r3, #8
    1b40:	089b      	lsrs	r3, r3, #2
    1b42:	3306      	adds	r3, #6
    1b44:	009b      	lsls	r3, r3, #2
    1b46:	18d3      	adds	r3, r2, r3
    1b48:	3304      	adds	r3, #4
    1b4a:	681b      	ldr	r3, [r3, #0]
    1b4c:	1dfa      	adds	r2, r7, #7
    1b4e:	7812      	ldrb	r2, [r2, #0]
    1b50:	0010      	movs	r0, r2
    1b52:	2203      	movs	r2, #3
    1b54:	4002      	ands	r2, r0
    1b56:	00d2      	lsls	r2, r2, #3
    1b58:	20ff      	movs	r0, #255	; 0xff
    1b5a:	4090      	lsls	r0, r2
    1b5c:	0002      	movs	r2, r0
    1b5e:	43d2      	mvns	r2, r2
    1b60:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    1b62:	683b      	ldr	r3, [r7, #0]
    1b64:	019b      	lsls	r3, r3, #6
    1b66:	20ff      	movs	r0, #255	; 0xff
    1b68:	4018      	ands	r0, r3
    1b6a:	1dfb      	adds	r3, r7, #7
    1b6c:	781b      	ldrb	r3, [r3, #0]
    1b6e:	001d      	movs	r5, r3
    1b70:	2303      	movs	r3, #3
    1b72:	402b      	ands	r3, r5
    1b74:	00db      	lsls	r3, r3, #3
    1b76:	4098      	lsls	r0, r3
    1b78:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1b7a:	431a      	orrs	r2, r3
    1b7c:	1d8b      	adds	r3, r1, #6
    1b7e:	009b      	lsls	r3, r3, #2
    1b80:	18e3      	adds	r3, r4, r3
    1b82:	3304      	adds	r3, #4
    1b84:	601a      	str	r2, [r3, #0]
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
    1b86:	e027      	b.n	1bd8 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1b88:	4c16      	ldr	r4, [pc, #88]	; (1be4 <NVIC_SetPriority+0xd8>)
    1b8a:	1dfb      	adds	r3, r7, #7
    1b8c:	781b      	ldrb	r3, [r3, #0]
    1b8e:	b25b      	sxtb	r3, r3
    1b90:	089b      	lsrs	r3, r3, #2
    1b92:	4914      	ldr	r1, [pc, #80]	; (1be4 <NVIC_SetPriority+0xd8>)
    1b94:	1dfa      	adds	r2, r7, #7
    1b96:	7812      	ldrb	r2, [r2, #0]
    1b98:	b252      	sxtb	r2, r2
    1b9a:	0892      	lsrs	r2, r2, #2
    1b9c:	32c0      	adds	r2, #192	; 0xc0
    1b9e:	0092      	lsls	r2, r2, #2
    1ba0:	5852      	ldr	r2, [r2, r1]
    1ba2:	1df9      	adds	r1, r7, #7
    1ba4:	7809      	ldrb	r1, [r1, #0]
    1ba6:	0008      	movs	r0, r1
    1ba8:	2103      	movs	r1, #3
    1baa:	4001      	ands	r1, r0
    1bac:	00c9      	lsls	r1, r1, #3
    1bae:	20ff      	movs	r0, #255	; 0xff
    1bb0:	4088      	lsls	r0, r1
    1bb2:	0001      	movs	r1, r0
    1bb4:	43c9      	mvns	r1, r1
    1bb6:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    1bb8:	683a      	ldr	r2, [r7, #0]
    1bba:	0192      	lsls	r2, r2, #6
    1bbc:	20ff      	movs	r0, #255	; 0xff
    1bbe:	4010      	ands	r0, r2
    1bc0:	1dfa      	adds	r2, r7, #7
    1bc2:	7812      	ldrb	r2, [r2, #0]
    1bc4:	0015      	movs	r5, r2
    1bc6:	2203      	movs	r2, #3
    1bc8:	402a      	ands	r2, r5
    1bca:	00d2      	lsls	r2, r2, #3
    1bcc:	4090      	lsls	r0, r2
    1bce:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1bd0:	430a      	orrs	r2, r1
    1bd2:	33c0      	adds	r3, #192	; 0xc0
    1bd4:	009b      	lsls	r3, r3, #2
    1bd6:	511a      	str	r2, [r3, r4]
}
    1bd8:	46c0      	nop			; (mov r8, r8)
    1bda:	46bd      	mov	sp, r7
    1bdc:	b002      	add	sp, #8
    1bde:	bdb0      	pop	{r4, r5, r7, pc}
    1be0:	e000ed00 	.word	0xe000ed00
    1be4:	e000e100 	.word	0xe000e100

00001be8 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
    1be8:	b580      	push	{r7, lr}
    1bea:	b082      	sub	sp, #8
    1bec:	af00      	add	r7, sp, #0
    1bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
    1bf0:	687b      	ldr	r3, [r7, #4]
    1bf2:	3b01      	subs	r3, #1
    1bf4:	4a0c      	ldr	r2, [pc, #48]	; (1c28 <SysTick_Config+0x40>)
    1bf6:	4293      	cmp	r3, r2
    1bf8:	d901      	bls.n	1bfe <SysTick_Config+0x16>
    1bfa:	2301      	movs	r3, #1
    1bfc:	e010      	b.n	1c20 <SysTick_Config+0x38>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
    1bfe:	4b0b      	ldr	r3, [pc, #44]	; (1c2c <SysTick_Config+0x44>)
    1c00:	687a      	ldr	r2, [r7, #4]
    1c02:	3a01      	subs	r2, #1
    1c04:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
    1c06:	2301      	movs	r3, #1
    1c08:	425b      	negs	r3, r3
    1c0a:	2103      	movs	r1, #3
    1c0c:	0018      	movs	r0, r3
    1c0e:	4b08      	ldr	r3, [pc, #32]	; (1c30 <SysTick_Config+0x48>)
    1c10:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    1c12:	4b06      	ldr	r3, [pc, #24]	; (1c2c <SysTick_Config+0x44>)
    1c14:	2200      	movs	r2, #0
    1c16:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    1c18:	4b04      	ldr	r3, [pc, #16]	; (1c2c <SysTick_Config+0x44>)
    1c1a:	2207      	movs	r2, #7
    1c1c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
    1c1e:	2300      	movs	r3, #0
}
    1c20:	0018      	movs	r0, r3
    1c22:	46bd      	mov	sp, r7
    1c24:	b002      	add	sp, #8
    1c26:	bd80      	pop	{r7, pc}
    1c28:	00ffffff 	.word	0x00ffffff
    1c2c:	e000e010 	.word	0xe000e010
    1c30:	00001b0d 	.word	0x00001b0d

00001c34 <system_pinmux_get_group_from_gpio_pin>:
{
    1c34:	b580      	push	{r7, lr}
    1c36:	b084      	sub	sp, #16
    1c38:	af00      	add	r7, sp, #0
    1c3a:	0002      	movs	r2, r0
    1c3c:	1dfb      	adds	r3, r7, #7
    1c3e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1c40:	230f      	movs	r3, #15
    1c42:	18fb      	adds	r3, r7, r3
    1c44:	1dfa      	adds	r2, r7, #7
    1c46:	7812      	ldrb	r2, [r2, #0]
    1c48:	09d2      	lsrs	r2, r2, #7
    1c4a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1c4c:	230e      	movs	r3, #14
    1c4e:	18fb      	adds	r3, r7, r3
    1c50:	1dfa      	adds	r2, r7, #7
    1c52:	7812      	ldrb	r2, [r2, #0]
    1c54:	0952      	lsrs	r2, r2, #5
    1c56:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1c58:	4b0d      	ldr	r3, [pc, #52]	; (1c90 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1c5a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    1c5c:	230f      	movs	r3, #15
    1c5e:	18fb      	adds	r3, r7, r3
    1c60:	781b      	ldrb	r3, [r3, #0]
    1c62:	2b00      	cmp	r3, #0
    1c64:	d10f      	bne.n	1c86 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1c66:	230f      	movs	r3, #15
    1c68:	18fb      	adds	r3, r7, r3
    1c6a:	781b      	ldrb	r3, [r3, #0]
    1c6c:	009b      	lsls	r3, r3, #2
    1c6e:	2210      	movs	r2, #16
    1c70:	4694      	mov	ip, r2
    1c72:	44bc      	add	ip, r7
    1c74:	4463      	add	r3, ip
    1c76:	3b08      	subs	r3, #8
    1c78:	681a      	ldr	r2, [r3, #0]
    1c7a:	230e      	movs	r3, #14
    1c7c:	18fb      	adds	r3, r7, r3
    1c7e:	781b      	ldrb	r3, [r3, #0]
    1c80:	01db      	lsls	r3, r3, #7
    1c82:	18d3      	adds	r3, r2, r3
    1c84:	e000      	b.n	1c88 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    1c86:	2300      	movs	r3, #0
}
    1c88:	0018      	movs	r0, r3
    1c8a:	46bd      	mov	sp, r7
    1c8c:	b004      	add	sp, #16
    1c8e:	bd80      	pop	{r7, pc}
    1c90:	41006000 	.word	0x41006000

00001c94 <port_get_group_from_gpio_pin>:
{
    1c94:	b580      	push	{r7, lr}
    1c96:	b082      	sub	sp, #8
    1c98:	af00      	add	r7, sp, #0
    1c9a:	0002      	movs	r2, r0
    1c9c:	1dfb      	adds	r3, r7, #7
    1c9e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1ca0:	1dfb      	adds	r3, r7, #7
    1ca2:	781b      	ldrb	r3, [r3, #0]
    1ca4:	0018      	movs	r0, r3
    1ca6:	4b03      	ldr	r3, [pc, #12]	; (1cb4 <port_get_group_from_gpio_pin+0x20>)
    1ca8:	4798      	blx	r3
    1caa:	0003      	movs	r3, r0
}
    1cac:	0018      	movs	r0, r3
    1cae:	46bd      	mov	sp, r7
    1cb0:	b002      	add	sp, #8
    1cb2:	bd80      	pop	{r7, pc}
    1cb4:	00001c35 	.word	0x00001c35

00001cb8 <port_get_config_defaults>:
{
    1cb8:	b580      	push	{r7, lr}
    1cba:	b082      	sub	sp, #8
    1cbc:	af00      	add	r7, sp, #0
    1cbe:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	2200      	movs	r2, #0
    1cc4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1cc6:	687b      	ldr	r3, [r7, #4]
    1cc8:	2201      	movs	r2, #1
    1cca:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    1ccc:	687b      	ldr	r3, [r7, #4]
    1cce:	2200      	movs	r2, #0
    1cd0:	709a      	strb	r2, [r3, #2]
}
    1cd2:	46c0      	nop			; (mov r8, r8)
    1cd4:	46bd      	mov	sp, r7
    1cd6:	b002      	add	sp, #8
    1cd8:	bd80      	pop	{r7, pc}
	...

00001cdc <port_pin_set_output_level>:
{
    1cdc:	b580      	push	{r7, lr}
    1cde:	b084      	sub	sp, #16
    1ce0:	af00      	add	r7, sp, #0
    1ce2:	0002      	movs	r2, r0
    1ce4:	1dfb      	adds	r3, r7, #7
    1ce6:	701a      	strb	r2, [r3, #0]
    1ce8:	1dbb      	adds	r3, r7, #6
    1cea:	1c0a      	adds	r2, r1, #0
    1cec:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1cee:	1dfb      	adds	r3, r7, #7
    1cf0:	781b      	ldrb	r3, [r3, #0]
    1cf2:	0018      	movs	r0, r3
    1cf4:	4b0d      	ldr	r3, [pc, #52]	; (1d2c <port_pin_set_output_level+0x50>)
    1cf6:	4798      	blx	r3
    1cf8:	0003      	movs	r3, r0
    1cfa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1cfc:	1dfb      	adds	r3, r7, #7
    1cfe:	781b      	ldrb	r3, [r3, #0]
    1d00:	221f      	movs	r2, #31
    1d02:	4013      	ands	r3, r2
    1d04:	2201      	movs	r2, #1
    1d06:	409a      	lsls	r2, r3
    1d08:	0013      	movs	r3, r2
    1d0a:	60bb      	str	r3, [r7, #8]
	if (level) {
    1d0c:	1dbb      	adds	r3, r7, #6
    1d0e:	781b      	ldrb	r3, [r3, #0]
    1d10:	2b00      	cmp	r3, #0
    1d12:	d003      	beq.n	1d1c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1d14:	68fb      	ldr	r3, [r7, #12]
    1d16:	68ba      	ldr	r2, [r7, #8]
    1d18:	619a      	str	r2, [r3, #24]
}
    1d1a:	e002      	b.n	1d22 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    1d1c:	68fb      	ldr	r3, [r7, #12]
    1d1e:	68ba      	ldr	r2, [r7, #8]
    1d20:	615a      	str	r2, [r3, #20]
}
    1d22:	46c0      	nop			; (mov r8, r8)
    1d24:	46bd      	mov	sp, r7
    1d26:	b004      	add	sp, #16
    1d28:	bd80      	pop	{r7, pc}
    1d2a:	46c0      	nop			; (mov r8, r8)
    1d2c:	00001c95 	.word	0x00001c95

00001d30 <config_led>:
}
#endif

/** Configure LED0, turn it off*/
static void config_led(void)
{
    1d30:	b580      	push	{r7, lr}
    1d32:	b082      	sub	sp, #8
    1d34:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    1d36:	1d3b      	adds	r3, r7, #4
    1d38:	0018      	movs	r0, r3
    1d3a:	4b09      	ldr	r3, [pc, #36]	; (1d60 <config_led+0x30>)
    1d3c:	4798      	blx	r3

	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1d3e:	1d3b      	adds	r3, r7, #4
    1d40:	2201      	movs	r2, #1
    1d42:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1d44:	1d3b      	adds	r3, r7, #4
    1d46:	0019      	movs	r1, r3
    1d48:	205b      	movs	r0, #91	; 0x5b
    1d4a:	4b06      	ldr	r3, [pc, #24]	; (1d64 <config_led+0x34>)
    1d4c:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    1d4e:	2101      	movs	r1, #1
    1d50:	205b      	movs	r0, #91	; 0x5b
    1d52:	4b05      	ldr	r3, [pc, #20]	; (1d68 <config_led+0x38>)
    1d54:	4798      	blx	r3
}
    1d56:	46c0      	nop			; (mov r8, r8)
    1d58:	46bd      	mov	sp, r7
    1d5a:	b002      	add	sp, #8
    1d5c:	bd80      	pop	{r7, pc}
    1d5e:	46c0      	nop			; (mov r8, r8)
    1d60:	00001cb9 	.word	0x00001cb9
    1d64:	000011cd 	.word	0x000011cd
    1d68:	00001cdd 	.word	0x00001cdd

00001d6c <main>:

int main(void)
{
    1d6c:	b580      	push	{r7, lr}
    1d6e:	af00      	add	r7, sp, #0
	system_init();
    1d70:	4b07      	ldr	r3, [pc, #28]	; (1d90 <main+0x24>)
    1d72:	4798      	blx	r3

	/*Configure system tick to generate periodic interrupts */
	SysTick_Config(system_gclk_gen_get_hz(GCLK_GENERATOR_0));
    1d74:	2000      	movs	r0, #0
    1d76:	4b07      	ldr	r3, [pc, #28]	; (1d94 <main+0x28>)
    1d78:	4798      	blx	r3
    1d7a:	0003      	movs	r3, r0
    1d7c:	0018      	movs	r0, r3
    1d7e:	4b06      	ldr	r3, [pc, #24]	; (1d98 <main+0x2c>)
    1d80:	4798      	blx	r3
	//! [enable_global_interrupts]
	/*system_interrupt_enable_global();*/
	//! [enable_global_interrupts]
	

	config_led();
    1d82:	4b06      	ldr	r3, [pc, #24]	; (1d9c <main+0x30>)
    1d84:	4798      	blx	r3

	FreeRtosTasks();
    1d86:	4b06      	ldr	r3, [pc, #24]	; (1da0 <main+0x34>)
    1d88:	4798      	blx	r3
	
	vTaskStartScheduler();
    1d8a:	4b06      	ldr	r3, [pc, #24]	; (1da4 <main+0x38>)
    1d8c:	4798      	blx	r3

	while (true) {
    1d8e:	e7fe      	b.n	1d8e <main+0x22>
    1d90:	00001a4d 	.word	0x00001a4d
    1d94:	00001775 	.word	0x00001775
    1d98:	00001be9 	.word	0x00001be9
    1d9c:	00001d31 	.word	0x00001d31
    1da0:	00000109 	.word	0x00000109
    1da4:	0000097d 	.word	0x0000097d

00001da8 <__udivsi3>:
    1da8:	2200      	movs	r2, #0
    1daa:	0843      	lsrs	r3, r0, #1
    1dac:	428b      	cmp	r3, r1
    1dae:	d374      	bcc.n	1e9a <__udivsi3+0xf2>
    1db0:	0903      	lsrs	r3, r0, #4
    1db2:	428b      	cmp	r3, r1
    1db4:	d35f      	bcc.n	1e76 <__udivsi3+0xce>
    1db6:	0a03      	lsrs	r3, r0, #8
    1db8:	428b      	cmp	r3, r1
    1dba:	d344      	bcc.n	1e46 <__udivsi3+0x9e>
    1dbc:	0b03      	lsrs	r3, r0, #12
    1dbe:	428b      	cmp	r3, r1
    1dc0:	d328      	bcc.n	1e14 <__udivsi3+0x6c>
    1dc2:	0c03      	lsrs	r3, r0, #16
    1dc4:	428b      	cmp	r3, r1
    1dc6:	d30d      	bcc.n	1de4 <__udivsi3+0x3c>
    1dc8:	22ff      	movs	r2, #255	; 0xff
    1dca:	0209      	lsls	r1, r1, #8
    1dcc:	ba12      	rev	r2, r2
    1dce:	0c03      	lsrs	r3, r0, #16
    1dd0:	428b      	cmp	r3, r1
    1dd2:	d302      	bcc.n	1dda <__udivsi3+0x32>
    1dd4:	1212      	asrs	r2, r2, #8
    1dd6:	0209      	lsls	r1, r1, #8
    1dd8:	d065      	beq.n	1ea6 <__udivsi3+0xfe>
    1dda:	0b03      	lsrs	r3, r0, #12
    1ddc:	428b      	cmp	r3, r1
    1dde:	d319      	bcc.n	1e14 <__udivsi3+0x6c>
    1de0:	e000      	b.n	1de4 <__udivsi3+0x3c>
    1de2:	0a09      	lsrs	r1, r1, #8
    1de4:	0bc3      	lsrs	r3, r0, #15
    1de6:	428b      	cmp	r3, r1
    1de8:	d301      	bcc.n	1dee <__udivsi3+0x46>
    1dea:	03cb      	lsls	r3, r1, #15
    1dec:	1ac0      	subs	r0, r0, r3
    1dee:	4152      	adcs	r2, r2
    1df0:	0b83      	lsrs	r3, r0, #14
    1df2:	428b      	cmp	r3, r1
    1df4:	d301      	bcc.n	1dfa <__udivsi3+0x52>
    1df6:	038b      	lsls	r3, r1, #14
    1df8:	1ac0      	subs	r0, r0, r3
    1dfa:	4152      	adcs	r2, r2
    1dfc:	0b43      	lsrs	r3, r0, #13
    1dfe:	428b      	cmp	r3, r1
    1e00:	d301      	bcc.n	1e06 <__udivsi3+0x5e>
    1e02:	034b      	lsls	r3, r1, #13
    1e04:	1ac0      	subs	r0, r0, r3
    1e06:	4152      	adcs	r2, r2
    1e08:	0b03      	lsrs	r3, r0, #12
    1e0a:	428b      	cmp	r3, r1
    1e0c:	d301      	bcc.n	1e12 <__udivsi3+0x6a>
    1e0e:	030b      	lsls	r3, r1, #12
    1e10:	1ac0      	subs	r0, r0, r3
    1e12:	4152      	adcs	r2, r2
    1e14:	0ac3      	lsrs	r3, r0, #11
    1e16:	428b      	cmp	r3, r1
    1e18:	d301      	bcc.n	1e1e <__udivsi3+0x76>
    1e1a:	02cb      	lsls	r3, r1, #11
    1e1c:	1ac0      	subs	r0, r0, r3
    1e1e:	4152      	adcs	r2, r2
    1e20:	0a83      	lsrs	r3, r0, #10
    1e22:	428b      	cmp	r3, r1
    1e24:	d301      	bcc.n	1e2a <__udivsi3+0x82>
    1e26:	028b      	lsls	r3, r1, #10
    1e28:	1ac0      	subs	r0, r0, r3
    1e2a:	4152      	adcs	r2, r2
    1e2c:	0a43      	lsrs	r3, r0, #9
    1e2e:	428b      	cmp	r3, r1
    1e30:	d301      	bcc.n	1e36 <__udivsi3+0x8e>
    1e32:	024b      	lsls	r3, r1, #9
    1e34:	1ac0      	subs	r0, r0, r3
    1e36:	4152      	adcs	r2, r2
    1e38:	0a03      	lsrs	r3, r0, #8
    1e3a:	428b      	cmp	r3, r1
    1e3c:	d301      	bcc.n	1e42 <__udivsi3+0x9a>
    1e3e:	020b      	lsls	r3, r1, #8
    1e40:	1ac0      	subs	r0, r0, r3
    1e42:	4152      	adcs	r2, r2
    1e44:	d2cd      	bcs.n	1de2 <__udivsi3+0x3a>
    1e46:	09c3      	lsrs	r3, r0, #7
    1e48:	428b      	cmp	r3, r1
    1e4a:	d301      	bcc.n	1e50 <__udivsi3+0xa8>
    1e4c:	01cb      	lsls	r3, r1, #7
    1e4e:	1ac0      	subs	r0, r0, r3
    1e50:	4152      	adcs	r2, r2
    1e52:	0983      	lsrs	r3, r0, #6
    1e54:	428b      	cmp	r3, r1
    1e56:	d301      	bcc.n	1e5c <__udivsi3+0xb4>
    1e58:	018b      	lsls	r3, r1, #6
    1e5a:	1ac0      	subs	r0, r0, r3
    1e5c:	4152      	adcs	r2, r2
    1e5e:	0943      	lsrs	r3, r0, #5
    1e60:	428b      	cmp	r3, r1
    1e62:	d301      	bcc.n	1e68 <__udivsi3+0xc0>
    1e64:	014b      	lsls	r3, r1, #5
    1e66:	1ac0      	subs	r0, r0, r3
    1e68:	4152      	adcs	r2, r2
    1e6a:	0903      	lsrs	r3, r0, #4
    1e6c:	428b      	cmp	r3, r1
    1e6e:	d301      	bcc.n	1e74 <__udivsi3+0xcc>
    1e70:	010b      	lsls	r3, r1, #4
    1e72:	1ac0      	subs	r0, r0, r3
    1e74:	4152      	adcs	r2, r2
    1e76:	08c3      	lsrs	r3, r0, #3
    1e78:	428b      	cmp	r3, r1
    1e7a:	d301      	bcc.n	1e80 <__udivsi3+0xd8>
    1e7c:	00cb      	lsls	r3, r1, #3
    1e7e:	1ac0      	subs	r0, r0, r3
    1e80:	4152      	adcs	r2, r2
    1e82:	0883      	lsrs	r3, r0, #2
    1e84:	428b      	cmp	r3, r1
    1e86:	d301      	bcc.n	1e8c <__udivsi3+0xe4>
    1e88:	008b      	lsls	r3, r1, #2
    1e8a:	1ac0      	subs	r0, r0, r3
    1e8c:	4152      	adcs	r2, r2
    1e8e:	0843      	lsrs	r3, r0, #1
    1e90:	428b      	cmp	r3, r1
    1e92:	d301      	bcc.n	1e98 <__udivsi3+0xf0>
    1e94:	004b      	lsls	r3, r1, #1
    1e96:	1ac0      	subs	r0, r0, r3
    1e98:	4152      	adcs	r2, r2
    1e9a:	1a41      	subs	r1, r0, r1
    1e9c:	d200      	bcs.n	1ea0 <__udivsi3+0xf8>
    1e9e:	4601      	mov	r1, r0
    1ea0:	4152      	adcs	r2, r2
    1ea2:	4610      	mov	r0, r2
    1ea4:	4770      	bx	lr
    1ea6:	e7ff      	b.n	1ea8 <__udivsi3+0x100>
    1ea8:	b501      	push	{r0, lr}
    1eaa:	2000      	movs	r0, #0
    1eac:	f000 f806 	bl	1ebc <__aeabi_idiv0>
    1eb0:	bd02      	pop	{r1, pc}
    1eb2:	46c0      	nop			; (mov r8, r8)

00001eb4 <__aeabi_uidivmod>:
    1eb4:	2900      	cmp	r1, #0
    1eb6:	d0f7      	beq.n	1ea8 <__udivsi3+0x100>
    1eb8:	e776      	b.n	1da8 <__udivsi3>
    1eba:	4770      	bx	lr

00001ebc <__aeabi_idiv0>:
    1ebc:	4770      	bx	lr
    1ebe:	46c0      	nop			; (mov r8, r8)

00001ec0 <__libc_init_array>:
    1ec0:	b570      	push	{r4, r5, r6, lr}
    1ec2:	2600      	movs	r6, #0
    1ec4:	4d0c      	ldr	r5, [pc, #48]	; (1ef8 <__libc_init_array+0x38>)
    1ec6:	4c0d      	ldr	r4, [pc, #52]	; (1efc <__libc_init_array+0x3c>)
    1ec8:	1b64      	subs	r4, r4, r5
    1eca:	10a4      	asrs	r4, r4, #2
    1ecc:	42a6      	cmp	r6, r4
    1ece:	d109      	bne.n	1ee4 <__libc_init_array+0x24>
    1ed0:	2600      	movs	r6, #0
    1ed2:	f000 f835 	bl	1f40 <_init>
    1ed6:	4d0a      	ldr	r5, [pc, #40]	; (1f00 <__libc_init_array+0x40>)
    1ed8:	4c0a      	ldr	r4, [pc, #40]	; (1f04 <__libc_init_array+0x44>)
    1eda:	1b64      	subs	r4, r4, r5
    1edc:	10a4      	asrs	r4, r4, #2
    1ede:	42a6      	cmp	r6, r4
    1ee0:	d105      	bne.n	1eee <__libc_init_array+0x2e>
    1ee2:	bd70      	pop	{r4, r5, r6, pc}
    1ee4:	00b3      	lsls	r3, r6, #2
    1ee6:	58eb      	ldr	r3, [r5, r3]
    1ee8:	4798      	blx	r3
    1eea:	3601      	adds	r6, #1
    1eec:	e7ee      	b.n	1ecc <__libc_init_array+0xc>
    1eee:	00b3      	lsls	r3, r6, #2
    1ef0:	58eb      	ldr	r3, [r5, r3]
    1ef2:	4798      	blx	r3
    1ef4:	3601      	adds	r6, #1
    1ef6:	e7f2      	b.n	1ede <__libc_init_array+0x1e>
    1ef8:	00001f4c 	.word	0x00001f4c
    1efc:	00001f4c 	.word	0x00001f4c
    1f00:	00001f4c 	.word	0x00001f4c
    1f04:	00001f50 	.word	0x00001f50
    1f08:	5f44454c 	.word	0x5f44454c
    1f0c:	00004e4f 	.word	0x00004e4f
    1f10:	5f44454c 	.word	0x5f44454c
    1f14:	00004646 	.word	0x00004646
    1f18:	454c4449 	.word	0x454c4449
    1f1c:	00000000 	.word	0x00000000
    1f20:	000013a2 	.word	0x000013a2
    1f24:	00001418 	.word	0x00001418
    1f28:	00001418 	.word	0x00001418
    1f2c:	000013bc 	.word	0x000013bc
    1f30:	000013c2 	.word	0x000013c2
    1f34:	000013a8 	.word	0x000013a8
    1f38:	000013c8 	.word	0x000013c8
    1f3c:	000013fe 	.word	0x000013fe

00001f40 <_init>:
    1f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f42:	46c0      	nop			; (mov r8, r8)
    1f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1f46:	bc08      	pop	{r3}
    1f48:	469e      	mov	lr, r3
    1f4a:	4770      	bx	lr

00001f4c <__init_array_start>:
    1f4c:	000000d1 	.word	0x000000d1

00001f50 <_fini>:
    1f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f52:	46c0      	nop			; (mov r8, r8)
    1f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1f56:	bc08      	pop	{r3}
    1f58:	469e      	mov	lr, r3
    1f5a:	4770      	bx	lr

00001f5c <__fini_array_start>:
    1f5c:	000000a9 	.word	0x000000a9
